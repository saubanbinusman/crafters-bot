[
    {
        "word_count": 276,
        "value": "A simple test to verify if your class is following LSP is to replace its base type with the subclass; if the program doesn\u2019t change in meaning, then you are following LSP. Acommon mistake isto inherit froma type to getaccessto its state or exposesome of its behavior.It seems a reasonable idea at first because it\u2019s a way of reusing code. The problem with this approach is that it tends to ignore the implications of the \u201cis a\u201d relationshipimplied bythe inheritance in OOP. Let\u2019s think for a second about a Person class that is required to expose some behavior related to Money, and for that reason inherits from the Wallet type. If we allow Person to inherit from Wallet, Person gains access to the behavior exposed by Wallet. The problem with this is that semantically we are stating that a Person is a Wallet and everywhere in our program we can use one in place of the other without changing the meaning of our software. This is the reason why this approach is often said to favor composition over inheritance. Composition expresses the concept of \u201chas a\u201d and fits better in this example. Saying that a Person \u201chas a\u201d Wallet definitely makes more sense than a Person \u201cis a\u201d Wallet. So, when thinking about inheritance in OOP, remember that inheritance represents the \u201cis a\u201d relationships, and subtypes refine the base types behavior, but maintain the meaning. In the following example, we are breaking the Liskov Substitution Principle in the Cook method of the Chef class because you cannot replace Oven with any of its children without changing the meaning of what an Oven achieves for the Chef."
    },
    {
        "word_count": 260,
        "value": "\u2022 Ackoff\u2019s Best: His Classic Writings on Management, Russell L. Ackoff\u00b2\u2077\u00b2 \u2022 Agile Coaching, Rachel Davies, Liz Sedley\u00b2\u2077\u00b3 \u2022 Agile Retrospectives: Making Good Teams Great, Esther Derby, et al.\u00b2\u2077\u2074 \u2022 Business Model Generation, Alexander Osterwalder, Yves Pigneur\u00b2\u2077\u2075 \u2022 Critical Chain, Eliyahu M. Goldratt\u00b2\u2077\u2076 \u2022 The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations, Gene Kim, Jez Humble, Patrick Debois, John Willis\u00b2\u2077\u2077 \u2022 Domain-Driven Design: Tackling Complexity in the Heart of Software, Eric Evans\u00b2\u2077\u2078 \u2022 The Goal: A Process of Ongoing Improvement, Eliyahu M. Goldratt\u00b2\u2077\u2079 \u2022 Impact Mapping: Making a Big Impact with Software Products and Projects, Gojko Adzic\u00b2\u2078\u2070 \u2022 Implementing Domain-Driven Design, Vaughn Vernon\u00b2\u2078\u00b9 \u2022 Kanban: Successful Evolutionary Change for Your Technology Business, David J. Anderson\u00b2\u2078\u00b2 \u2022 The Mythical Man-Month: Essays on Software Engineering, Frederick P. Brooks Jr.\u00b2\u2078\u00b3 \u2022 Out of the Crisis, W. Edwards Deming\u00b2\u2078\u2074 \u2022 Patterns, Principles, and Practices of Domain-Driven Design, Scott Millett and Nick Tune\u00b2\u2078\u2075 \u2022 The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win, Gene Kim, Kevin Behr, George Spafford\u00b2\u2078\u2076 \u2022 Running Lean: Iterate from Plan A to a Plan That Works, Ash Maurya\u00b2\u2078\u2077 \u2022 The Systems Bible: The Beginner\u2019s Guide to Systems Large and Small: Being the Third Edition of Systemantics, John Gall\u00b2\u2078\u2078 \u2022 Theory of Constraints, Eliyahu M. Goldratt\u00b2\u2078\u2079 \u2022 Theory of Constraints Handbook, F. Cox III, John G. Schleier Jr.\u00b2\u2079\u2070 \u2022 User Story Mapping: Discover the Whole Story, Build the Right Product, Jeff Patton\u00b2\u2079\u00b9 \u2022 Value Stream Mapping: How to Visualize Work and Align Leadership for Organizational Transformation, Karen Martin and Mike Osterling\u00b2\u2079\u00b2"
    },
    {
        "word_count": 253,
        "value": "W e can see that every line of our code has things repeated two or more times: How many instances of Connascence can you spot by looking at the name of the variables and their types? 1) Connascence of Name for the fields _hour , _minute, _second (3 appearance each) 2) Connascence of Name for the parameters hour, minute, second (2 appearance each) 3) Connascence of Type for the parameters hour, minute, second and respective fields _hour, _- minute, _second (2 appearance each) These are are the \u201cgood\u201d types of Connascence and should be the only ones we find in the system. We will see that other types of static Connascence can always be reduced to this form. The elements in that code snippet would be useless if they would appear only once: the repetitions of their appearance in the code is what allows the data to be part of some logical construct for transforming information and making it flow. This concept represents the building blocks of software development and optimizing it would lead to better design, simpler code and minimum waste. Can we find other kinds of Connascence in that example? There are two others \u2013 not of a very good kind: 4) Connascence of Position for the parameters hour, minute, second 5) Connascence of Value for the parameters hour, minute, second As you can see in the following graphic, these last two kinds of Connascence score at the top of our weak-to-strong list. In the sections that follow, we\u2019ll explain why."
    },
    {
        "word_count": 236,
        "value": "\u2022 Tests should test one thing only. Imagine you have 1,000 tests and a failing test. Can you spot a single failing behavior? This does not mean you should write a single assertion. It is fine to have multiple assertions as long as they are testing the same behavior. \u2022 Create more specific tests to drive a more generic solution (triangulate) by adding new tests that force your code to pivot. \u2022 Give your tests meaningful names (behavior/goal-oriented) expressing your business domain. \u2013 Avoid technical names for tests. Example: myMethodNameReturnsSomething \u2013 Avoid leaking implementation details in test names Example: myTestReturnsFalse or CommandPatternTest \u2013 Avoid writing technical tests; you should test behaviors, not the technicality of compo- nents. \u2022 Always see the test fail for the right reason. An unexpected fail is not a valid fail.Examples: Unexpected exception thrown; missing library, missing import \u2022 Ensure you have meaningful feedback from the failing test. Make sure your test name, examples and assertion provide good feedback when a test fails. When a test fails, you should be able to intuitively pinpoint the broken behavior. \u2022 Keep your tests and production code separate. Do not mix test code with production code. You do not want to deploy test code with your production code. \u2022 Organize your unit tests to reflect your production code. Test projects should follow a structure similar to the production code structure. \u00b3\u00b2CyberDojo Foundation (See license), http://www.cyber-dojo.org/"
    },
    {
        "word_count": 214,
        "value": "Connascence of Timing happens when the success of two or more calls depends on the timing of when they occur. The concept is not very different from CoEO, but here we have an explicit relation with the point in time the call gets executed, not just before or after. One of the most classic occurrences of CoT is race conditions in multithreading. You\u2019ll find another example when you see in the code something like Wait, Sleep, or Timeout followed by an actual arbitrary explicit timespan. The problem with CoTm is that we usually are not in control of the time, so it obviously has the potential to introduce great flakiness into the system. And intermittent problems are usually the hardest to identify and resolve. That\u2019s why we feel that it\u2019s always a good idea to try to avoid CoTm like the pox, when possible. Sometimes, however, we can\u2019t really get rid of it. For example, think to some integration tests for a Service Bus. We always have Connascence of Timing in an asynchronous kind of test like that. We need to decide an arbitrary amount of time to wait for the message, right? \u00b9\u2074\u2079So many attributions and recollections exist as to the origination of Murphy\u2019s Law that is impossible to pinpoint with any certainty."
    },
    {
        "word_count": 208,
        "value": "What\u2019s the difference in this implementation? We used an event in the message handler to notify the external world that a new message has been queued up. Assuming no one listens to the event in production, there is no impact on the behavior. How does this influence our tests? It gives us the option of hooking up an awaiter directly on that event, so that when the message arrives at destination, we know we can dequeue it! The behaviorwouldbeexactlythesameonlyifthemessagedoesn\u2019tgetdeliveredinonesecondsincethe awaiter.WaitOne(1000) will trigger the timeout and the test would fail. Here we have effectively removed Connascence of Time for our tests\u2019 happy path! We\u2019re aware that some readers will argue that we actually modified our production code for the sake of testing. Obviously, this is a trade off, and we always appreciate this kind of critical thinking. However, consider that the event would be fired if and only if there is a handler attached to the event \u2013 so production behavior doesn\u2019t change at all. Ultimately, what makes it worthwhile is related to the time we save when we run our tests! If there are many integration tests or the latency could vary (and hopefully you run them often), the advantages of removing this CoTm become evident very soon."
    },
    {
        "word_count": 195,
        "value": "W e made the constructor private so we can force the call of the Factory Method for instantiating the concrete as an IBuildCarsWithBrand. This interface now just has the WithBrand method, so it enforces the beginning of the sequence correctly. Furthermore, it returns the concrete as an IBuildCarsWithEngine this time, which returns an IBuildCarsWithColor. Chaining interfaces in this way will lead exactly to the sequence we wanted. Only the last one will returnthe IBuildCarswherethe Build()methodcanfinallybecalledandtheconcretecarreturned. We have essentially used chained interfaces to enforce a call sequence over methods of a concrete class. Note that Connascence of Execution Order is still there, because it is part of our requirements. However, we achieved something very interesting; we have pushed its locality completely inside the code! When we leave the programmer to figure out the correct execution order, we have a dangerous loss of information. One of the Connascent elements become undocumented (until we have an eventual runtime failure). Using Interface Segregation in this way allows us to instead express the correct execution sequence, making the expected usage very easy to understand. Remember Murphy\u2019s Law? \u201cAnything that can go wrong will go wrong.\u201d\u00b9\u2074\u2079 We shouldn\u2019t take any chance."
    },
    {
        "word_count": 185,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2013 Arrange (a.k.a. Given) all necessary preconditions. \u2013 Act (a.k.a. When) on the subject under test. \u2013 Assert (a.k.a. Then) that the expected results have occurred. \u2022 Write the assertion first and work backward. \u2013 Write your test by first writing the assertion; don\u2019t even worry about naming the test properly. \u2013 Write the act section of your test. \u2013 Write the arrange block if required. \u2013 Finally, name the test. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2022 Consider using object calisthenics to drive design decisions. \u2022 Consider adding tests to legacy code (New habit). \u2013 Approval tests, Characterization tests, Golden Master tests."
    },
    {
        "word_count": 184,
        "value": "\u2022 Long Method \u2013 Methods should do only one thing. SRP (Single Responsibility Principle) violation. One level of abstraction. \u201cKeep all entities small\u201d object calisthenics rule violation. \u2022 Large Class \u2013 Classes should have only one responsibility. Possible SRP violation. No more than 50 lines per class. \u201cKeep all entities small\u201d object calisthenics rule violation. \u2022 Primitive Obsession \u2013 Don\u2019t use primitive types as substitutes for classes. If the data type is sufficiently complex, use a class to represent it. \u201cWrap all primitives and strings\u201d object calisthenics rule violation. \u2022 Long Parameter List \u2013 \u201cKeep all entities small\u201d object calisthenics rule violation. \u2013 Ideal: 0 parameters \u2013 niladic method \u2013 Okay: 1 parameter \u2013 monadic method \u2013 Acceptable: 2 parameters \u2013 dyadic method \u2013 Debatable: 3 parameters \u2013 triadic method \u2013 Avoid Special Justification: more than 3 parameters \u2013 polyadic method \u2022 Data Clumps \u2013 Same data items appearing together in lots of places (i.e., parameters, dtos, sets of variables\u2026). Special case of Duplicated Code. DRY violation. There is a missing concept that could be expressed as a class introducing a level of abstraction."
    },
    {
        "word_count": 182,
        "value": "Goal The center of an impact map answers the most important question: Why are we doing this? This is the goal we are trying to achieve. Actors The first branch of an impact map provides answers to the following questions: Who can produce the desired effect? Who can obstruct it? Who are the consumers or users of our product? Who will be impacted by it? These are the actors who can influence the outcome. Impacts The second branch level of an impact map sets the actors in the perspective of our business goal. It answers the following questions: How should our actors\u2019 behavior change? How can they help us to achieve the goal? How can they obstruct or prevent us from succeeding? These are the impacts that we\u2019re trying to create. Deliverables Once we have the first three questions answered, we can talk about scope. The third branch level of an impact map answers the following question: What can we do, as an organization or a delivery team, to support the required impacts? These are the deliverables, software features and organizational activities."
    },
    {
        "word_count": 174,
        "value": "Definition The term \u201cconnascence\u201d derives from Latin: co + nascence co \u21d2 \u201ctogether\u201d nascence from nascentem \u21d2 \u201carising young, immature,\u201d present participle of nasci \u21d2 \u201cto be born\u201d Hence the definition\u2026 \u201cThe birth and growth of two or more things at the same time\u201d In software development, we can say that: Twoormoreelements (fields, methods, classes, parameters, variables, but also build steps,proceduresofanykind,etc.)areconnascent ifachangeinoneelementwould requirealsoachangeintheothersinorderforthesystemtokeepworkingcorrectly. Connascence generalizes the ideas of Cohesion and Coupling, combining them in a more exhaustive classification using a proper taxonomy. In 2009 Jim Weirich,\u00b9\u2074\u2078 in a great talk at a conference, defined Connascence as \u201cThe Grand Unified Theory of Software Development\u201d because of its wide applicability in the analysis and improvement of information systems. Connascence makes the argument for several levels of encapsulation in the system, often called \u201cinformation hiding.\u201d \u00b9\u2074\u2078James Nolan Weirich (November 18, 1956 \u2013 February 19, 2014) was well known in the software industry as a developer, speaker, teacher and contributor to the Ruby Programming Language community. His talks have been the main inspiration for this chapter. Thanks, James!"
    },
    {
        "word_count": 173,
        "value": "Firstly, I want to dedicate this book to my family. My wife Joanna Kathlyn for the support and the patience of dealing with me in everyday life, my mum Mariuccia for always believing in me and my cousin Devis Cracco, who let me play with his Commodore when we were kids. This book couldn\u2019t be possible without you. A special mention goes to my dear and still missed father Stefano, who passed away almost two decades ago, even before my graduation - his greatest wish. His example has been the main cornerstone of my education and I am proud of always be the one defending the Truth, free critical thinking and respect for others - no matter what. I am sure you would be proud of who I am and of the achievement of writing this book. I hope to be able to do the same good job with your grandson Jaden Stefano, the latest, greatest joy of our family. And thanks to you, Jaden, for taking out the best of us all!"
    },
    {
        "word_count": 165,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks (New habit). \u2013 Arrange (a.k.a. Given) all necessary preconditions. \u2013 Act (a.k.a. When) on the subject under test. \u2013 Assert (a.k.a. Then) that the expected results have occurred. \u2022 Write the assertion first and work backward (New habit). \u2013 Write your test by first writing the assertion; don\u2019t worry yet about naming the test properly. \u2013 Write the act section of your test. \u2013 Write the arrange block, if required. \u2013 Finally, name the test. \u2022 Write fast, isolated, repeatable and self-validating tests (New habit)."
    },
    {
        "word_count": 156,
        "value": "Cohesion is a measure of how strongly related and focused the various responsibilities of a software module are, and it \u201crefers to the degree to which the elements of a module belong together.\u201d\u00b9\u00b2\u2070 Cohesion is everywhere, not just in code. For example, companies try to create highly cohesive teams, with cross-functional roles (developers, business analysts, designers, and so forth) that work closely together to achieve a specific goal, such as a software product update. A component should implement a single behavior or responsibility, and all the parts of the component should contribute to the implementation of it. Components should only be created if all parts they group are collaborating together to implement a behavior or responsibility. Cohesion indicates a component\u2019s functional strength and how much it focuses on a single point. Low Cohesion results in behavior being scattered instead of existing in a single component. Some indicators of possible low Cohesion are the following code smells:"
    },
    {
        "word_count": 155,
        "value": "\u2022 Identifyingtheconstraint isthefirststep,whichinvolvesunderstandingthesystemandlooking forthebottleneck.Insoftwaredevelopment,itisofteneasyidentifiableonakanbanboardwith an overloaded column, but in manufacturing contexts they were looking for \u201ca big pile of stuff and idle people standing around waiting.\u201d \u2022 Exploittheconstraint pushesitslimitandmaximizecurrentoverallthroughputwithoutfurther investment. This might be the equivalent of optimizing a stored procedure, for example, when a particular database operation depending on it has been identified as the bottleneck.\u00b2\u00b3\u2074 \u2022 Subordinate everything to the constraint by finding ways to reduce the pressure, optimizing the systems interacting with it. In the previous stored procedure example, this step would be optimizing the systems calling the stored procedure to use it less often, maybe caching some results. \u2022 Elevate the constraint is about devoting more resources to it until it\u2019s not a constraint for the system anymore. In the previous example, it could mean scaling the database up or out, or rewriting the system responsible for the operation. \u2022 At this point, you Repeat the process, searching for the next constraint."
    },
    {
        "word_count": 151,
        "value": "If we look at this from a point of view internal to the Order Processor class, using a Tuple might not appear to be a bad idea. However, when we step out of the class and try to use the method, the problems become evident. The first call shows CoP of Degree 2, while the second is of Degree 6. It\u2019s easy to see the progressive fading of expressivity for these two calls. Here in the Degree 2 call, we have completely lost the meaning of the second boolean, even if with a little effort we can work it out (but it\u2019s not nice, anyway). Whataboutthesecondcall?WithaDegree6CoPweareleftwithasequenceofapparentlyarbitrary information to pass in, making it an absolute nightmare to guess the correct usage! The good news is that it\u2019s easy to get back on track with a quick refactoring; we can introduce a class for message passing and rewrite the calling method as follows:"
    },
    {
        "word_count": 151,
        "value": "\u00b2\u00b9\u2074Microframeworkfor.NETinC#providingjustGiven,When,Thenfunctionality,byMarcoConsolarohttps://github.com/conso/EasyBdd. This is very \u201cmicro\u201d because it is made by just one abstract class. The following is the opinion of a friend about EasyBdd when asked about a popular Bdd Framework (which we will call \u201cX\u201d): \u201cEasyBdd is like X without the clunkiness and fragility, but also without 100% natural language. The price you pay is \u2018my_test_does_this\u2019 versus \u2018my test does this.\u2019 The benefit is the IDE can refactor your tests properly, you can navigate your codebase using standard Visual Studio and IDE navigation techniques, you don\u2019t need plug-ins, and it runs a lot quicker. I personally see X as a bit of a vanity project. Geeky types love its cleverness. But overall the cost is too high for me. I don\u2019t yet know anyone who has tried both and gone back from EasyBDD to X.\u201d If you use .NET you can try it out if you want \u2013 it\u2019s free!"
    },
    {
        "word_count": 149,
        "value": "However, we think that \u201cless is more\u201d when we are trying to understand the meaning of some code. We are not fans of inline comments in code, especially if they would quickly repeat themselves. You do not need to add them to your blocks. Once you start using this convention for all tests, a simple separation using blank lines should be enough. If you are disciplined, it will sink in very quickly. The ideal unit test should have only three statements: (1) create an object; (2) call a method; (3) assert. Although it is not always possible to keep things so minimal, you can use private methods and test setup snippets to minimize the number of lines in each of the sections. Keeping the code to a minimum on tests optimizes clarity and readability. When a test fails, you do not want to spend too much time understanding it."
    },
    {
        "word_count": 144,
        "value": "Do Do you see anything wrong with it? What if at some point we have to change the algorithm? What would happen? Well, in that case we would be forced to modify the code inside both methods. A \u201cby the book\u201d example of Divergent Change code smell. The problem here comes from the fact that our algorithm has not been encapsulated into its abstraction layer; hence, it cannot be reused. Look at sum % 10, for instance. It might be simple, but in this case, that\u2019s our alogithm. It appears twice in two different methods. Does it respect DRY? No, it doesn\u2019t. This is a classic example of Connascence of Algorithm. OncethiskindofConnascenceisidentified,it\u2019susuallynotdifficulttosolve.Thetrickisjustpushing the logic into another reusable construct. This is usually a class if the algorithm is complicated enough. In our example, a method would be enough (assuming this would be the only usage)."
    },
    {
        "word_count": 142,
        "value": "\u2022 Lazy Class \u2013 A class that does too little. May be acting only as Middle Man or a Data Class, or can be caused by Speculative Generality. \u2022 Data Class \u2013 Classes that have fields, properties and nothing else. Anemic classes that contain no behavior. Special case of Lazy Class. Can be \u201call classes must have state\u201d object calisthenics rule violation or \u201cno classes with more than two instance variables\u201d object calisthenics rule violation. \u2022 Duplicated Code \u2013 Identical or very similar code (or duplicated knowledge) exists in more than one location. DRY violation. \u2022 Dead Code \u2013 Code that has no references to it. Commented or unreachable code. \u2022 Speculative Generality \u2013 YAGNI\u2077\u2076 violation or only users of method or class are test cases. \u2022 Comments \u2013 Make an effort to create code that expresses intent instead of adding comments."
    },
    {
        "word_count": 139,
        "value": "\u2022 Tester: \u201cGuys, I have to let you know beforehand that I have never worked like that before. I am not sure if I am up to your expectations?\u201d \u2022 Me:\u201cDon\u2019tworry,wearegoingtopairwithyouaslongasyoufeelconfidenttotrybyyourself. We promise you will never be let alone, and you can grab one of us for help anytime.\u201d \u2022 Tester: \u201cThat makes me feel better, but I have never coded in my life.\u201d \u2022 Eldon: \u201cYou are not required to really implement anything. It\u2019s just about learning a very easy, alternative way to write in plain English. I promise once I show it to you, everything will be less scary.\u201d \u2022 Tester: \u201cBut, I mean, are you sure I can learn fast enough?\u201d \u2022 Me: \u201cListen, I learned to write code when I was 9. Do you know what that means?\u201d \u2022 Tester: \u201cThat you are really smart.\u201d"
    },
    {
        "word_count": 138,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2022 Consider using object calisthenics to drive design decisions. \u2022 Consider adding tests to legacy code. \u2022 Consider using classic TDD or Outside-In TDD (New habit). \u2013 If using Outside-In TDD, start with an acceptance test and follow the double loop TDD."
    },
    {
        "word_count": 138,
        "value": "Furthermore, very fast acceptance tests can be run every so often, which is priceless for those who write the code: feedback on the progress of the development of the feature. This is an amazingly helpful aspect because to implement something, we have to break the task down in our mind in smallerproblemsandtacklethemoneatthetime.Weoftenhavetofocusonahigh-levelcomponent first and then to a lower-level one (and/or vice versa) before the information pipeline is completely built. This is a particular case of context switching which can easily drive us away from the higher- level feature. If we have a quick test we can run, we can delegate completely the higher-level aspects to automation and focus better on the internals. This allows us to write them beforehand and use that feedback to drive the growth of the functionalities of the system in a very effective way."
    },
    {
        "word_count": 137,
        "value": "W ecanseethatnowourparametertakesanenumerationcalled\u201cHour,\u201danditisbasicallyimpossible to pass something incorrectly. However, the resulting enumeration becomes quite long and feels like overkill in this situation. What about minutes and seconds? Those would be even longer. Preceding on that road clearly depends on how the class will be used in its context. If there will be a lot of manual instantiations it might be worth doing it. (Remember, \u201ctyping is not the bottleneck!\u201d) Otherwise, there is a minimum viable solution for this form of Connascence. The real issue with CoV is that it is discoverable only at runtime, so we should try to minimize the response time of the negative feedback and validate the input as soon as possible. In this way, we make sure that this class participates in the information flow if \u2013 and only if \u2013 its state is valid."
    },
    {
        "word_count": 131,
        "value": "\u2022 It is possible to just look in every direction, but not all the directions are always available for being looked at, nor to move to. \u2022 The world will have treasures hidden in several locations, which can be revealed if players enter the location or use the correct item in the correct location. \u2022 The game terminates when the player finds the exit of the katacombs, and the score is the sum of the value of the treasures collected. \u2022 When looking somewhere without anything interesting, the system should reply, \u201cNothing interesting to look at there!\u201d \u2022 When a general action is not available, the system will reply, \u201cI can\u2019t do that here!\u201d \u2022 When the system can\u2019t understand the command, it should prompt, \u201cI don\u2019t understand that. English please!\u201d"
    },
    {
        "word_count": 131,
        "value": "\u00b2\u2079\u2074ThethingIdislikethemostofenvironmentswithablamingcultureisthatitmakesriskaversityspreadandbecomesentrenchedinalmost everybody. I remember when I was a young developer, I was often scared when performing some delicate task until I had an enlightening conversation with Matteo, the same guy mentioned in the Design Patterns story. Feeling my emotionally charged state when I had to do an update in the live database (let\u2019s skip the reasons for this), he told me: \u201cRelax, mate, you\u2019re not a cardiac surgeon operating on someone\u2019s heart. No one is gonna die if you make a mistake, chill out. This panic is not gonna help your performance, anyway. In the worst case scenario, we just rollback.\u201d That was a pearl of wisdom I internalized with time, and when I see the same situation now, from the other side of the fence, I use the same joke."
    },
    {
        "word_count": 126,
        "value": "separate places. Too high Coupling and too low Cohesion \u2013 Data and behavior in separate places. Too high Cohesion \u2013 The class is probably doing too much. Too low Cohesion \u2013 Class misses state or behavior. Too high Cohesion \u2013 The method is probably doing too much. Too high Cohesion \u2013 The method is probably doing too much. Too high Coupling \u2013 A class knows too much about non-immediate neighbors. Too low Cohesion \u2013 Class just delegates behavior and has no behavior or state. Too low Coupling \u2013 The class hierarchy is probably wrong. Too low Cohesion \u2013 Behavior that should be in a type is scattered. Too high Coupling \u2013 The class hierarchy is probably wrong. Shotgun Surgery Cohesion/Coupling Speculative Generality Switch Statements Temporary Field"
    },
    {
        "word_count": 125,
        "value": "While good acceptance tests maintain their main business value even if they don\u2019t run very fast (think about the classic test pyramid), we feel that the slower they execute, the less value they give for development purposes. In general, one of the properties of helpful system feedback is how quick they are, and the business acceptance is one of the most important among them when developing an information system. If we are building the wrong thing, the faster we know it, the faster we can correct the mistake (remember the poka-yoke?). If tests take all night to run (we have seen it with our own eyes in some teams), we might waste an entire day of work before we know it! Not good at all."
    },
    {
        "word_count": 123,
        "value": "\u2022 Rigidity \u2013 The system is hard to change because every change forces many other changes to other parts of the system. \u2022 Fragility \u2013 Changes cause the system to break in places that have no conceptual relationship to the part that was changed. \u2022 Immobility \u2013 It is hard to disentangle the system into components that can be reused in the other systems. \u2022 Viscosity \u2013 Doing things right is harder than doing things wrong. \u2022 Needless Complexity \u2013 The design contains infrastructure that adds no direct benefit. \u2022 Needless Repetition \u2013 The design contains repeating structures that could be unified under a single abstraction. \u2022 Opacity \u2013 It is hard to read and understand. It does not express its intent well."
    },
    {
        "word_count": 122,
        "value": "\u2022 \u201cEverything You Need to Know About Theory of Constraints,\u201d Smartsheet\u00b2\u2076\u00b9 \u2022 \u201cFrom Mechanistic to Systemic thinking,\u201d Russell L. Ackoff\u00b2\u2076\u00b2 \u2022 \u201cAn introduction to user story mapping,\u201d Jim Bowes\u00b2\u2076\u00b3 \u2022 \u201cThe Lean Canvas,\u201d Ash Maurya\u00b2\u2076\u2074 \u2022 \u201cMicroservices architecture principle #4: Asynchronous communication over synchronous communication,\u201d Gero Vermaas\u00b2\u2076\u2075 \u2022 \u201cStory Map Concepts,\u201d Jeff Patton\u00b2\u2076\u2076 \u2022 \u201cThe Strategic Practices of Domain-Driven Design,\u201d Nick Tune\u00b2\u2076\u2077 \u2022 \u201cThe True Difference Between Knowledge and Understanding,\u201d Colin Robertson\u00b2\u2076\u2078 \u2022 \u201cUser story mapping,\u201d Jeff Patton\u00b2\u2076\u2079 \u2022 \u201cWhat is the Theory of Constraints?\u201d LeanProduction\u00b2\u2077\u2070 \u2022 \u201cWhat is the Theory of Constraints, and How Does It Compare to Lean Thinking?\u201d LeanPro- duction\u00b2\u2077\u00b9 \u00b2\u2076\u2070W Edwards Deming, Out of the Crisis, https://www.goodreads.com/book/show/566574.Out_of_the_Crisis \u00b2\u2076\u00b9https://www.smartsheet.com/all-about-theory-of-constraints \u00b2\u2076\u00b2https://www.youtube.com/watch?v=yGN5DBpW93g \u00b2\u2076\u00b3https://manifesto.co.uk/user-story-mapping/ \u00b2\u2076\u2074https://leanstack.com/leancanvas \u00b2\u2076\u2075https://xebia.com/blog/microservices-architecture-principle-4-asynchronous-communication-over-synchronous-communication/ \u00b2\u2076\u2076http://www.jpattonassociates.com/wp-content/uploads/2015/03/story_mapping.pdf \u00b2\u2076\u2077http://www.ntcoding.co.uk/workshops/strategic-ddd-practices \u00b2\u2076\u2078http://www.willpowered.co/learn/knowledge-understanding \u00b2\u2076\u2079http://www.jpattonassociates.com/user-story-mapping/ \u00b2\u2077\u2070https://www.leanproduction.com/theory-of-constraints.html \u00b2\u2077\u00b9https://www.lean.org/common/display/?o=223"
    },
    {
        "word_count": 121,
        "value": "Ultimately, I want to mention a few top quality professionals I met during my career who share the same values and with time became inevitably great friends. They have always been very supportive and genuinely excited about this work. People like Nick Tune, Joao Fernandes, Eldon Ferran De Pol, Michele Leonetti, Claudio Perrone and obviously Pedro and Alex, the other four hands on this book. Thanksfornevermademefeelaloneintheholistic,everydaybattleforimprovingthegeneralquality of software development. We are still minority, but this book might help the cause! A special final mention to Sandro Mancuso and the fantastic Codurance\u2019s gang where Pedro, Alex and me initially met: the seed of this book has been planted there. Thank you for being the great environment where our destiny crossed and changed!"
    },
    {
        "word_count": 121,
        "value": "\u2022 New principles New concepts are added on top of the previous materials. \u2022 Katas\u2074 Exercises for you to spend some time practicing the new material. \u2022 Great habits We build up a collection of good practices step-by-step. \u2022 Where are we in the big picture of OO software design? A bird\u2019s eye view of where the chapter practices belong in the world of software design. It relates chapter practices with other practices, rules and principles. \u2022 When should I move to the next chapter? A few questions to help you decide if you are ready to move on. \u2022 Resources In case you want to go deeper into the material presented, the Resources sections provide web links and recommended books."
    },
    {
        "word_count": 120,
        "value": "Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling"
    },
    {
        "word_count": 119,
        "value": "A class that uses methods or properties of another class excessively. An example is a class A that only contains state and class B that uses the state from class A to perform some operation(s) with it. We say that class B has Feature Envy of class A because class B contains the behavior that should be in class A. As a general rule, behavior should be close to the state it uses. Feature Envy usually implies that the envied class is a Lazy Class. This smell may also lead to Shotgun Surgery, as behavior can be scattered in many places or may also lead to Divergent Change as a class may become a God Class (knowing too much)."
    },
    {
        "word_count": 119,
        "value": "The Interface Segregation Principle (ISP) states that \u201cClients should not be forced to depend upon interfaces that they do not use.\u201d\u00b9\u00b3\u2074 The goal of the ISP is to reduce the side effects and the amount of changes needed in a system by splitting the software into multiple, smaller and independent parts grouped by functionality. The dependency should be on the interface, the whole interface, and nothing but the interface. We refer to a sound line of reasoning, for example, as coherent. The thoughts fit, they go together, they relatetoeachother.Thisisexactlythecharacteristicofaninterfacethatmakesitcoherent;thepieces all seem to be related, they seem to belong together, and it would feel somewhat unnatural to pull them apart. Such an interface exhibits Cohesion. Let\u2019s look at an example."
    },
    {
        "word_count": 118,
        "value": "For example, you don\u2019t need to memorize the rules of the cinema to understand that if your phone rings in the middle of the show, it would annoy those around you. Or you don\u2019t need to consciously remember the rule of the road that requires you to stop at the red light; you just know it\u2019s a very wise thing to do. That\u2019s because sensible rules are expression of principles and values valid in a specific context. In the cinema, we want to be nice and let everybody enjoy the show, so we try not to be noisy. In the street, we want everybody to travel safely, so we respect the convention of traffic lights at crossing points."
    },
    {
        "word_count": 118,
        "value": "So, I suggested, \u201cWhy don\u2019t we break the dogma of full test coverage and stop enforcing unit tests, as we already have the acceptance umbrella? If we write testable code, what\u2019s the problem? If at some point we feel like a class would benefit from a unit test, it will be easy to add. The advantage will be that we\u2019ll have much more freedom in the refactoring phase, with less moving parts in the test side to fix every time. We don\u2019t need many tests to develop outside-in; one is enough, after all. I do it all the time when I work on lone projects, and it allows me to be very quick. Why don\u2019t we try it?\u201d"
    },
    {
        "word_count": 117,
        "value": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CON- TRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
        "word_count": 116,
        "value": "An Acceptance Test suite needs to be functionally complete in order to be considered the very final contract between a business and development team. As developers, we cannot take for granted parts of a story or have only partial coverage. In our experience, we have noticed that most of the time, with enough mature team members, bugs of category 1 and 3 tend to disappear almost completely. At that point, we have still seen bugs of category 2 coming out in the form of missing criteria for unconsidered situations. While sometimes it\u2019s hard to consider every aspect of scenarios, it\u2019s still important to keep this in consideration and help the business by asking the right questions."
    },
    {
        "word_count": 115,
        "value": "This activity has the final goal of producing the Acceptance Criteria, which should be added there and then, documenting the growth of the shared understanding of the work to be done. This task is the most important because it enables the chain of value that BDD builds into the system. It is the \u201cglue\u201d between the business and the information system and the first step for its complete automation. It\u2019s this automation that gives us one of the most important feedback points of all: the feedback about functional correctness. This must be the ultimate proof that what we have developed is what the business wants. If it is not there, the business didn\u2019t request it."
    },
    {
        "word_count": 113,
        "value": "\u2022 As soon as you can apply TDD\u2019s red, green, refactor practice to solve procedural problems: \u2013 Can you write a test before any code? \u2013 Are your tests and test names behavior related? \u2013 Are you able to stay in the same behavior until you finish it? \u2013 Can you write the simplest implementation that makes the test pass? \u2013 Can you spot duplication and refactor it, including duplication in test code? \u2022 Whenever you can, apply the three methods of moving forward in TDD: \u2013 Fake it \u2013 Obvious implementation \u2013 Triangulation \u2022 Bonus \u2013 Can you use TDD to write any of the katas from scratch in under 20 minutes?"
    },
    {
        "word_count": 113,
        "value": "\u2022 Runs all the tests \u2022 Contains no duplication (once and only once) \u2022 Expresses all the ideas you want to express \u2013 Do not put the implementation of unrelated ideas in the same method \u2013 Classes should organize ideas in a readily understandable way \u2013 Use appropriate names so you don\u2019t have to explain method, member or class names with additional documentation \u2013 Methods and classes should be implemented so they can be understood totally from their public interfaces. This not only allows for up-front testing, but decreases coupling. \u2022 Minimizes classes and methods. This is actually redundant, but it\u2019s a reminder that we are trying to make this simple and concise."
    },
    {
        "word_count": 112,
        "value": "I would like to thank many others that also helped shape me. I\u2019m only standing on the shoulders of giants. First, to my grandparents \u2013 Eduardo Ferreira dos Santos, Maria Augusta Moreira, Rosa Pinto and Pedro Pinto; my uncles \u2013 Antonio Moreira and Fernando Moreira; my friends \u2013 Sergio Antunes, Fernando Silva, Pedro Pinto, Ant\u00f3nio (T\u00f3) Nunes, Nuno Joaquinito, Jorge Silva, Pedro Friezas, Edin Kapic, Ger M\u00e1n, Samir Talwar, Sandro Mancuso, Guillem Fernandez, Marcos Grau and Robert Firek; my high school teachers \u2013 Maria Barroso, Carlos, Daniel and Franco; my coauthors and friends, Marco Consolaro and Alessandro Di Gioia, and finally, to my very dear and missed friend, Nelson dos Santos Costa."
    },
    {
        "word_count": 112,
        "value": "Let\u2019s Let\u2019s suppose we have deployed our website, but we notice that the stats don\u2019t add up. We debug our controller, and we see that the \u201ctransport\u201d is \u201c3\u201d. That\u2019s not helpful. We\u2019ll always need one more step (or to memorize the mapping) in order to identify the correct meaning of \u201c3\u201d. In this case, just using the text values bike, car, train, bus would have avoided this kind of problem. But what if we really need to keep the integers because we have to feed a legacy system that really, really, really loves integers? Are we doomed? Nope. As we said, it\u2019s easy to fix! We can just introduce some constants."
    },
    {
        "word_count": 111,
        "value": "\u00b9One of the authors of this book comes from Vicenza, the land where his favorite distilled product, grappa, was first crafted. For those who don\u2019t know it, \u201cGrappa\u201d is also the name of a mountain (sadly famous for bloody battles of WWI, but now even more famous for the renowned spirit). Grappa is made by distillation of the \u201cvinacce\u201d leftover from the wine-making process. They were lean thinkers in Veneto in the old times: reduce waste! In trying to squeeze some more value out of it, someone had the idea of trying distillation. From steams and grape peels to an astonishingly 40 percent alcoholic elixir with plenty of character and depth!"
    },
    {
        "word_count": 111,
        "value": "Inheritance Coupling is the strongest type of Coupling and happens every time a class inherits from another one. When that happens, the subclass binds itself completely to the superclass. If the superclass definition is modified, all the subclasses are affected. Have you ever felt lost, trying to understand a very long hierarchy chain of inheritance? A high degree of Inheritance Coupling may not be a good idea. Ideally, we should be careful and use inheritance only for generalization/specialization se- mantics (A-Kind-Of relationship). As we will see, this is exactly the goal of the Liskow Substitution Principle in the next chapter. For any other case, we should really use composition over inheritance."
    },
    {
        "word_count": 111,
        "value": "This basic principle hides a few very important consequences. The main one being that in a system, if we don\u2019t improve the most limiting constraint, improving other aspects will not have any visible consequences for the system as a whole, essentially being a wasted effort. Furthermore, if there is not an easy way to monitor the system in order to always identify the current constraint (the usual feedback), once our improvement efforts on the current constraint succeed in removing it, we should immediately stop working on it and switch our focus on identifying the next constraint. To keep working on the old one from that moment onwards would become a waste."
    },
    {
        "word_count": 111,
        "value": "\u00b3\u2070\u2078Nassim Nicholas Taleb, Antifragile: Things That Gain from Disorder, https://www.goodreads.com/book/show/13530973-antifragile \u00b3\u2070\u2079The wording of this principle is still a work in progress, but it\u2019s based on Nassim Taleb\u2019s concept of \u201coption asymmetry.\u201d In a nutshell: it\u2019s not about how frequently we meet or exceed our expectations, but rather about how to limit the cost of each experiment and how much we gain when we are right, even if occasionally. We like to call this \u201cthe Venture principle\u201d because it is the same idea of venture capital for startup; most of it gets lost in ideas that will fail, but the few succeeding ones will pay off way more than what is lost."
    },
    {
        "word_count": 110,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2022 Consider using Test Doubles to isolate side effects on your tests (New habit)."
    },
    {
        "word_count": 110,
        "value": "A less-known usage for Approval Tests is the locking of code for refactoring. By locking of code, we mean the activity of adding tests around a piece of code to make refactoring possible. Using a code coverage tool in conjunction with this technique provides feedback on how much code has actually been exercised by our new tests. When we reach a satisfactory level of coverage, we can then move to the refactoring phase. Once our code is in better shape and the components are extracted and isolated, they should be easier to understand. We can then add tests for each one of them so we can remove the locking tests."
    },
    {
        "word_count": 109,
        "value": "Connascence of Algorithm occurs when two or more components must agree on using a particular algorithm. Perhaps the most popular example of this kind of Connascence is checksum for file verification; applying the algorithm remotely allows for a mathematical proof that the file has not been changed. Unfortunately, if we have this kind of Connascence in our code, the result is not useful. Let\u2019s see an example of a dumb checksum implementation that assumes we want to build it with a simple logic consisting of adding a character at the end of an integer so that the sum of the single numbers could be divided by 10. For instance:"
    },
    {
        "word_count": 108,
        "value": "If this is the only usage of the ReceiptSender class, we clearly have a leaking abstraction in its behavior. The Archive method is meant to always be called after the SendToCustomer. So why are both methods public, leaving incorrect usage to chance? Here, one method should be enough and the correct execution order hidden and enforced inside. However,sometimesthisformofConnascenceismeanttoexistbecauseofthenatureofourcontext. Think to the Builder pattern, for instance. The Builder pattern is essentially an elegant way to use CoEO by expressing the correct usage by convention; we first have to somehow set up the builder and, after that\u2019s done, call the Build() method. Let\u2019s look at this little car builder example:"
    },
    {
        "word_count": 107,
        "value": "An object implemented in such a way that it has to navigate a tree of objects for completing its task is likely to be fragile because it has too many dependencies and crosses several abstraction layers. One evident symptom of this problem is the considerable complexity needed in the arrange phase, which often comports a dramatic degradation of readability. It is usually identifiable by the need to set up a network of nested Mock/Stub Objects. In such a context, there is a high probability we can improve the design of the codebase looking for code smells like Feature Envy, Inappropriate Intimacy, Message Chain and act accordingly. Usually"
    },
    {
        "word_count": 107,
        "value": "Once the bounded contexts are correctly defined and implemented, there is still one important aspect to consider for a complete and effective information system. The ability to make changes is meaninglessifitdoesn\u2019tincludetheabilitytosmoothlydeploytheminproduction,becausethevalue is delivered only when it is available to the end user. Furthermore, the systems must be monitored so that actions can be taken quickly when something doesn\u2019t work as expected. Finally, it must be possible to easily experiment in safe environments in order to find the best technical solutions based onempiricaldatagatheredbyexperience.ThesearetheideasunderlyingDevOpsasdescribedinThe Phoenix Project by Gene Kim, Kevin Behr and George Spafford, revisited in The DevOps Handbook by Gene Kim, Jez Humble, Patrick Debois and John Willis."
    },
    {
        "word_count": 106,
        "value": "There are many people that helped me improve, grow and keep up in hard times. My friend and mentor Pedro Moreira dos Santos, my apprentice Halima Koundi, my friends: Mike J. Sullivan you\u2019ll go far, a software designer talent Marco Consolaro, friends and real rock star developers Frode Hus, Jarle Nig\u00e5rd, Anders \u00d8sthus, Jith Ponrasa, Lorenzo Tandin and Andrea Germani, my reality check Ed Pollit, Steve Lydford I\u2019ll never forget our long talks coaching each other, the two master craftsmen SandroMancusoandMashooqBadar,my\u201cbrothers\u201dStefanoNava,LucaRecalcati,AntonelloItaliano, Giorgio Banfi, Riccardo Oriani and \u201csisters\u201d Sara Leva, Alessandra Dell\u2019Orco, Marzia Palladino and all the amazing people I had the pleasure to meet at Codurance."
    },
    {
        "word_count": 105,
        "value": "\u2022 BA: \u201cNo one ever explained the backlog to me, and I\u2019ve only been here a few months, so I can\u2019t say I really know the business. Are you really sure I can be of help? Maybe others more seasoned in the business will know more stuff!\u201d \u2022 Me: \u201cI have the impression that no one here really understands the business. I feel that there are two kinds of people: those who pretend to know and those who express doubts. We prefer people of the second kind. We will dig into the business knowledge together as a team until we gain the understanding we need.\u201d"
    },
    {
        "word_count": 104,
        "value": "The supplier has an agreed lead time in which to process the order before delivering it to the company\u2019s Delivery Office. Once the Delivery Office has received all products in an order, it is dispatched to the customer. Suppliers start processing an order on the same day that the order is received. For example, a supplier with a lead time of one day, receiving an order today before midnight will send it to the Delivery Office tomorrow. Once all products for an order have arrived at the Delivery Office from the suppliers, they usually will be dispatched to the customer on the same day."
    },
    {
        "word_count": 103,
        "value": "A similar problem arises when a test has to pass too many Mock/Stub Objects to the Subject Under Test, even if they are all immediate neighbors. Even if it doesn\u2019t break the Law of Demeter, this situation is more often than not the manifestation of Long Parameter List, Large Class or Long Method code smells. Again, the test is likely to have a long arrange phase with consequent bad readability. And again, the solution might be to act on misaligned responsibilities, to introduce an intermediate class or to break the object up into smaller entities, depending on which code smell has been identified."
    },
    {
        "word_count": 102,
        "value": "\u2022 Spend less time debugging code to prove that it works. Tests will show that your code works correctly and implements the expected behavior. \u2022 Reduce the fear of changing code. Tests act as a safety net. Would you walk on a rope several hundred feet high? What if you had a safety net? TDD is your safety net. \u2022 Use tests as living documentation. Well-crafted tests describe the behavior in your code, and above all, serve as up-to-date documentation. \u2022 Use tests as a feedback loop for design decisions. If tests are difficult to write, your design can probably be improved."
    },
    {
        "word_count": 102,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2075\u00b3Wikipedia, \u201cConway\u2019s Game of Life,\u201d https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"
    },
    {
        "word_count": 102,
        "value": "\u00b9\u2077\u2077John J. Johnson IV, et al., \u201cA Theory of Emergence and Entropy in Systems of Systems,\u201d https://www.sciencedirect.com/science/article/ pii/S1877050913010740 \u00b9\u2077\u2078Erwin Schrodinger in 1944 wrote a controversial book titledWhat is Life? where he said that if we look at living systems from the point of view of entropy, they do not maximize it. They appear instead to increase internal organization, hence minimizing entropy, using the external environment as the source of energy. We think minimization of entropy is key for success of any kind of System.https://en.wikipedia.org/wiki/ What_Is_Life%3F, http://www.whatislife.ie/downloads/What-is-Life.pdf \u00b9\u2077\u2079From a pure probabilistic way, we can understand why writing good software it is so difficult!"
    },
    {
        "word_count": 102,
        "value": "End to end tests Focused on business requirements. Exercise the complete flow, including external systems. Usually these tests are slow to execute. Acceptance tests Focused on business requirements. Exercise all parts of the flow in our system. Compromise on feedback and speed of execution. Faster than end to end tests, but not as thorough. Integration tests Focused on technical implementation. Exercise parts of our system that connect with external systems. Can be slow to execute, depending on external system and the integration with it. Unit tests Focused on atomic behaviors. Exercise parts of the flow in our system. Very fast to execute."
    },
    {
        "word_count": 102,
        "value": "We didn\u2019t have any written requirements, business analysts, architects, product owners or project managers. At that time, the word \u201cagile\u201d wasn\u2019t being hyped as it is today and was still limited to physical activities. But without being aware of the significance, the team was already valuing the individual and interactions over processes and tools, working software over documentation. In fact, Jos\u00e9 and I never wrote any official requirements, because Jos\u00e9 was my requirements. We continuously refined the product and tested it in the field until he was happy with the outcome; documentedrequirementswouldhavebeenstaleafterdays.Furthermore,Iwastheonlyoneactually coding, so spending time on writing requirements wasn\u2019t an option."
    },
    {
        "word_count": 101,
        "value": "Class Cohesion Ideal A class has an ideal Cohesion when it doesn\u2019t show any other types of mixed Cohesion. Mixed-Role Theclasshasoneormorefieldsthatrelateobjectsoftheclasstootherobjectsonthesameabstraction layer, but the fields have nothing to do with the underlying semantics of the class. Mixed-Domain The class has one or more fields that relate objects of the class to other objects on a different abstraction layer. Henc,e the fields are completely unrelated with the underlying semantics of the class. Mixed-Instance The class represents two different types of objects and should be split in two separate modules. Typically, different instances use only subsets of fields and methods of the class."
    },
    {
        "word_count": 101,
        "value": "What if instead of primitive fields, we have another object? That\u2019s the good news! In a System of independent Systems (we can think here to independency related to testability; if I can test an object inisolation,itisindependentfromthestateofotherpartsoftheSystem),theoverallEntropyisgiven by the SUM of the entropy of the single systems. This means that we can transform a combinatorial growth into a linear one by embedding some parts in a new subsystem with its logic and collaborate at a system level instead of at a basic part level. In our development process, this means refactoring to a better abstraction that follows the principles expressed so far."
    },
    {
        "word_count": 100,
        "value": "\u201cClosed with respect to X\u201d means that clients are not affected if X changes. Martin Fowler states, \u201cPublished Interface is a term I used [\u2026 ] to refer to a class interface that\u2019s used outside the code base that it\u2019s defined in. The distinction between published and public is actually more important than that between public and private. The reason is that with a non-published interface you can change it and update the calling code since it is all within a single code base. [\u2026 ] But anything published so you can\u2019t reach the calling code needs more complicated treatment.\u201d\u00b9\u00b3\u2070"
    },
    {
        "word_count": 98,
        "value": "We have Connascence of Identity when one or more components must reference exactly one particular instance of another entity to work correctly. This is the strongest form of Connascence in code and it is usually not easy to spot. The code apparently looks fine, but gives errors under certain conditions. The dependency in this case is within the creational context of a particular entity. Given the distributed nature of modern systems, it is almost never a good idea to rely on a particular instance of any object. Let\u2019s see a simple example (and let\u2019s forget about thread safety):"
    },
    {
        "word_count": 98,
        "value": "From the point of view of Ackoff, to increase our understanding, we need to make an effort and push our intellectual boundaries well beyond our small development team and even the broader IT department. We should never forget that software development teams aren\u2019t working for their own goals; they work to be of service to the business. Their goal is to build an information system that supportsandenablestheachievementofbusinessgoalsinamoreeffectiveway.So,thelargersystem we should really comprehend is the whole business. That is what makes the real difference in terms of effectiveness, not only for software development but for anyone working for the organization."
    },
    {
        "word_count": 97,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2076\u2075https://github.com/unclejamal/parallel-change"
    },
    {
        "word_count": 97,
        "value": "We started our journey on object-oriented software design by discussing object calisthenics. These are a very powerful set of rules that, if applied correctly, can have an enormous effect on design. Following rules has advantages and disadvantages. The main advantage is an immediate effect as soon as you start applying them. The biggest disadvantage is that they usually don\u2019t provide a clear reason on why they work. In this chapter, by looking at code smells, we delve into the first level of why object calisthenics rules work. (In subsequent chapters, we will dig deeper into these \u201cwhys.\u201d)"
    },
    {
        "word_count": 97,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2077\u2078https://github.com/AgileTechPraxis/CodeSmells"
    },
    {
        "word_count": 97,
        "value": "In this case, we are just specifying the acceptance test without showing the implementation for the sake of space. In the implementation below, we use the acceptance test to guide us on what unit tests to write. Aftertheacceptancetest,wemovetotheinnerunittestloop.Startingfromtheoutside,wefirstwrite a test for the shopping cart controller. We start by identifying the controller collaborator, in this case the shopping cart. Once we have an idea of the collaborator, we create a mock for it and decide how the controller should collaborate with the shopping cart. Using the mock for the shopping cart, we write an assertion on the collaboration."
    },
    {
        "word_count": 96,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate. \u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests."
    },
    {
        "word_count": 96,
        "value": "While sometimes this is unavoidable, I always try to minimize Connascence, and I tried to remove it. So I decided to make the new service slightly different, smart enough to self-configure at startup and removing the connascent step of the configuration line. The result was great when testing it in local, but when the code was promoted to the integration environment, I discovered that it didn\u2019t work there for some reason I couldn\u2019t grasp. I was relatively new to the team, so after a quick investigation, I asked for help from a more seasoned team member."
    },
    {
        "word_count": 94,
        "value": "Furthermore, using this way of development fits incredibly well with the most popular IDE frameworks. Sketching the Outside-In methods allows us to use quick shortcuts for almost every operation involving interface creation, class creation and method creation. It makes development mainly a matter of naming things and using the autocomplete functionality of the IDE, leveraging its full potential, letting it do all the heavy work, without typos. We highly suggest you try out this way of developing; we still haven\u2019t met anyone yet who, once they\u2019ve learned it, went back to their previous way."
    },
    {
        "word_count": 94,
        "value": "If we correctly separate UI concerns and business concerns, for example, using the application layer for acceptance of business use cases is very effective, both in terms of speed and functional proof. We can then segregate UI tests to their own suite, providing better granularity. After all, having a problem with the UI displaying some data wrong is quite different than having the wrong data in the database because of a mistake in domain model functionality. Again, having a well-designed system gives us a lot of options to chose from for our test strategy."
    },
    {
        "word_count": 94,
        "value": "Such a partial view of the system only encourages a greater degree of specialization because within the department, there is an unconscious bias to consider the department\u2019s needs as more important than the business as a whole. This situation is very risky because \u201cSystems tend to create goals of their own,\u201d as John Gall explained.\u00b2\u2074\u2077 If the independent goals of the department are misaligned or in conflict with the main system\u2019s overall goal, the result is a huge amount of wasted resources that in some case can threaten the life of the organization itself."
    },
    {
        "word_count": 94,
        "value": "\u2022 Big Picture EventStorming\u2014The method used to kick-off a project, with every stakeholder involved. \u2022 Design-Level EventStorming\u2014Digs into possible implementation, often DDD-CQRS/ES7 style. \u2022 Value-Driven EventStorming\u2014A quick way to get into value-stream mapping, using story- telling like a possible platform. \u2022 UX-Driven EventStorming\u2014Similar to the one above, focusing on the User/Customer Journey in the quest for usability and flawless execution. \u2022 EventStorming as a Retrospective\u2014Using domain events to baseline a flow and expand the scope in order to look for improvement opportunities. \u2022 EventStorming as a Learning Tool\u2014Perfect to maximize learning for new hires."
    },
    {
        "word_count": 93,
        "value": "A powerful alternative to the synchronous approach is asynchronous communication using a publish/subscribemessagingsystem.Inthisscenario,thecallingservicesimplypublishesitsmessage about a domain event occurring and continues with other work (unrelated to this request). It is not blocking and waiting for a response after it sends a request, and this improves scalability. Problems in another service do not break this service, and when other services are temporarily broken, the calling service might not be able to complete a process completely, but the calling service is not broken itself. Thus, using asynchronous messaging, the services are more decoupled, preserving more autonomy."
    },
    {
        "word_count": 93,
        "value": "We add more failing tests, but the last transformation is sufficient to make all new tests pass. We cannot think of any more failing tests, and this implies we are done. We refactor the code to make it more readable, and we are done. We decided to refactor the outer while loop to a foreach loop since it simplifies the code. This is an example where you can start changing the table to better fit the language you work with. In this case, you replace the while loop transformation with a foreach transformation."
    },
    {
        "word_count": 92,
        "value": "A type hierarchy is composed of subtypes and super types. The intuitive idea of a subtype is one whose objects provide all the behavior of objects of another type (the super type) plus something extra. What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2, then S is a subtype of T.\u201d"
    },
    {
        "word_count": 92,
        "value": "This quote of William Edwards (Bill) Deming reveals a great truth: software development is a team activity. Success and failure is team success or failure. According to him, if the working dynamics of teams aren\u2019t good, the relevance of the technical abilities of single developers account for just 5% of team\u2019s overall performance. That\u2019s the reason why David J. Anderson in his masterpiece Kanban book says that \u201ca team with just a spread of talent can produce world-class results with the right process, good discipline and leadership\u201d,\u00b2\u00b2\u2078 hence within a good System."
    },
    {
        "word_count": 92,
        "value": "\u201cSeeing solitary facts in relation to a general principle is the essence of understanding. What is an understanding then? An understanding is a generalized meaning or insight. An insight is a basic sense of, or feeling for, relationships; it is a meaning or discernment. A tested generalized insight is an understanding; it is a meaning or discernment that one may profitably apply to several or even many similar, but not necessarily identical, situations or processes. The most valuable insights are those confirmed by enough similar cases to be generalized into an understanding.\u201d\u00b2\u00b3\u00b9"
    },
    {
        "word_count": 92,
        "value": "\u2022 The command is executed as the consequence of an event, and who raises the event might not even be aware of the command happening. If the command needs more data to execute, it can leverage the synchronous communication and query the read model via API to complete the informationnecessary.Thisisveryimportantbecauseitkeepsthedependenciestothemessage itself to a minimum, which ina publish/subscribe system mightbe a one-to-many relationship. In this way, we move the dependency to the read models, which are much easier to change and expand and can have a greater granularity, breaking down the one-to-many relationship."
    },
    {
        "word_count": 92,
        "value": "While he was setting up the walking skeleton and finding the best way to seamlessly integrate our new REST API with the legacy system that we were constrained to talk to for authentication and login purposes, I took the job of taking care of the requirements with the goal of building a proper acceptance test automation suite. That involved also coaching a BA and tester \u2013 the most delicate part of the job, in my point of view. I had already committed on it with them, and I couldn\u2019t let them down."
    },
    {
        "word_count": 91,
        "value": "1. Does the system have clear inputs and outputs? Examples are console, file system, network, etc. 2. Does the system generate the same output for the same input? If not, can we use a Test Double to make it so? Isolate the side effects. 3. Can we capture the output of the system on our tests without changing the behavior of the system? The options are to either redirect the output to a file or replace the data layer with an in-memory data layer. 4. Canweinjecttheinputofthesystemonourtestswithoutchangingthebehaviorofthesystem? Same options as point 3."
    },
    {
        "word_count": 91,
        "value": "The idea behind poka-yoke is that no defect found should be passed on downstream. \u201cDownstream\u201d applies not only to the consumer, but also to anybody in the organization. In a Toyota assembly line, the entire line is stopped rather than passing a detected problem to the next person in line. This is very different in comparison to most Western car manufacturers, where a special group often exists at the end of the line to fix all the problems, and detected defects are simply handed down since they are somebody else\u2019s responsibility."
    },
    {
        "word_count": 91,
        "value": "\u201cBehavior-driven development (BDD) takes the position that you can turn an idea for a requirement into implemented, tested, production-ready code simply and effectively, as long as the requirement is specific enough that everyone knows what\u2019s going on. To do this, we need a way to describe the requirement such that everyone \u2013 the business folks, the analyst, the developer and the tester \u2013 have acommonunderstandingofthescopeofthework.Fromthistheycanagreeonacommondefinition of \u2018done,\u2019 and we escape the dual gumption traps of \u2018that\u2019s not what I asked for\u2019 or \u2018I forgot to tell you about this other thing\u2019.\u00b2\u00b9\u00b9"
    },
    {
        "word_count": 91,
        "value": "First, we identified our personas, because that was one of the most blurred concepts in our minds. That gave a new perspective to things and many \u201caha,\u201d \u201cI see,\u201d and \u201cthat\u2019s why\u201d moments followed up quickly. The discussions were very interesting, and it was great when at a certain point the conversation was hijacked from our facilitation and carried on independently by stakeholders and various business actors themselves. Everybody got excited about knowing more of how others worked and why they did things that way. What an amazing collective learning experience!"
    },
    {
        "word_count": 90,
        "value": "Refactoring for me used to mean something like, \u201cLet me bring the bulldozer and fix all this code.\u201d I remember spending nights breaking everything apart, changing the design, and then bringing it all together again. In this process, I would easily have hundreds of tests failing while I was changing the design. This was what I called refactoring. Then one day I read a tweet saying something like, \u201cRefactoring is about changing the design without changing the behavior, and it can only happen if tests are passing all the time.\u201d"
    },
    {
        "word_count": 90,
        "value": "W e have now sketched the MicrowaveOven public interface. We put ourselves in the shoes of the user first and started the implementation from the OUTSIDE. The main goal of this approach is making sure that the public interface is intuitive to use, immediately understandable for whoever will use it in the future. Next, we can step inside its own level of abstraction by implementing the Cook method. Insidethatmethod,wenowrealizethatweneedtodojustonething;switchthemicrowavegenerator on for the amount of minutes stated in the method. So, we need a collaborator, and here we have two choices:"
    },
    {
        "word_count": 90,
        "value": "This is the great power of Domain-Driven Design as a development philosophy, defined by Eric EvansinhisepicworkDomain-DrivenDesign:TacklingComplexityintheHeartofSoftware.Itsgoal is enabling teams to effectively manage the construction of software for complex problem domains via collaboration with domain experts in order to build a shared understanding of the business context that the software should support, automate and, ultimately, improve. We should always remember that any automation has the philosophical reason to save time on the execution of a task, so that people can use that time for activities of higher purpose or intellectual requirements."
    },
    {
        "word_count": 90,
        "value": "Businesses, from this point of view, can be seen as Sociotechnical Systems, where the dynamics of Deterministic Systems (the software that we write) meet those of Complex Systems (the human beings interacting with the software and among each other), generating environments that display very defined properties that often are not understood. Deming has said that \u201cNo amount of care or skill in workmanship can overcome fundamental faults of the system\u201d\u00b2\u2076\u2070. We can change this to state, \u201cNo amount of Agile technical practices can overcome the fundamental faults of the system.\u201d"
    },
    {
        "word_count": 89,
        "value": "\u2022 Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman, Dave Hoover, Ade- wale Oshineye\u2079 \u2022 The Clean Coder: A Code of Conduct for Professional Programmers, Robert C. Martin\u00b9\u2070 \u2022 Extreme Programming Explained: Embrace Change, Kent Beck\u00b9\u00b9 \u2022 The Passionate Programmer: Creating a Remarkable Career in Software Development, Chad Fowler\u00b9\u00b2 \u2022 The Pragmatic Programmer: From Journeyman to Master, Andy Hunt and David Thomas\u00b9\u00b3 \u2022 Pragmatic Thinking and Learning: Refactor Your Wetware, Andy Hunt\u00b9\u2074 \u2022 The Software Craftsman: Professionalism, Pragmatism, Pride, Sandro Mancuso\u00b9\u2075 \u2022 Software Craftsmanship: The New Imperative, Pete McBreen\u00b9\u2076"
    },
    {
        "word_count": 89,
        "value": "Like most developers starting TDD, I encountered a common blocker: coming up with good test names. With experience and a little help from other programmers, I learned to not reach for the test name too soon. I give the test a temporary name; foo is a fine name. Then I concentrate on what the assertion should look like for the behavior I\u2019m testing. Once I get the assertion right, I need to think how I get there. Once I have all this, naming the test becomes so much easier."
    },
    {
        "word_count": 89,
        "value": "After digesting the message on that tweet, I started to practice refactoring that way. I tried to use it on projects, but it led to frustration as I was too inexperienced to use it in \u201creal\u201d code. With time and more practice I finally got to a point where I could do it. I could change the design while my tests were all passing, thus assuring me I had not changed the behavior of the code I was refactoring. It takes patience and perseverance, but anybody can do it."
    },
    {
        "word_count": 89,
        "value": "Connascence of Execution Order happens when the caller of a component must have some unexpressed knowledge about the correct order of the methods to be called. It is quite common in imperative languages and in the weakest of the dynamic forms of Connescence. Nevertheless, it can become a source of deep pain in the maintenance phase because often it\u2019s quite difficult and time consuming to figure it out by just reading the code. Let\u2019s see a short example of a class that is supposed to send and archive receipts."
    },
    {
        "word_count": 89,
        "value": "The outermost object represents the whole program (often called \u201cMain\u201d\u2026 coincidence?), which is the whole System. It is the interface with the external world, and it holds inside other objects exchanging information and working in collaboration for achieving a common goal. These objects are themselves Systems. So the difference between a primitive and an object is that the former is seen as a mere part or component, while the latter is viewed as a proper System. Hence, from a general point of view, our programs are Systems of Systems."
    },
    {
        "word_count": 89,
        "value": "PopcornFlow is a principle-based, Antifragile philosophy,\u00b3\u2070\u2078 and these are its guiding principles: \u2022 If change is hard, make it continuous (The Virus Principle) \u2022 It\u2019s not only what you do but also what you learn by doing it that matters (The Ladder Principle) \u2022 Everybody is entitled to their own opinion, but a shared opinion is a fact (The Freedom Principle) \u2022 It\u2019s not \u201cfail fast, fail often\u201d, it\u2019s \u201clearn fast, learn often\u201d (The Skateboarder Principle) \u2022 Small bets, big win. (We like to call this The Venture Principle)\u00b3\u2070\u2079"
    },
    {
        "word_count": 88,
        "value": "\u2022 1 point for every change made to the code using a shortcut or automated IDE feature (e.g., automated refactoring, code template, or Find/Replace). \u2022 2 points for every manual edit. Note that a single \u201cedit\u201d could cover multiple lines of code. \u2022 Double points for every change made while the code cannot pass the tests after the previous change. \u2022 Zero points for code formatting (e.g., deleting whitespace or optimizing imports). \u2022 Allow yourselves a maximum of two attempts at each round to determine your best score."
    },
    {
        "word_count": 88,
        "value": "\u2022 When the method Process is called then the InstrumentProcessor gets the next task from the task dispatcher and executes it on the instrument. \u2022 When the Execute method of the instrument throws an exception then this exception is passed on to the caller of the Process method. \u2022 When the instrument fires the finished event then the InstrumentProcessor calls the task dispatcher\u2019s FinishedTask method with the correct task. \u2022 When the instrument fires the Error event then the InstrumentProcessor writes the string \u201cError occurred\u201d to the console."
    },
    {
        "word_count": 88,
        "value": "\u2022 The method is probably doing too much. \u2022 The class is probably doing too much. \u2022 A class knows too much about non-immediate neighbors. \u2022 Class just delegates behavior and has no behavior or state. \u2022 The class hierarchy is probably wrong. \u2022 Class misses state or behavior. \u2022 Behavior that should be in a type is scattered. \u2022 Data and behavior in separate places. \u2022 Duplication instead of encapsulation. \u2022 If statements are duplicated. \u2022 Field is not really part of the state of a class."
    },
    {
        "word_count": 88,
        "value": "\u2022 Naturally fits with a business-first view, using business functionality to drive the internal growth of the system. \u2022 Naturally addresses YAGNI\u00b9\u2079\u2070 since nothing would be developed if not explicitly required by the business. \u2022 Naturally minimizes entropy because its focus is on the public interface that leads to the simplest way to communicate with the outside world, hiding the complexity of the internals. \u2022 Naturally encourages expressivity, readability, clean code and simple design because the focus of public interfaces gives an immediate feedback on design and readability."
    },
    {
        "word_count": 88,
        "value": "What would be relevant for the next step of the value chain? To move forward in the next activity and place the item on the market, it\u2019s necessary that all these subtasks have been completed and the item has all the information needed to be ready for the next step. So, what this means is that the required value has been added. At this point, the bounded context needs to notify the other contexts about this event, which might be relevant for them and raise a domain event."
    },
    {
        "word_count": 87,
        "value": "do we need to change? What if we pass an exchange rate instead of the money value to a method? If we had a type for it the code wouldn\u2019t even compile making wrong state unrepresentable! Another consequence of primitive obsession is the excessive need of validation. Again, if money is represented by a primitive type, what do we do with negative values? This code smell leads to the Shotgun Surgery code smell because behavior tends to be spread in many places, causing a cascade of changes."
    },
    {
        "word_count": 87,
        "value": "The term was introduced by Robert C. Martin. Martin described it as being based on the principle of Cohesion as described by Tom DeMarco in his book Structured Analysis and Systems Specification. Cohesion is a measure of the strength of association of the elements inside a module. A highly cohesive module is a collection of statements and data items that should be treated as a whole because they are so closely related. Any attempt to divide them up would only result in increased Coupling and decreased readability."
    },
    {
        "word_count": 87,
        "value": "Every single line of code we add to our system increases its overall entropy. If we allow it to grow without control, the maintainability and understandability of the system decreases very quickly. While we are developing a certain functionality, the concepts of Cohesion, Coupling and Connascence allow us to better understand the type and strength of the entropy we are adding. This is the reason refactoring is such an important task. We use the feedback from our principles to refactor a system from high to low entropy."
    },
    {
        "word_count": 87,
        "value": "\u2022 Eldon: \u201cBut we must pick one tester and one business analyst as well, that\u2019s considered mandatory in a business team here.\u201d \u2022 Me: \u201cLet\u2019s take someone who would be happy to learn something new and make the team enjoyable.\u201d \u2022 Eldon: \u201cDefinitely.\u201d \u2022 Me: \u201cI bet I can get them up to speed by writing the acceptance criteria directly in the code in a matter of weeks.\u201d \u2022 Eldon: \u201cI wanna see that! It won\u2019t be easy, but it would be a winning shot. Let\u2019s try!\u201d"
    },
    {
        "word_count": 86,
        "value": "There we go \u2013 Connascence of Position has been removed and replaced with the weaker Con- nascence of Type. Did you notice something else in this example related to code smells? CoP it is often related to the Primitive Obsession code smell. That\u2019s exactly what we clean up here; instead of using strings to express concepts of \u201crecipient\u201d, \u201csender\u201d and \u201cmessage,\u201d we have now more expressive constructs to represent them. Anotherwaytosolveasimilarcaseisbyusingacustomtypetoencapsulatetheinformationpassing intothismethod.ThissolutionhastheadvantageofreducingtheoverallmethodofCouplingaswell as confirming to the Method Coupling Premises mentioned in the Cohesion & Coupling chapter."
    },
    {
        "word_count": 86,
        "value": "In the diagram above, we tried to capture the flow of software growth using Outside-In TDD. As with classic TDD, we start by writing a test, but now we immediately try to sketch a collaborator and write the assertion around that collaboration. Once we have a passing test, we can either move inside and use the same strategy with the collaborator (that now becomes the new test subject) and find its collaborator(s), or we find other collaborators for the current component and use the same strategy."
    },
    {
        "word_count": 86,
        "value": "The model then gets enriched with the source of the events (user interactions triggering commands, external systems, temporal triggers or automatic ones as a consequence of other events), the read models helping user decisions, the policies describing the \u201caftermath\u201d of an event, under the form of other commands to be triggered. Then the discovery carries on, letting aggregates emerge as the centralentitiesresponsibleforexecutingsomeofthecommandsandraisingtherelevantevents.Any of these different elements of the model will have a different color to better identify the different concepts and highlight them on the timeline."
    },
    {
        "word_count": 85,
        "value": "Working with practices related to design and feedback empowers experimentation. Consider a design change: first you get feedback from the pair, then change the design and get feedback from the tests. Quick, continuous experimentation using feedback loops is how all kinds of systems can evolve and our programs make no exceptions. That\u2019s why you should aim to build a structure that gives quick feedback you can trust, so you can try new things without worries of breaking the existing ones. Remember: \u201cInertia is your enemy!\u201d\u00b3"
    },
    {
        "word_count": 85,
        "value": "\u2022 Divergent Change \u2013 One class is commonly changed in different ways for different reasons. OCP (Open/Closed Principle) and/or SRP violation. God class. Can be caused by Primitive Obsession and/or Feature Envy. \u2022 Shotgun Surgery \u2013 Opposite of Divergent Change. One change forces lots of little changes in different classes. DRY violation. Can be caused by Primitive Obsession, Feature Envy or \u201ccopy pasting driven development\u201d. \u2022 Parallel Inheritance Hierarchies \u2013 Special case of Shotgun Surgery. Creating a subclass of one class forces subclass of another."
    },
    {
        "word_count": 85,
        "value": "Object calisthenics is a set of rules that help us avoid some of the code smells. If we decide to break the rules, we have consequences that materialize as code smells. In design, following rules is not always the best path; sometimes we need to bend or break rules. This is fine as long as we are conscious about it, namely the consequences and the benefits. Software design should be a series of decisions. Our worst enemy is accidental complexity\u2077\u2077 due to unconscious design decisions."
    },
    {
        "word_count": 85,
        "value": "\u201c\u2018Poka-yoke\u2019isaJapanesetermthatmeans\u201cmistake-proofing\u201dor\u201cinadvertenterrorprevention.\u201dThe key word in the second translation, often omitted, is \u201cinadvertent.\u201d There is no poka-yoke solution that protects against an operator\u2019s sabotage, but sabotage is a rare behavior among people. A poka- yoke is any mechanism in any process that helps an equipment operator avoid (yokeru) mistakes (poka). Its purpose is to eliminate product defects by preventing, correcting, or drawing attention to human errors as they occur. The concept was formalized, and the term adopted, by Shigeo Shingo as part of the Toyota Production System.\u201d\u00b2\u2070\u00b3"
    },
    {
        "word_count": 85,
        "value": "There are several opinions about the correct boundaries for acceptance tests that can have a big impact in how fast they execute. While it is true that a proof of a working system is achievable only by running tests on the real infrastructure, we find that the cost for the slower tests\u2019 execution is too high for the value provided. It isn\u2019t uncommon to see developers avoid running the tests when they are too slow, which would provide feedback too late and make them ineffective."
    },
    {
        "word_count": 84,
        "value": "Allourtechnicalknowledgeisnotenoughifwearenotworkingwiththebusinesshelpingtoachieve its goals. The great professional must be able to understand the business and have the principles to make the right choices in terms of understanding and clarifying requirements and being a positive team member. That\u2019s why the last section of the book changes the focus from building the thing right to building the right thing. We touch on Outside-In development, Behavior-Driven Design principles, Domain-Driven Design, principles derived from Lean and System Thinking, and our take about working as a member of a team."
    },
    {
        "word_count": 84,
        "value": "1. A Driver (B Navigator). Writes a new test and sees that it fails for the right reason. 2. B Driver (A Navigator). Implements the code needed to pass the test. 3. B Driver (A Navigator). Writes the next test and sees that it fails for the right reason. 4. A Driver (B Navigator). Implements the code needed to pass the test. 5. A Driver (B Navigator). Writes the next test and sees that it fails for the right reason. 6. Rinse and repeat."
    },
    {
        "word_count": 84,
        "value": "We created a checklist to help you approach refactoring code. It includes rules, tips and a sequence we can follow. As always, once we get more proficient with our refactoring and design skills, we can leave this list behind us. \u2076\u2070The original idea of refactoring golf exercise has been hard to find; giving credit to one person alone is not possible. Different versions have been created by several people like Ivan Moore, Dave Cleal, Mike Hill, Jason Gorman, Robert Chatley and David Denton. \u2076\u00b9https://github.com/search?utf8=%E2%9C%93&q=refactoring+golf&type="
    },
    {
        "word_count": 84,
        "value": "IstillrememberwhenIjoinedthefirsthard-coreXPteam.Itwasstillexperimentalatthatcompany, and we didn\u2019t have the funds for tools in the beginning aside from an IDE refactoring helper. We couldn\u2019t introduce frameworks without a bureaucratic request, a troublesome authorization process lasting weeks. Nevertheless, our backlog needed to be delivered in time. That\u2019s where I had to learn to inject dependencies manually and to manually develop all Test Doubles. We called it \u201cpoor man dependency injection\u201d and \u201cpoor man mocking,\u201d underscoring the fact that we were forced to re- invent the wheel for budgetary reasons."
    },
    {
        "word_count": 84,
        "value": "Object calisthenics Code smell Only one level of indentation Long Method per method. Don\u2019t use the ELSE keyword. Long Method / Duplicated Code Wrap all primitives and strings. Primitive Obsession First class collections. Divergent Change One dot per line. Message Chains Don\u2019t abbreviate. NA Keep all entities small. Large Class / Long Method / Long Parameter List No classes with more than two Large Class instance variables No getters / setters / properties. NA All classes must have state Lazy Class / Middle Man"
    },
    {
        "word_count": 84,
        "value": "\u2022 It gravitates toward a more technical solution, and it\u2019s easier to lose the business focus. \u2022 It can sometimes be a bit inefficient when exploration is not in heavy demand. \u2022 It can lead to implementing behavior that is not required, especially if we start from the inside of the system toward the outside. There is a constant temptation to implement features that we think we will need on the outside of the system, thus not addressing the risk of YAGNI very well."
    },
    {
        "word_count": 84,
        "value": "From this point-of-view, synchronous dependencies between services imply that the calling service blocks the execution and waits for a response from the called service before continuing. Very similar to the concepts of Connascence of Execution Order and Connascence of Timing, this kind of dependency is verystrong,tightly couplingthe caller withthe called. Itdoes not scalevery well,and the calling service may be impacted by errors in the called service. In systems with high availability as one of the non-functional requirements, this kind of communication is not desired."
    },
    {
        "word_count": 84,
        "value": "The first thing we asked was obviously to start studying the backlog. We soon realized it was not worth it \u2013 it was completely indecipherable. We soon asked for help from BAs, but the more we talked to them, the more we realized they were parroting something that someone else said. Yes, that place was big. Loaded with people, procedures, middle men and constraints. We decided we had to dispose of the practices for normal duties and switch to the ones for systemic emergency."
    },
    {
        "word_count": 84,
        "value": "Think, for example, about the work of Alan Turing, Von Neumann, Claude Shannon and many others. If they didn\u2019t share their ideas at first (which became general knowledge after), our jobs would be something very different. But their ideas came after they studied other material with the knowledge and the ideas of the people who came before them. We could carry this concept back to prehistory. Sharing knowledge, understanding and ideas has been the real enabling point for the holistic progress of human civilization."
    },
    {
        "word_count": 83,
        "value": "\u2022 Driver-navigator \u2022 Ping-Pong/Popcorn \u2022 Chess clock \u2022 Pomodoro \u2022 Pair rotation \u00b2Anotherofthemaincausesisprobablybadrequirementsandbusinessdetachmentfromthedevelopment.Youmightthink,asadeveloper, you cannot do anything about it because it\u2019s out of your scope. We believe instead that developers should engage with the business and open the door of collaboration first. We have amazing topics like Behavior-Driven Development and Domain-Driven Design that can help. \u00b3Our friend, Claudio Perrone, says that \u201cinertia is your enemy.\u201d If you are looking for a quick experimentation framework, please check out Claudio\u2019s fantastic work on Popcorn Flow."
    },
    {
        "word_count": 83,
        "value": "\u2022 FeatureEnvy\u2013Aclassthatusesmethodsorpropertiesofanotherclassexcessively.\u201cAllclasses must have state\u201d object calisthenics rule violation. \u2022 Inappropriate Intimacy \u2013 A class that has dependencies on implementation details of another class. Special case of Feature Envy. \u2022 MessageChains\u2013Toomanydots: Dog.Body.Tail.Wag()Shouldbe: Dog.ExpressHappiness(). \u201cOne dot per line\u201d object calisthenics rule violation. \u2022 Middle Man \u2013 If a class is delegating all its work, cut out the middleman. Beware of classes that are wrappers over other classes or existing functionality. Special case of Lazy Class. \u201cAll classes must have state\u201d object calisthenics rule violation."
    },
    {
        "word_count": 83,
        "value": "\u2022 SwitchStatements\u2013Canleadtosameswitchstatementscatteredaboutaprogramindifferent places. Can lead to DRY violation. \u2022 Temporary Field \u2013 Class contains an instance variable set only in certain circumstances. Possible \u201cno classes with more than two instance variables\u201d object calisthenics rule violation. \u2022 Refused Bequest \u2013 Throw not implemented. Usually means the hierarchy is wrong. Liskov Substitution Principle (LSP) violation. \u2022 Alternative Classes with Different Interfaces \u2013 If two classes are similar on the inside, but different on the outside, perhaps they can be modified to share a common interface."
    },
    {
        "word_count": 83,
        "value": "1. Expand the previous test to assert that given the input (Golden Master input), we get the expected output (Golden Master) saved from the previous step. 2. Commit. Don\u2019t forget to include the Golden Master input and output files. 3. Experiment with small mutations on the production code to check that the test fails. Revert when done. If you\u2019re not pleased with the results, go back to the previous section and generate better input/output combinations, or write new tests with new input/output combinations."
    },
    {
        "word_count": 83,
        "value": "Locality is the closeness of the affected entities in respect to each other in terms of abstraction. The closer the better and more acceptable (leading to Cohesion). On the other end, Connascence of entities very far apart from each other is often an indication of design or architectural pitfalls. We should try to keep the connascent elements as close as possible. If you remember the Law of Demeter, it is meant to limit the distance of method calls, hence acting on the locality."
    },
    {
        "word_count": 83,
        "value": "This operation is a crucial design decision in itself, because what we are doing here is designing the public interface of the collaborator, deferring in time the context switch to its implementation. It\u2019s essentially a way to break down the problems into sub-tasks, solving it one abstraction layer at a time, instead of first going deep. This approach has an incredible advantage in keeping the mind focused on one sub-problem at a time, one responsibility at time, one abstraction level at a time."
    },
    {
        "word_count": 83,
        "value": "Given I bought 1000 shares of \u201cOld School Waterfall Software LTD\u201d on 14/02/1990 and I bought 400 shares of \u201cCrafter Masters Limited\u201d on 09/06/2016 and I bought 700 shares of \u201cXP Practitioners Incorporated\u201d on 10/12/2018 and I sold 500 shares of \u201cOld School Waterfall Software LTD\u201d on 11/12/2018 and the current share value of \u201cOld School Waterfall Software LTD\u201d is $5.75 and the current share value of \u201cCrafter Masters Limited\u201d is $17.25 and the current share value of \u201cXP Practitioners Incorporated\u201d is $25.55"
    },
    {
        "word_count": 83,
        "value": "\u2022 On top, with a direction that goes from left to right, is the flow of value. \u2022 At the top left are partnerships, activities and resources involved in the creation of the value. \u2022 At the top right are customer relationships, channels and customer segments, focusing on the delivery of the value. \u2022 On the bottom side is the flow of money that goes in the opposite direction: from the right with the revenue structure to the left with the cost structure."
    },
    {
        "word_count": 83,
        "value": "This template, in our opinion, is very useful because it shows in a very compact way the key components of any business, focusing on the most important aspect: the goal is providing value. It also shows that to create and deliver that value, the organization should be organized as a stream of activities: the cash flow is just a side effect of the effective alignment of these activities toward the goal. Hence, underlying every business there is what is called a \u201cvalue stream.\u201d"
    },
    {
        "word_count": 82,
        "value": "The main problem is that there are very few rules valid in any situation (the infamous silver bullet). Most rules are tightly bound to a context, and if the context changes, the rules might not be relevant anymore. Furthermore, the habit of following rules without questioning the context can lead in the long run to intellectual laziness. In this case, it seems easier to blindly follow some rules instead of working them out (based on principles and values) for the particular context."
    },
    {
        "word_count": 82,
        "value": "The Golden Master technique is very useful when a clear input and output is easy to obtain on the system level. There are some cases where the Golden Master technique can be applied only with difficulty or where it cannot be applied at all. For all the given situations, we need to consider if the system tests generated with the Golden Master are enough, or if we need to add other types of tests like unit tests, component tests, integration tests, etc."
    },
    {
        "word_count": 82,
        "value": "Between Between sending the message and reading it, we need to wait some arbitrary amount of time. If we don\u2019t wait, we will check for the message before it gets received, and our test cannot pass. Timing here is crucial. We can\u2019t escape this. But can we do something better? Well, if we remember that \u201ctime is money\u201d,\u00b9\u2075\u2070 we can. We can optimize it so that we do not always depend on an \u201carbitrary\u201d amount of it. Let\u2019s see an alternative snippet:"
    },
    {
        "word_count": 82,
        "value": "Impact mapping helps to reduce waste by preventing scope creep and over-engineered solutions. It provides focus for delivery by putting deliverables in the context of impacts they are supposed to achieve.Itenhancescollaborationbycreatingabig-pictureviewthatbusinesssponsorsanddelivery teams can use for better prioritization and as a reference for more meaningful progress monitoring and reporting. Finally, it helps to ensure that the right business outcomes are achieved, or that unrealistic projects are stopped before they cost too much, by clearly communicating underlying assumptions and allowing teams to test them.\u201d\u00b2\u2074\u00b9"
    },
    {
        "word_count": 82,
        "value": "With each bounded context having its own isolated access to low-level data storage, the biggest price to pay for this maintenance is not about data duplication because data storage is relatively cheap. The big price to pay is handling and designing the communication in order to achieve the optimal propagation of this data and enrich the value stream. There are a number of different ways to achieve this, but here there are also a few principles that can help in our decisions."
    },
    {
        "word_count": 82,
        "value": "TheconceptofPopcornFlowbyClaudioPerroneexploitsthesechangingpatterns,essentiallymaking the collective consciousness of the system aware of them through visualization. This consciousness empowers the folks working in the System with these changes so they can actively make conscious decisions about them through experimentation and learning. Coupled with an iterative way of feedback, this results in experiments that enable collective learning, triggering a chain reaction of initiatives and ideas because teams feel they own their destiny and can objectively view the consequences of their willingness to move in a specific direction."
    },
    {
        "word_count": 81,
        "value": "Martin Fowler, in his excellent and groundbreaking book, Refactoring: Improving the Design of Existing Code, creates a categorization and terminology for many refactors. We will not dive too much into this since it\u2019s covered in his book. Terminology is often disregarded, but it plays an important role in communicating effectively. In the following table, we list the most common refactors we can use to remove particular code smells. The refactors on this table are also taken from Fowler\u2019s book. \u2077\u2077Quora, https://www.quora.com/What-are-essential-and-accidental-complexity"
    },
    {
        "word_count": 81,
        "value": "\u00b9\u00b9\u2070Head First Design Patterns: A Brain Friendly Guide, Eric Freeman, et al. \u00b9\u00b9\u00b9Not everybody knows that at OOPSLA 1999, the Gang of Four were (with their full cooperation) subjected to a \u201cmock trial\u201d (Chief Prosecutor was apparently Kent Beck). At the end, they were \u201ccharged\u201d with numerous crimes against computer science, including misleading the world on what patterns were all about and deluding others into thinking they could write code like experts just because they could mention a few of them."
    },
    {
        "word_count": 81,
        "value": "In In this way, we have just broken the ISP, which is the reason why we now have a Refused Bequest code smell. Since the two refill methods are mutually exclusive in their usage, we now have an interface that is always unfit to represent a real category of car. One of the two would always have to be implemented by a throw new NotImplementedException();. Not nice at all. How should we approach this problem instead? Well, by segregating the interfaces!"
    },
    {
        "word_count": 81,
        "value": "The best way to eliminate any doubt and double-check the understanding of a scenario is by using examples. Examples are ideal because they use data, transcending language and concepts deriving from it. They are a simple way to achieve a repeatable and predictable proof of correctness and can be easily inserted into an automation suite of tests that guarantee the software solution really does what the business wants. This kind of functional correctness is essential for eradicating Category 3 bugs(therequirementswerecorrect,butmisunderstoodbythedevelopersothecodedoessomething else)."
    },
    {
        "word_count": 79,
        "value": "The content we present is structured like a journey. As with every journey into a new environment, the beginning is slow and safe, but it is crucial for setting the stage for what comes next. The adventure then gains momentum as confidence grows, learning new subjects that introduce new techniques and principles to advance more steadily. Finally, in the final chapters, we show how the learned principles can be applied in several contexts, converging to allow the best solutions."
    },
    {
        "word_count": 79,
        "value": "WhenIstartedmycareer,Ispentmostofmylearningeffortsgoingafterspecifictechnologies,trying to understand them in as much depth as I could. As years went by, I started realizing that this was a fruitless path in the long run. Technologies are constantly being hyped and doomed. Part of the game for me used to be guessing what would be the next thing. Sometimes I got it right, sometimes not. Eventually I stopped chasing specific technologies and started learning more about things that have been relevant and fundamental for many years."
    },
    {
        "word_count": 79,
        "value": "In this context, the expressivity of the four elements of simple design have a key role. If it is not possible to sit with an analyst or a product owner in front of the acceptance criteria to have the discussion mentioned earlier, we have a clear red alarm signal. It means that the \u201cglue\u201d with the business is not working properly, and the risk is very high that we\u2019ll end up with acceptance tests that are ineffective and/or useless."
    },
    {
        "word_count": 78,
        "value": "When using Mock/Stub Objects, it is important to find the balance between the specification of the Subject Under Test behavior and a flexible test that allows easy evolution of the codebase. One of the risks with TDD is in tests becoming \u201cfragile\u201d \u2013 that is, they fail for unrelated changes to the application code. Usually that happens when they have been overspecified to check features that are implementation details, not the expression of some requirement in the object."
    },
    {
        "word_count": 78,
        "value": "Do you see the big problem there? The locality of this Connascence was so far away that even the older member of the team couldn\u2019t remember it. We had to open the build scripts to realize there was another manual extra step to do before it could work! Add enough hidden steps like these and teams will spend more time trying to make things work, fidgeting with scripts and configuration than actually focusing on writing clean, well-designed code."
    },
    {
        "word_count": 78,
        "value": "We highly suggest this approach when you are beginning development from scratch. Since we can\u2019t really get feedback before the pipeline is complete and, especially in distributed systems, integration points are one of the main sources of pain (misconfigurations, access keys, availability of network, etc.), building the thinnest end-to-end slice of the system is very valuable, because it forces us to face the difficult infrastructural problem first while we still have time and the codebase is almost empty."
    },
    {
        "word_count": 78,
        "value": "While the exercise of creating and updating a canvas is extremely useful for executives in order to keep activities and business goals aligned, the outcome of the exercise is also very effective for explaining the organization to newcomers in seeing the big picture. The information presented is a great starting point for asking meaningful questions of the domain experts and participating in the evolution of the business with a deeper insight about the vision of its leading team."
    },
    {
        "word_count": 78,
        "value": "\u201cThe Second Way enables the fast and constant flow of feedback from right-to-left at all stages of our value stream. It requires that we amplify feedback to prevent problems from happening again, or enable faster detection and recovery. By doing this, we create quality at the source and generate or embed knowledge where it is needed \u2013 this allows us to create ever-safer systems of work where problems are found and fixed long before a catastrophic failure occurs.\u201d\u00b2\u2075\u2077"
    },
    {
        "word_count": 78,
        "value": "\u00b3\u00b9\u00b2All quotes in this appendix are from Alberto Brandolini\u2019s book. Alberto Brandolini is an entrepreneur, consultant, developer, teacher, public speaker and author. He has been coding since 1982 and his skillset encompasses such topics such as Agile, Domain-Driven Design, Lean, Complexity, Management 3.0 and \u201ceverything needed in order to solve the problem.\u201d He is the CEO and Founder of Avanscoperta https: //www.avanscoperta.it/en/ , he writes a blog http://ziobrando.blogspot.com/, and he is a very active public speaker https://www.slideshare. net/ziobrando."
    },
    {
        "word_count": 77,
        "value": "Make sure the test is failing for the right reason. An unexpected fail is not a valid fail (Examples: Unexpected exception thrown, missing library, missing import). Missing implementation can actually be a valid fail scenario. If we start by writing our test, we will not have any implementation ofthesubjectwearetesting,thusthecompilershoulderror.Createenoughproductioncodetoallow our code to compile, and then recheck that the test is failing for the right reason (that is, the test assertion is not valid for the time being)."
    },
    {
        "word_count": 77,
        "value": "If an object has no collaborations with other objects in the system, it does not need to be tested using Mock/Stub Objects. A test for such an object only needs to make assertions about its state through values returned from its methods. Typically, these objects store data, perform calculations or represent atomic values. While this may seem an obvious thing to say, we have seen a lot of usage of Test Doubles where they aren\u2019t actually needed."
    },
    {
        "word_count": 77,
        "value": "1. Use a piece of code in a test harness. 2. Write an assertion that you know will fail. 3. Run the test and let the failure tell you what the actual behavior is. 4. Change the test so that it expects the behavior that the code actually produces. 5. Repeat until you are reasonably sure all the degrees of freedom are identified and tested. 6. Name the test according to the business behavior you are characterizing."
    },
    {
        "word_count": 77,
        "value": "Once we havea failing acceptance test, we moveto the inner loop and stay on it until the acceptance test becomes green. The inner loop corresponds to the TDD unit test loop that we covered in the previous chapters. As our design evolves, we may have to revisit the initial high-level design decisions we made in the acceptance test. This is absolutely fine. We still want to make most design decisions in the inner or unit test loop."
    },
    {
        "word_count": 77,
        "value": "The downside of the asynchronous messaging solution is that it increases the infrastructural complexityofthesystembecauseitrequiresmechanismstosendandhandlemessages.Furthermore, thedesignoftheflowofdomaineventsbecomesessential whenthispattern is usedheavily,andthis can move complexity into an area that is very difficult to monitor, opening the door for unwanted risks. We have seen scenarios where systems have been coupled to the internals of the messages so heavily that it was basically impossible to make a change to a bounded context without breaking another one. Remember, with great power comes great responsibility."
    },
    {
        "word_count": 76,
        "value": "\u2022 When you can apply the new great habits. \u2022 When you can write the assertion first and work backward on the test. \u2022 When you are able to give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 When you are able to write any code that makes you get to the refactor phase more quickly. \u2022 When you make effective use of the Rule of Three to tackle duplication, including test code."
    },
    {
        "word_count": 76,
        "value": "Restart the Roman numerals kata, but this time apply all great habits we have looked at so far, plus TPP. Try to evolve your code using only the TPP table. Don\u2019t think about how to implement a test. Just keep moving down the TPP table. If you do this, the problem should solve itself. If you find yourself jumping steps, pause and consider if there is a simpler way to move forward with a simpler transformation."
    },
    {
        "word_count": 76,
        "value": "1 \"(TRUE OR TRUE OR TRUE) AND FALSE\" 2 3 AND 4 |_ OR 5 | |_ TRUE 6 | |_ OR 7 | |_ TRUE 8 | |_ TRUE 9 |_ FALSE 10 11 12 \"TRUE OR TRUE OR TRUE AND FALSE\" 13 14 OR 15 |_ TRUE 16 |_ OR 17 |_ TRUE 18 |_ AND 19 |_ TRUE 20 |_ FALSE 21 22 23 \"NOT ((TRUE OR TRUE) OR (TRUE AND FALSE))\" 24"
    },
    {
        "word_count": 76,
        "value": "The responsibility of the common behavior is pushed onto its own component (an interface or an abstract class), leaving to the concrete singularities the only responsibility of executing their specific task. If we look closely at the Open/Closed Principle in this way, we can think of it as a special case of applied Single Responsibility Principle on a higher abstraction level. The end solution usually shows less code and less repetitions with an optimal code reuse."
    },
    {
        "word_count": 76,
        "value": "One could also argue (also controversially) that it\u2019s not absolutely correct to say we cannot control the past. What is refactoring, if not improving the code written in the past? That\u2019s another reason for refactoring as soon as possible \u2013 without delaying to a future moment \u2013 to keep the current state of the code in its best shape. Even refactoring itself will be much easier by enabling a positive feedback loop in your development effectiveness."
    },
    {
        "word_count": 76,
        "value": "\u201cBounded rationality is the idea that in decision-making, rationality of individuals is limited by the information they have, the cognitive limitations of their minds, and the finite amount of time they have to make a decision.\u201d\u00b3\u2070\u00b9 The term was coined in the 1950s by Herbert A. Simon, and a lot has been written about its implications in an economic perspective. This simple concept plays a very important role in how we make decisions as a group."
    },
    {
        "word_count": 76,
        "value": "\u201cIt allows learning to happen across the silo boundaries. It\u2019s not an initiative to transform the organization, but a tool to understand what\u2019s going on, at a wider scale. We\u2019ll see how asking stakeholders to model a complex business flow together will expose many of the conflicts and contradictionshappeningattheboundariesbetweensilos.Itwillalsohelptolookforsystem-optimal solutions, which is hard, because the system is really hard to see, instead of a local, sub-optimal solution and a lot of useless politics to justify them.\u201d"
    },
    {
        "word_count": 76,
        "value": "1 // final solution 2 [TestFixture] 3 public class RomanConverterShould 4 { 5 [TestCase(1, \"I\")] 6 [TestCase(2, \"II\")] 7 [TestCase(3, \"III\")] 8 [TestCase(4, \"IV\")] 9 [TestCase(5, \"V\")] 10 [TestCase(6, \"VI\")] 11 [TestCase(7, \"VII\")] 12 [TestCase(8, \"VIII\")] 13 [TestCase(9, \"IX\")] 14 [TestCase(10, \"X\")] 15 [TestCase(40, \"XL\")] 16 [TestCase(50, \"L\")] 17 [TestCase(90, \"XC\")] 18 [TestCase(100, \"C\")] 19 [TestCase(400, \"CD\")] 20 [TestCase(500, \"D\")] 21 [TestCase(900, \"CM\")] 22 [TestCase(1000, \"M\")] 23 [TestCase(846, \"DCCCXLVI\")] 24 [TestCase(1999, \"MCMXCIX\")] 25 [TestCase(2008, \"MMVIII\")] 26"
    },
    {
        "word_count": 75,
        "value": "Write a function that returns true or false depending on whether its input integer is a leap year or not. A leap year is defined as one that is divisible by 4, but is not otherwise divisible by 100 unless it is also divisible by 400. For example, 2001 is a typical common year and 1996 is a typical leap year, whereas 1900 is an atypical common year and 2000 is an atypical leap year.\u00b3\u00b9"
    },
    {
        "word_count": 75,
        "value": "Until now we avoided splitting the path of execution since it adds quite a bit of complexity. This is the first transformation that allows the use of an if or other conditional statements or operators. Usually we get to this transformation quickly. Once we reach it, we tend to stay on it until we spot duplication or the code becomes too complex. This is a gear-changing transformation because we are introducing the concept of selection.\u2074\u2075"
    },
    {
        "word_count": 75,
        "value": "Object-oriented design has not changed much in the past 20 - 30 years, perhaps even longer. What I did not know is there is a price to pay in following this path. Suddenly I was no longer the one that knew the most about a specific technology on the team. Sometimes I felt frustrated for not knowing some detail in a framework, but eventually I just accepted it, as this was no longer my path."
    },
    {
        "word_count": 75,
        "value": "This This technique can also be applied when production code is calling static methods. The advantage of using this method is that it minimizes changes to production code and can be done using automated refactoring, thus minimizing the risk of introducing breaking changes to production code. Once you have good test coverage, you can refactor the Game class and remove the need for the seam by injecting the dependency in the Game class, for example."
    },
    {
        "word_count": 75,
        "value": "Communication is the main reason for Coupling. The Law of Demeter can be seen as the law of the neighborhood: \u201ctalk only to components close to you.\u201d The goal of this is to keep the communication of an object limited in scope, avoiding exposure of internal complexity and collaborators. This encourages correct encapsulation because to achieve it, classes must hold and use logic cohesive with the data they own, hiding it behind a public method."
    },
    {
        "word_count": 75,
        "value": "Every time we add a new view, we have to modify the controller, adding more code. Hence, this controller is not closed for modification. Furthermore, since the controller is created and destroyed for every request, it never uses more than one of these methods each time. We can definitely do better then that. Let\u2019s see what happen if we identify and extract the point of variation, leaving in the controller just the common abstract behavior:"
    },
    {
        "word_count": 75,
        "value": "This was when the .NET framework had just come out, and the startup wanted to replace their old system. However, the most exciting aspect was that the scope wasn\u2019t limited to a simple code rewrite. The software was meant to generate data from a manual operation of cataloging real items. The company was aware that the process needed improving as well, so they hired Jos\u00e9, a manager whospecializedinoptimizingsupplychainoperations,withthegoalofcreatingatop-quality,cross- functional team in charge of the project."
    },
    {
        "word_count": 75,
        "value": "In our experience, we have found this idea a great source of wisdom in many situations, not just involving effective teams and organizational improvement, but also in relation to self-development and the need to step out of our own comfort zone to \u201celevate\u201d the relevant constraint. This is the ultimate reason for going beyond merely technical knowledge and learning subjects that involve organizational understanding. That\u2019s why in our distillations this chapter had to be included."
    },
    {
        "word_count": 75,
        "value": "I had been stewing on an idea for some time, and I shared it with Eldon: \u201cListen, give me a day to try something out, and let\u2019s see if we like it enough.\u201d That\u2019s how EasyBdd was born. After a morning of work, we reviewed it together, we tweaked it a bit, and we fell in love with it. We were confident the BA and tester could work on it with a bit of practice."
    },
    {
        "word_count": 74,
        "value": "This kind of Connascence is far worse then any other, because it goes against the very first reason we want CI and DevOps. Ultimately, we write software to automate an information flow so our mindset should be focused on achieving full smooth automation for the deployment process on our phisycal (or cloud) infrastructure. Any manual task is a drag in reaching that goal. We call this type of Connascence the Connascence of Manual Task."
    },
    {
        "word_count": 74,
        "value": "The game is based on a console application that describes a fictional underground world to be explored by the player via a set of commands. The world is a collection of locations linked to each other geographically (on North, South, East or West) or via specific connection points (doors, passages, gates, stairs, etc.). The player can move among the locations using cardinal points for directions or exploiting the connection points with actions or items."
    },
    {
        "word_count": 74,
        "value": "So, from this point of view, understanding the business as a whole is a huge advantage. It\u2019s not just becauseunderstandingwhatcomesfromupstreamandwhatgoesdownstreamhelpsustomodelthe software for delivering the best functionality and interacting with other parts of the organization. If that understanding could provide useful insights at a business level, improving its functionality and optimizing the whole system, we would also improve the performances of all the departments of the business, including our very own team, as Deming said."
    },
    {
        "word_count": 74,
        "value": "One of the best techniques that we have seen recently to help identify the optimal separation of bounded context and provide a real understanding of the organizational system and its value stream is \u201cEventStorming\u201d. Ideated by Alberto Brandolini, EventStorming uses the stream of domain events as the driver to discover all other components of the whole system. You can read more about EventStorming in its own dedicated section at the end of the book."
    },
    {
        "word_count": 74,
        "value": "That\u2019s the reason why Toyota allowed competitors to walk through their factories and production plants. When others asked Toyota if they didn\u2019t fear they would be copied, they replied that the strength of the Toyota Production System wasn\u2019t about the methodologies they used, but the principles underlying them: the team spirit, the passion and the continuous improvement of the skills of their people. You can\u2019t grasp that simply by looking at a kanban board.\u00b2\u2079\u2079"
    },
    {
        "word_count": 74,
        "value": "\u201cIn a changing World, everything is evolving: technology, people, the organization itself, the surrounding business and the job market, too. Assuming that one of these ingredients will be immutable during a nontrivial change initiative is not a legitimate simplification: it\u2019s just plain naive. But there is one thing that we can do: we can take a snapshot of the current reality and ensure that all the key players are looking at the same thing."
    },
    {
        "word_count": 73,
        "value": "Pair programming is about shortening the feedback loop when writing code. It is easier to change software as we write it. To validate our ideas, we can discuss design choices in real time with an unbiased peer. If we have an extra person reviewing while we write code, we reduce the feedback loop to a few seconds. And the faster the feedback, the faster we converge on a quality-rich solution. Lean thinking applied!"
    },
    {
        "word_count": 73,
        "value": "This code dog.Body.Tail.Wag() looks innocuous at first glance, but in reality we are Coupling our code with classes that are far away from us. We only know about dogs and its public interface. The interface of dog body is an alien concept and we are creating a Coupling issue with it. In order to fix this coupling issue, we can create a method in dog that hides its dependencies from us. Example: dog.ExpressHappiness()"
    },
    {
        "word_count": 73,
        "value": "Afterthetaskwassuccessfullyexecutedontheinstrument,the FinishedTaskmethodmustbecalled by the InstrumentProcessor passing the task that was completed as the method argument. \u2079\u00b9We found these katas on Urs Enzler\u2019s website, PlanetGeek.ch. \u2079\u00b2This exercise is particularly suitable for C# and other languages with some form of pub/sub mechanism for events. If your language doesn\u2019t support it, you can skip it, or try to implement an observer pattern if you feel brave. (We would like to see your attempts if you do!)"
    },
    {
        "word_count": 73,
        "value": "It takes time to become proficient in writing tests for legacy code and we understand that sometimes it is a daunting task. In this chapter we distilled what in our opinion are the most important concepts on legacy code testing. Spending some time practicing the techniques we have outlined is an extreamely useful exercise and we hope that it might give you some ideas helping to make that work a bit less daunting."
    },
    {
        "word_count": 73,
        "value": "Working on a very clean and expressive code base is the most satisfying technical experience for me as a developer. Knowing that I can easily find out where a particular thing occurs or where we should add a class in order to expand the behavior is priceless. And usually that also means getting stories flying over the kanban board, making the stakeholders happy. I have experienced this only on teams writing expressive code."
    },
    {
        "word_count": 73,
        "value": "Typically, Typically, at this point, we have two choices. We can use a breadth first strategy and carry on with the implementation of the Cook method in case there are other things to do there and keep the focus of the current level of abstraction, or implement the SwitchOnFor method in the MicrowavesGenerator class. The flow would again be the same: first write the public interface and delay the implementation. Rinse and repeat."
    },
    {
        "word_count": 73,
        "value": "Not all problems have a single root cause, so to uncover multiple root causes, you must repeat the method and ask a different sequence of questions each time. This method has no specific rules about what lines of questions to explore or how long to continue the search for additional root causes. Thus, even when the method is closely followed, the outcome still depends upon the knowledge and persistence of the people involved.\u00b2\u00b3\u2078"
    },
    {
        "word_count": 73,
        "value": "\u201cUser Story Mapping is a dead simple idea. Talk about the user\u2019s journey through your product by building a simple model that tells your user\u2019s story as you do. It turns out this simple idea makes working with user stories in agile development a lot easier. More importantly it\u2019ll keep your users and what they\u2019re doing with your product front and center in your products. That\u2019s better than getting lost in feature arguments.\u201d\u00b2\u2074\u2076"
    },
    {
        "word_count": 73,
        "value": "\u201cThe Third Way enables the creation of a generative, high-trust culture that supports a dynamic, disciplined, and scientific approach to experimentation and risk-taking, facilitating the creation of organizational learning, both from our successes and failures. Furthermore, by continually shortening and amplifying our feedback loops, we create ever-safer systems of work and are better able to take risks and perform experiments that help us learn faster than our competition and win in the marketplace."
    },
    {
        "word_count": 73,
        "value": "I could sense he was intrigued and had a reason for the odd questions. He said, \u201cYou know, this is something I often ask in my interviewees because I believe that the key quality for the people I hire is being a good team player. In my experience, I have observed that those who have played team sports and love them also tend to have an outstanding approach in regard to professional teams.\u201d"
    },
    {
        "word_count": 73,
        "value": "Teams and individuals focus on and discuss the problems they face, options to solve or reduce the impact of those problems, and possible experiments to explore one or more of those options. Either just-in-time or on a regular, but fast-paced basis, they describe the details on sticky notes and place them on the board. They then execute the experiments, making the notes flow through the board, creating what Claudio calls \u201ca learning stream.\u201d"
    },
    {
        "word_count": 72,
        "value": "The Pomodoro technique was proposed in late 1980s by Italian consultant Francesco Cirillo. It is an excellent way to balance short sprints of work with regular breaks. The name \u201cPomodoro \u201c comes from the mechanical timers people used in kitchens to track cooking time for pasta. When Francesco started experimenting with the technique, he used the timer he found at home, which was in the shape of a tomato (\u201cpomodoro\u201d in Italian)."
    },
    {
        "word_count": 72,
        "value": "\u2022 You cannot have method arguments (except in constructors) that are primitive types (int, float, double, bool, string, char,\u2026 ). \u2022 You cannot have method return values that are primitive types (int, float, double, bool, string, char,\u2026 ). \u2022 For every primitive type that you need to pass around, create a class to act as home for related behaviors. \u2022 It is okay to have primitive types in class private member variables."
    },
    {
        "word_count": 72,
        "value": "What about the Save method? This method is obviously unrelated to the other two, acting on a different level of abstraction. The Save action leaks the intent of collaborating with a persistence layer \u2013 a completely different responsibility than traveling and showing the current mileage. Here, without even having to see the implementations of those three methods, we can anticipate that the class has at least two responsibilities; hence, it violates SRP."
    },
    {
        "word_count": 72,
        "value": "Thetrickhereismadebypassingthecorrectinstantiationoftheviewwhenthecontrolleriscreated. Thetrickhereismadebypassingthecorrectinstantiationoftheviewwhenthecontrolleriscreated. We now could go on forever adding more views; it would just be a matter of creating more concrete implementations of the IDisplayEngineStatusReport, making sure they get plugged in correctly in their use cases. That\u2019s why this solution is open for extension. Furthermore, we can see that we will not have to modify CarEngineStatusReportController anymore for adding new views. That\u2019s why we can say that it is closed for modification."
    },
    {
        "word_count": 72,
        "value": "Given the elevator is positioned on the groud floor When there is a call from floor3 to go to basement And there is a call from ground to go to basement And there is a call from floor2 to go to basement And there is a call from floor1 to go to floor 3 Then the doors should open at floor3, basement, ground, basement, floor2, basement, floor1 and floor3 in this order"
    },
    {
        "word_count": 71,
        "value": "Distillation is the purification or concentration of a substance, obtaining the essence or volatile properties contained in it. It is also the separation of one substance from another. In this book we will try to do the same, extracting and sharing the essence of all the best practices we have come acrossin ourcareers. Weareconcentrating here onthe best of the best of what has worked, enriched by our own principles and values."
    },
    {
        "word_count": 71,
        "value": "When a friend mentioned the Transformation Priority Premise (TPP) in a mob session we were doing in the Arctic region of Finland, I was baffled. I had been practicing TDD for many years and considered myself an above-average practitioner, yet I had never heard of TPP. As soon as I had a moment with my friend, I grilled him with questions and then spent the night in my cabin learning it."
    },
    {
        "word_count": 71,
        "value": "\u2022 \u201cGood naming is a process, not a single step,\u201d Arlo Belshee\u2076\u2076 \u2022 \u201cThe Limited Red Society,\u201d Joshua Kerievsky.\u2076\u2077 \u2022 \u201cParallel Change Code,\u201d Pawel Duda and Carlos Bl\u00e9.\u2076\u2078 \u2022 \u201cRefactoring Sequences: Safe Unwrap,\u201d Carlos Bl\u00e9\u2076\u2079 \u2022 \u201cRefactoring Techniques,\u201d SoureMaking.com\u2077\u2070 \u2022 \u201cReplace String Constants With Type \u2013 Variation II,\u201d Carlos Bl\u00e9\u2077\u00b9 \u2022 \u201cSmells to Refactorings Cheatsheet,\u201d Industrial Logic\u2077\u00b2 \u2022 \u201cWhat To Tidy,\u201d Kent Beck\u2077\u00b3 \u2076\u2076http://arlobelshee.com/good-naming-is-a-process-not-a-single-step/ \u2076\u2077https://www.infoq.com/presentations/The-Limited-Red-Society \u2076\u2078https://github.com/unclejamal/parallel-change \u2076\u2079https://youtu.be/DpGk34Lqo-A \u2077\u2070https://sourcemaking.com/refactoring/refactorings \u2077\u00b9https://youtu.be/o8PVNrfl1p8 \u2077\u00b2https://www.industriallogic.com/blog/smells-to-refactorings-cheatsheet/ \u2077\u00b3https://medium.com/@kentbeck_7670/what-to-tidy-28cb46e55009"
    },
    {
        "word_count": 71,
        "value": "The Design Patterns subject fits perfectly into the Rules, Principles and Values considerations. Memorizing them is like learning the rules: they give you a shortcut for solving particular problems. Buttherealvalueisinmasteringtheprinciplestheyarebasedon.Youcanblendthemintoparticular scenarios, enhancing the expressivity and reusability of the final code. Ultimately, when you follow correct design principles and solve your problem in your very own way, your design might include pieces of patterns naturally, without even having to look them up."
    },
    {
        "word_count": 71,
        "value": "Furthermore, Domain-Driven Design is not advocating Big Design Upfront. \u201cDriven\u201d doesn\u2019t necessarily mean \u201cbuild the full domain model first.\u201d What it means is, since the business domain is so important, the domain model is the heart of the system; thus, it must be the one we give more love to. Essentially, the closer we are to the domain model, the less we should be open to trade-offs that impact the design."
    },
    {
        "word_count": 71,
        "value": "The technique is based on visualization of the backlog in a timeline in relation to someone doing something to reach a goal. To achieve that, the user stories are grouped in wider activities and tasks based on their contribution to a higher goal. They are then arranged in a narrative flow called the backbone. Smaller sub-tasks, user stories, details and variations hang down to form the ribs connected to the backbone."
    },
    {
        "word_count": 71,
        "value": "Each one of these activities produces data, either newly created data or changed data (which, from an event-sourcing point of view, is just a special case of creating new data). However, not all of this huge amount of information is relevant to the whole business. Most is relevant just for a specific activityortask,whileonlysomeparticulareventswouldproduceinformationrelevantforthewhole organization. These relevant events are the key information to focus on in order to optimize the communicationbetweensubsystems.IntheworldofDomain-DrivenDesign,theyarecalleddomain events."
    },
    {
        "word_count": 71,
        "value": "The technique revealed itself to be very successful. After the first month-and-a-half, our system was already in great shape. The business stakeholders couldn\u2019t believe their eyes. Finally, after years, something was deployed that actually worked, and it steadily grew, feature after feature without defects. After a few more months (in record times by the standard of the old team), we had successfully implemented the whole backlog we were in charge of."
    },
    {
        "word_count": 71,
        "value": "\u00b2\u2079\u2079Takahiro Fujimoto, a Harvard Business School graduate who teaches at Tokyo University and has studied the company, says: \u201cToyota\u2019s real strength resides in its ability to learn. Its employees are problem-conscious and customer-oriented, and this preparedness is the source of the company\u2019s dynamic capability. The company\u2019s practices are constantly changing, even though its basic principles are unchanged.\u201d https://money.cnn.com/magazines/fortune/fortune_archive/1997/12/08/234926/index.htm \u00b3\u2070\u2070The goal of a real leader is to create other leaders, not followers."
    },
    {
        "word_count": 70,
        "value": "In the following chapters we will introduce several rulesets for different contexts. Please don\u2019t force yourself into memorization. If you don\u2019t remember something, open the page and consult the book as a reference. Try to work out the rules in your mind, starting from the principles. Experiment with different variations and evaluate the pros and cons of each outcome. Exercise until you understand and remember the principles, not the rules."
    },
    {
        "word_count": 70,
        "value": "\u2022 Rename \u2013 Change the name of classes, methods, variables\u2026. \u2022 Extract \u2013 Extract a class (or methods or variables\u2026), creating a new abstraction. \u2022 Inline \u2013 The inverse of extract \u2013 inline a method (or variable), deconstructing an abstraction. \u2022 Move \u2013 Move a class (or methods or variables\u2026) to some other place in the codebase. \u2022 Safe delete \u2013 Delete code and its usages in the code base."
    },
    {
        "word_count": 70,
        "value": "This was the book that allowed me finally to connect the dots. \u201cCommon solutions to common problems.\u201d Abstractions. I couldn\u2019t grasp it in the beginning because I was approaching it from the implementation (typical bias of the young developer). Now, when I think of design patterns, I don\u2019t even remember the solution \u2013 I remember the problems they are meant to solve. For anything else we have Google (or DuckDuckGo)."
    },
    {
        "word_count": 70,
        "value": "Given the elevator is positioned on the groud floor When there is a call from floor3 to go to basement And there is a call from ground to go to basement And there is a call from floor2 to go to basement And there is a call from floor1 to go to floor 3 Then the doors should open at floor3, floor2, ground, basement, floor1 and floor3 in this order"
    },
    {
        "word_count": 70,
        "value": "Using this analogy, too much Cohesion would create a black hole, and too little Cohesion would create a barren planet, unable to support life as we know it. The same for Coupling. Too much Coupling and planets would collide with each other or would be swallowed by the Sun; too little Coupling and we would not have the Solar System because each planet would wander by itself in the Universe."
    },
    {
        "word_count": 70,
        "value": "The basic idea of the Theory of Constraints is very simple, yet very powerful when we focus on improvement because it is meant to help in identifying what we should work on in a System in order to achieve the quickest and the most effective benefit. Despite being first articulated in the context of manufacturing, the principles underlying it are very general and can be adapted to every systemic context."
    },
    {
        "word_count": 70,
        "value": "An alternative word for department is \u201csilo,\u201d to use a common metaphor. Brandolini says that \u201csilos do excel in one thing: they minimize the amount of learning needed for newcomers\u201d or, expressed in the reverse way, they \u201cmaximize overall ignorance within an organization\u201d.\u00b3\u00b9\u00b2 Every organization is made up of silos to some extent, degrading its effectiveness, eroding its margins or \u2013 in the worst cases\u2013doomingittofail.\u201cThereallynastytraitofsilosistheirasymmetry;they\u2019reeasytoestablish, and really hard to remove.\u201d"
    },
    {
        "word_count": 69,
        "value": "This style is very effective when the navigator has the whole picture and the roadmap to implement a functionality. The driver can focus on writing the code and learn the ideas while they unfold in the code. The navigator will have to give the next instruction to the driver the instant they are ready to implement it and talk in the highest level of abstraction the driver can understand."
    },
    {
        "word_count": 69,
        "value": "Start code End code {} [return] nil [return] nil [return] \u201c1\u201d [return] \u201c1\u201d [return] \u201c1\u201d + \u201c2\u201d [return] \u201c1\u201d + \u201c2\u201d [return] argument [return] argument [return] min(max(0, argument), 10) [return] argument if(condition) [return] 1 else [return] 0 dog [dog, cat] [dog, cat] 9 Statement -> tail recursion a + b a + recursion 10 If -> loop 11 Statement -> recursion 12 Expression -> function 13 Variable -> mutation"
    },
    {
        "word_count": 69,
        "value": "\u2022 \u201cEntropy (information theory),\u201d Wikipedia\u00b9\u2078\u2070 \u2022 \u201cEntropy in thermodynamics and information theory,\u201d Wikipedia\u00b9\u2078\u00b9 \u2022 \u201cInformation theory,\u201d Wikipedia\u00b9\u2078\u00b2 \u2022 \u201cA Mathematical Theory of Communication,\u201d Clause Shannon\u00b9\u2078\u00b3 \u2022 \u201cA Possible Ethical Imperative Based on the Entropy Law,\u201d Mehrdad Massoudi\u00b9\u2078\u2074 \u2022 \u201cA Theory of Emergence and Entropy in Systems of Systems,\u201d John J. Johnson IV, et al.\u00b9\u2078\u2075 \u2022 \u201cUnderstanding Shannon\u2019s Entropy Metric for Information,\u201d Sriram Vajapeyam\u00b9\u2078\u2076 \u2022 \u201cWhat is life?\u201d Erwin Schrodinger\u00b9\u2078\u2077"
    },
    {
        "word_count": 69,
        "value": "In general,oneofthe mostcommonpatternsobserved in softwaredevelopers is that theytend tosee software development as a discipline apart \u2013 almost disconnected from any other fields of science or business. This view makes them think very passionately, deeply and seriously about it, but the same depth and passion fade out very quickly for other topics that are equally or even more important for the success of the business and the software development itself."
    },
    {
        "word_count": 69,
        "value": "Another method very useful for going beyond traditional requirements and instead letting them emerge as a consequence of the business goals is impact mapping. It is a technique with a strong visual component since it uses a special kind of mind map diagram aimed at focusing on business information.Thereallyeffectivepointofmindmappingisthatitisaninteractiveactivitytoperform collaboratively with the stakeholders, starting from the impact that the business is looking for (that is, from the strategic goal)."
    },
    {
        "word_count": 69,
        "value": "In parallel, there\u2019s a marketing system to place advertisements, and after the sale is done, there will besomecustomercarefunctionality.Thisandalloftheaboveareactivitiesofthevaluestream.They can happen in parallel, and the stream might be somewhat complicated, but they can be carried on independently of one another. However, they have dependencies; for example, the system in charge of letting customers place an order obviously needs to know the stock of the available items \u2013 they are interconnected."
    },
    {
        "word_count": 69,
        "value": "From this point of view, since bounded contexts are high-level modules, there should also be among them a special focus on communication. Furthermore, given that to reach a good understanding we should move the focal point to the external system (as noted previously by Russell Ackoff\u00b2\u2075\u00b9), this explains why it is important to understand the value stream in order to design the best interaction flow between the bounded contexts."
    },
    {
        "word_count": 69,
        "value": "Fromthepointofviewofcommunication,theseparationconcernsbetweenCommandsandQueries are also represented by the concept of bounded contexts. If we consider the different nature of Commands and Queries, we can see that they fit quite well with the synchronous and asynchronous ideas. Essentially, queries are a fit for synchronous communication since all they have to do is just expose data in a read-only mode, and ideally this operation is really fast and free of any race conditions."
    },
    {
        "word_count": 68,
        "value": "It turns out I missed a lot. My pairing with Rui had little resemblance to the discipline of pair programming. Although I had spent many hours pairing with him, I had never paired with anyone else. We naturally found our balance by self-organizing ourselves, so we did not need to add any structure to it. In hindsight, it was the pressure of the deadline that kept us going."
    },
    {
        "word_count": 68,
        "value": "\u2022 Driver \u2013 Responsible for the coding work, such as typing, moving the mouse, etc. \u2022 Navigator \u2013 Responsible for reviewing the driver\u2019s work, looking at the code from a strategic level and continuously posing questions like: \u2013 How will this fit with the rest of the code? \u2013 Will this implementation require changes elsewhere? \u2013 Could we design this program better? \u2013 Are there any accidental mistakes?"
    },
    {
        "word_count": 68,
        "value": "using a classic testing approach. You can do Outside-In development even without tests. Outside-In from a systemic point of view means focusing first on one of the most important aspects,the public interface, which for a system represents the communication with the external world. Remember that we see software as a system of systems? This the reason for the quote of Alan Kay at the beginning of this chapter."
    },
    {
        "word_count": 68,
        "value": "If you think about it, it makes sense; the business logic should be self-containing and should work correctly without caring if the information is saved on this or that database, displayed on the web, or in a csv file. Changing a webpage to display information in an alternative way should be possible without changing the domain, and it happens way more often than modifications of the domain itself."
    },
    {
        "word_count": 68,
        "value": "There are only two requirements for the world. The first is that there should not be two different locationswiththesametitle.Thesecondisthatthelocationsmusthavemutuallyreversedreferences to each other. This means that if from location A going South the player ends up in location B, then from location B going North I must end up in location A. The same principle should be valid for all cardinal points, but also when going up and down."
    },
    {
        "word_count": 68,
        "value": "Communication is one of the most important aspects of every organization, and it is crucial for the success of projects. As we have seen in the systems entropy section in the \u201cDesign Conclusions\u201d chapter,ClaudeShannonprovedthatcommunicationissubjecttoentropy,anditnaturallydegrades the information at every step.\u00b2\u2070\u2076\u00b2\u2070\u2077 So, handling information through too many lines raises the chanceofmisunderstanding.Ifyouaddinthelackofastandardized,rigorousandeffectiveformatto exchangeinformation,wehavethemainingredientsforarecipeformisunderstanding.Didyouever play the \u201ctelephone game\u201d\u00b2\u2070\u2078 when you were a kid? The same force is also in play for requirements."
    },
    {
        "word_count": 68,
        "value": "However, using design skills or specific properties of the languages matched with a little bit of creativity, it\u2019s not difficult to keep the specifications clean enough. For example, C# has the \u201cpartial class\u201d construct which is very effective for this purpose, in our experience. If you are unsure, ask a business analyst to sit with you and together read the acceptance criteria from code; this feedback is key."
    },
    {
        "word_count": 68,
        "value": "\u201c5 Whys is an iterative interrogative technique used to explore the cause-and-effect relationships underlying a particular problem. The primary goal of the technique is to determine the root cause of a defect or problem by repeating the question \u2018Why?\u2019 Each answer forms the basis of the next question. The \u201c5\u201d in the name derives from an anecdotal observation of the number of iterations needed to resolve the problem."
    },
    {
        "word_count": 68,
        "value": "Given the consequences of the CAP Theorem,\u00b2\u2075\u2075 working in conditions of eventual consistency has been proven a key advantage in distributed systems in terms of resilience, scaling and performance. This is an ideal situation for commands to happen inside asynchronous communication in a fire- and-forget mode. They might need more time to execute than queries and are often consequences of events, thus they are a very good fit."
    },
    {
        "word_count": 68,
        "value": "We never grew tired explaining things to one another, trying someone\u2019s new ideas that resonated with others, and generally helping each other every time someone needed it. We were a team of servant leaders where trust, support and empathy felt natural. We never blamed each other, but togetherreviewedimprovmentpointsseveraltimeswithoutanyoneeverfeelingpersonallyattached to a piece of code. What a childish concept; it wasn\u2019t my code or his code \u2013 it was ours."
    },
    {
        "word_count": 68,
        "value": "In our experience with development teams, sharing knowledge with the goal of reaching a common understanding of the principles and values we presented in this book has always had a tremendous positive impact in limiting friction about consensus. In fact, we wrote this book also with the intent ofhavingareferencemanualforrecallingandreviewingprinciplestosupportourpersonalactivities of coaches and mentors, hoping that we can help everyone in the same situation and share the same values."
    },
    {
        "word_count": 68,
        "value": "It is definitely easier said then done for several reasons. One of the main ones that we\u2019ve repeatedly seen in past clients is the lack of a shared understanding of their value stream. Only a few select people have an idea (usually not up-to-date) of the whole high-level picture, while others are hermetically separated into departments where they can be productive with the minimum amount of knowledge possible."
    },
    {
        "word_count": 67,
        "value": "In this style the driver has to trust the navigator while becoming comfortable with incomplete understanding. The driver will follow the directions expressed by the navigator and is allowed to ask questions when what has been said is not clear. Discussingwhy should be deferred until the idea is fully coded; this is when ideas can be discussed or the navigator can tae hints on how to proceed."
    },
    {
        "word_count": 67,
        "value": "\u201cSometimes the navigator and the driver will butt heads. I have often made the mistake of trying to argue the merits of my ideas when the actual problem is that the driver does not trust me. If you don\u2019t trust someone, all the logic in the world isn\u2019t going to help. A simple solution to this is simply to ask for a temporary window of trust.\u201d \u00b9\u2078"
    },
    {
        "word_count": 67,
        "value": "This last transformation introduces the concept of mutation. We should not mutate any variables until we reach this transformation. This is why previous transformations favored recursion over loops. Traditional loops in imperative languages tend to rely on variable mutation. Immutability is a very important concept and property of code, and we should strive to keep everything as immutable as possible, even when not using a functional language."
    },
    {
        "word_count": 67,
        "value": "To attain good object-oriented design, the Test Doubles technique leverages Test-Driven Develop- ment by guiding the composition of a coherent, well-encapsulated system of types within a code base. By focusing on behavior instead of data, Test Doubles leads developers to think about object interactions early, identifying the public interfaces first. This focal point switch in the way tests are created is crucial in finding optimal object compositions."
    },
    {
        "word_count": 67,
        "value": "\u201cPlugin-ability\u201d creates a system that is flexible enough to allow you to extend it without being too generic. There should be a balance between the concept of YAGNI\u00b9\u00b3\u00b9 and plugin-ability; they are opposing forces. YAGNI tells you to have just enough code to express the desired behavior; plugin- ability tells you that you need to have extension points to allow new features without too much code change."
    },
    {
        "word_count": 67,
        "value": "J. B. Rainsberger writes, \u201c\u2026usually names tend to go through four stages: nonsense, accurate- but-vague, precise, and then meaningful or intention-revealing, as Kent Beck described it. I focus my efforts on gradually moving names to the right of this spectrum. Instead of agonizing over the choice of a name, I simply pick a name, confident that I always look for opportunities to move names towards becoming meaningful.\u201d\u00b9\u2076\u00b3"
    },
    {
        "word_count": 67,
        "value": "Another great advantage of this approach is that when a bug is identified, it\u2019s possible to precisely analyze the reasons for it. In fact, the code responsible for the defect is always traceable to the user story that required it from a functional perspective; hence, it is possible to double-check it against its acceptance criteria. This allows the team to identify the root reasons for the occurrence."
    },
    {
        "word_count": 67,
        "value": "Basically, if we have a very good suite of acceptance tests like the one we were building in Team C, any bug in the code would be traceable to a few broken units and always at least one broken acceptance. So acceptance tests would be the minimum amount of tests we could write in order to have the safety network to refactor any part of our code."
    },
    {
        "word_count": 67,
        "value": "That\u2019s why we think that knowledge is one of the most precious collective things we have as social beings. So, foster it, share it and expand it with new ideas. It\u2019s one of the highest purposes we can think of. Being able to genuinely enjoy this process of appreciating and sharing immaterial things is what makes the real difference in software development, in organizations and in life."
    },
    {
        "word_count": 67,
        "value": "The workshop consists of using domain events and their temporal flow to build a model of the current shared understanding of the business. Each actor contributes to the part of the system he knows the most, which is always interrelated with other parts. At the end of the workshop, everything will be organized together in a coherent timeline stream, providing a detailed model of the current system."
    },
    {
        "word_count": 66,
        "value": "Write the simplest code to pass the test. Fake it or use obvious implementation. It is okay to write any code that makes you get to the refactor phase more quickly. It is okay to write any code that you might improve at a later stage. Don\u2019t be embarrassed by writing simple code. Trying to write smart code too early is often not the best choice."
    },
    {
        "word_count": 66,
        "value": "If the dependency is injected through the constructor or setters, replacing the dependency with a Test Double should be enough. Unfortunately, that\u2019s not always the case. Sometimes you have to deal with static dependencies or locally generated ones. In those cases, you will have to segregate the dependency, introducing a seam in your code (as specified in Working Effectively with Legacy Code by Michael C. Feathers)."
    },
    {
        "word_count": 66,
        "value": "I was once in a team that was building a new service for consuming messages from a new queue. The \u201cclassic\u201d way they used was to configure a list of messages in the configuration, and for each message, configure a handler. So, for every new message, they had to add not just the handler, but also an entry in the configuration; hence, the two were connascent."
    },
    {
        "word_count": 66,
        "value": "TDD is a very effective way to limit the amount of code we write, as we are only writing enough code to make the failing test pass. Tests help prove that the system is implementing the expected behaviors. There is no point in having a beautifully designed system if it does not implement the expected behaviors; this is why Passes its tests is the first rule."
    },
    {
        "word_count": 66,
        "value": "Outside-In is a development mindset, focused by default on the business view, bridging the gap between the two worlds naturally. This mindset derives from the Outside-In TDD approach, also called\u201cLondonschool\u201dor\u201cmockist.\u201dItisanalternativeapproachtoTDD,leadingustofirstconsider a point of view external of our class, starting with the design of the public interface. This in turn forces the developer to put himself in the shoes of the user, considering that person\u2019s needs first."
    },
    {
        "word_count": 66,
        "value": "W e now have two red items in the new line of code: the interface IGenerateMicorwaves and the concrete MicrowavesGenerator. Let\u2019s use the suggestions again, beginning from the interface. Here the \u201ccreate interface\u201d suggestion is straightforward, and we can afterwards move on the concrete and use again the \u201ccreate type.\u201d The IDE is quite smart in this situation, already making the type inherit from the interface:"
    },
    {
        "word_count": 66,
        "value": "} 10 //more scenario ... 11 } 12 13 //this partial class contains the implementation 14 //we hide this in a different file 15 [TestFixture] 16 public partial class RefundSpecifications : BddSpecification{ 17 private void Customer_previously_bought_an_item() 18 { ... } 19 private void I_currently_have_four_items_in_stock() 20 { ... } 21 private void He_returns_the_item_for_a_return() 22 { ... } 23 private void I_should_have_five_items_in_stock() 24 { ... } 25 }"
    },
    {
        "word_count": 66,
        "value": "\u2022 Eldon: \u201cThey said yes, and we can even hire two new people!\u201d \u2022 Me: \u201cYou joking, mate?\u201d \u2022 Eldon: \u201cSeriously. I already know someone who would fit with us perfectly and can come and join us. Do you know anyone yourself?\u201d \u2022 Me: \u201cActually, I do know an amazing guy, knowledgeable and humble, who worked with me in the past and is looking for something\u2026\u201d"
    },
    {
        "word_count": 66,
        "value": "I was amazed. Being young, that was the first time I had heard someone senior talking about team play. It resonated a lot with me, and as you see, I still remember that conversation. I loved working there, and that spirit was the key to their success. Unfortunately, as the years have gone by, I\u2019ve realized that executives with such a mindset are not so common."
    },
    {
        "word_count": 66,
        "value": "\u00b3\u2070\u00b9BoundedrationalityisaconceptdefinedbyHerbertSimon,winneroftheNobelPrizeinEconomicsin1978andtheTuringAwardin1975. It states that \u201cHuman beings make quite reasonable decisions, but only based on the information they have.\u201d The idea is that when individuals make decisions, their rationality is limited by the tractability of the decision problem, the cognitive limitations of their minds, and the time available to make the decision. https://en.wikipedia.org/wiki/Bounded_rationality, https://en.wikiquote.org/wiki/Bounded_rationality \u00b3\u2070\u00b2W Brian Arthur, \u201cInductive Reasoning and Bounded Rationality\u201d in Complexity and the Economy"
    },
    {
        "word_count": 65,
        "value": "The principal driving forces that pushed us to craft this book are the passion for what we do and the wish to provide a straightforward path to other fellow developers. We have been working for the last 20 years in the software world as developers, coaches and mentors. The content of this book has been distilled over those years of daily practicing, experimenting and sharing."
    },
    {
        "word_count": 65,
        "value": "Wehavebeenteachingandcoachingothersonthismaterialforyearswithsuchamazingresultsthat we felt that writing this book was something we owed to the community. We independently came to the conclusion that the very important matters about software development are the principles driving every line of code, not the technical knowledge of one specific vendor\u2019s product or another. Astonishingly, when discussing this, we discovered that we all share the very same principles (with some personal flavors)."
    },
    {
        "word_count": 65,
        "value": "TherearetwobigTDDschools:theClassic/Classicist/ChicagoschoolandtheOutside-In/Mockist/London school. Let\u2019s add both to the TDD box. Outside-In TDD relies heavily on Mocks and Stubs, referred more generically as Test Doubles, so let\u2019s add Test Doubles as well. The Transformation Priority Premise is a great way to evolve code without adding complexity too soon, so it can be seen as part of TDD or Simple Design. We choose to add it to TDD."
    },
    {
        "word_count": 65,
        "value": "\u2022 They give you a range of scenarios of recurring problems already solved in which to look for inspiration. \u2022 They give you a vocabulary for talking about possible implementations of a solution, so that there is no need to go into detail. \u2022 They give you a quick reference for a possible implementation of a solution if the problem fits. \u2022 Theimplementationsusedarebasedonfundamentalsoftwaredesignprinciplesthathavebeen widely accepted."
    },
    {
        "word_count": 65,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. \u2022 Apply object calisthenics to improve your design. \u2022 Stay on the green while refactoring. \u2022 Use the IDE to refactor quickly and safely. \u2022 Refactor code for readability/understandability first. \u2022 Look out for code smells and refactor your code accordingly. \u2022 Refactor to patterns when the context is appropriate (New habit)."
    },
    {
        "word_count": 65,
        "value": "\u00b2\u2079\u00b3\u201cTeam C\u201d and \u201cred flag\u201d are clues of the corporation environment we were working in. We didn\u2019t chose the name \u2013 we were a new micro- team created from the bones of the two main teams: Team A and Team B. Hence, we were Team C. This says a lot about the personalities not only inside the development teams, but in that overall corporate environment."
    },
    {
        "word_count": 65,
        "value": "When there is team spirit in a group with a common goal, there is no storming phase. In Team C we never had that experience. We knew exactly what we considered important and shared it with everyone from day one. After the initial coaching on the field, the other two team members arrived, and from then on user stories began flying on the kanban board."
    },
    {
        "word_count": 65,
        "value": "\u00b2\u2079\u2075We made the decision to try this experiment mostly because all four members of the team were very experienced and in any situation would naturally write code outside-in without need of tests. Furthermore, their maturity was high enough to decide to add tests when they felt there was value in them. Be very careful in trying this technique as a team without mastering outside-in development."
    },
    {
        "word_count": 65,
        "value": "Despite the general, diffuse disillusion we sense over the Agile hype, we still don\u2019t agree with what we\u2019ve heard, that \u201cAgile is dead.\u201d Maybe it\u2019s the hype that is about to die, and that might even be a good thing. Agile, before anything else, is an idea based on a set of 12 principles. And you cannot kill ideas or principles. That\u2019s their ultimate strength."
    },
    {
        "word_count": 65,
        "value": "We have seen that the teams and the organizations we work in are Sociotechnical Systems that naturally tend to inertia. Let\u2019s read again the quote of John Gall and try to understand it better. \u201cIn order to remain unchanged, the system must change. Specifically, the changes that must occur are changes in the patterns of changes (or strategies) previously employed to prevent drastic internal change.\u201d"
    },
    {
        "word_count": 65,
        "value": "PopcornFlow, being born as Claudio\u2019s idea while working in Agile and Lean environments, is obviously well fit to coach Agile teams and facilitate highly effective retrospectives. Teams can trade options outside their immediate circle, too - a crucial mechanism to reduce the inevitable bias. Combined with jobs-to-be-done theory, it also works well for product and service innovation and can help even sales and marketing teams."
    },
    {
        "word_count": 64,
        "value": "1. Any live cell with fewer than two live neighbors dies, as if by under population. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction."
    },
    {
        "word_count": 64,
        "value": "Introduce new functionality by adding new code instead of changing existing code. If you are expanding a class or an interface, introduce new methods instead of changing existing ones. If the behavior from the outside is similar and only implementation changes, duplicate existing tests and point them to new code, leaving the existing tests untouched. Make sure tests for existing code are still working."
    },
    {
        "word_count": 64,
        "value": "A common example of this is when one Mock has to interpret its input to return a value, perhaps by parsing an event message. This has the consequence of testing the test infrastructure rather than the Subject Under Test, because a change in the original object would force a change in the stubbed object, making it a classic example of Shotgun Surgery code smell."
    },
    {
        "word_count": 64,
        "value": "We are not saying that we should never have static methods, but we should be aware that they are low Cohesion. The same applies to helper classes or modules. Design is about choice, but that choice should be a deliberate one, and we should be aware of the consequences of our choices. Have a look at Java.util\u00b9\u00b2\u00b9. What is the Cohesion of this package?"
    },
    {
        "word_count": 64,
        "value": "Also here, the rule of wrong abstraction is valid, so we find it\u2019s a good idea to use the Rule of Three before refactoring to Open/Closed. This is especially the case if building a brand new system and we are not sure about predicting variations. When there are three components showing a pattern of behavior, it is usually easier to build the correct abstraction."
    },
    {
        "word_count": 64,
        "value": "The The Save method implies that there will be some collaboration with an external persistency mechanism, while other methods imply work on business logic pertaining to the Car class. These are clearly two different layers of abstractions. This is an example where the violation of the Balanced Abstraction Principle is also a violation of the Single Responsibility Principle. \u00b9\u00b3\u2075Sandro Mancuso, \u201cBalanced Abstraction Principle,\u201d https://codurance.com/2015/01/27/balanced-abstraction-principle/"
    },
    {
        "word_count": 64,
        "value": "Since the four elements of simple design express high-level goals instead of low-level rules, they allow for a great degree of personalization in how they are expressed. That\u2019s because everyone uses their own favoriteset of principlesand valuesto expresswhatis keytoachievingthesegoals. Hence, we have found several different versions of the elements, each one different, yet all expressing the same goals. Here are a few of them:"
    },
    {
        "word_count": 64,
        "value": "At the end of the day, for acceptance we are interested in proving the business behavior. And if we design our system well, that kind of abstraction lives in a very specific layer of our system, as we have seen in the previous chapter. Hence, it\u2019s a perfectly acceptable trade-off to run our acceptance suite, skipping infrastructural delivery components and hitting the application layer."
    },
    {
        "word_count": 64,
        "value": "It is a critical component of problem-solving training, delivered as part of the induction into the Toyota Production System. The architect of the Toyota Production System, Taiichi Ohno, said that the 5 Whys were \u201cthe basis of Toyota\u2019s scientific approach\u201d and that \u201cby repeating why five times, the nature of the problem as well as its solution becomes clear.\u201d\u00b2\u00b3\u2079 The tool has seen widespread"
    },
    {
        "word_count": 64,
        "value": "An excellent distillation of the elixir for building software effectively would be missing an essential flavor if we didn\u2019t touch on the topic of people. Even when building software as a single developer, there are always interactions with other people in the form of clients, stakeholders and end users. Closed systems exist only in the academic world of theories and live only inside books."
    },
    {
        "word_count": 63,
        "value": "We want this book to be a single reference for what we think are the essential practices a developer should master. We have learned our lessons the hard way, but you don\u2019t have to. If you learn even one thing from it, you are already a better professional than yesterday. If you are better, the world of software development is better: transcendental Kaizen."
    },
    {
        "word_count": 63,
        "value": "During the last decade, the number of popular technical practices has grown exponentially. So, coming up with a list of core ones can be a daunting task. Every single programmer will have core beliefs, and consensus can be challenging to achieve. However, the authors feel that among all those techniques there are a number of essential principles to grasp from many of them."
    },
    {
        "word_count": 63,
        "value": "Input Expected output Transformation Implementation 0 0 {} -> nil Does not work 0 0 Nil -> constant return 0 1 1 Constant -> scalar return index 2 1 Unconditional -> conditional if number < 2 then return index else return index - 1 3 2 Unconditional -> conditional No change 4 3 Unconditional -> conditional No change 5 5 Scalar -> array"
    },
    {
        "word_count": 63,
        "value": "In other words, they don\u2019t check what the code is supposed to do like specification tests do, but what the code actually and currently does. Having a set of characterization tests helps developers working with legacy code because they can run these tests after modifying their code, ensuring that their modification did not cause any unintended or unwanted changes in functionality somewhere else."
    },
    {
        "word_count": 63,
        "value": "One of the great advantages of a correct implementation of the Open/Closed Principle is that future developments of new functionality becomes much faster than before. This is usually achieved by identifying and modeling the common behavior into a higher layer of abstraction. For introducing new behavior, it will then be just a matter of implementing a new concrete component to be plugged in."
    },
    {
        "word_count": 63,
        "value": "As As always, we transform it back to Connascence of Name so we will be in a better position when it\u2019s maintenance time. Do you notice how something so simple helps the expressivity of this little code so much? Imagine if the algorithm was much more sophisticated. It\u2019s always a good idea to encapsulate reused, complicated logic behind its own level of abstraction!"
    },
    {
        "word_count": 63,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. \u2022 Apply object calisthenics to improve your design. \u2022 Stay on the green while refactoring. \u2022 Use the IDE to refactor quickly and safely. \u2022 Refactor code for readability/understandability first. \u2022 Look out for code smells and refactor your code accordingly. \u2022 Refactor to patterns when the context is appropriate."
    },
    {
        "word_count": 63,
        "value": "So, we now have a way to see the business as a sequence of key activities and all of these activities would be supported by an information system. If this holistic view of the organization\u2019s activities is missing, what chance is there of creating systems that communicate in harmony with each other, smoothly mapping the flow of value with the flow of information?"
    },
    {
        "word_count": 63,
        "value": "We are almost at the end of our journey, and at this point the attentive reader might have noticed a few patterns. The occurrences of concepts like \u201cfeedback loop,\u201d \u201ccommunication,\u201d \u201cindependence,\u201d \u201cvalue,\u201d \u201centropy,\u201d \u201cwhole\u201d and \u201ceffectiveness\u201d are not a coincidence. All the subjects of this book have been viewed through the lens of System Thinking, hence the reason for focusing on these concepts."
    },
    {
        "word_count": 63,
        "value": "The activity of teaching we have been doing recently has been a real game changer for us, and we highly suggest the readers to try it. Nothing in our profession has been more humanly rewarding than sharing our knowledge and our understanding with less experienced, eager-to-learn young professionals and seeing them improving by the day. Their gratitude for what they have learned has"
    },
    {
        "word_count": 62,
        "value": "After the refactor, run the tests and make sure they are all green. Now that we have tests to prove the behavior for numbers not divisible by 3 or 5 we can start testing numbers divisible by 3. Use triangulation to force a change to a new behavior. Write a new failing test. When I fizzbuzz number 3, I get back \"fizz\""
    },
    {
        "word_count": 62,
        "value": "WehaveusedtheTennisGamekataoverandoverinourcoachingsessions.Itseffectiveness comes from the fact that it does not require major design changes to vastly improve the code base. The code has tests, so we can focus on refactoring the implementation, starting with TennisGame1. Clean-up the code to a point where someone can read it and understand it with ease. You can find the repository here: Tennis refactoring kata by Emily Bache\u2076\u00b3"
    },
    {
        "word_count": 62,
        "value": "\u2022 Primitive Obsession \u2013 Duplicated Code \u2013 Shotgun Surgery \u2013 Divergent Change \u2013 Long Parameter List \u2022 Feature Envy / Inappropriate Intimacy \u2013 Lazy Class \u2013 Data Class \u2013 Middle Man \u2013 Data Clumps \u2013 Long Method \u2013 Large Class \u2013 Duplicated Code \u2013 Shotgun Surgery \u2013 Divergent Change \u2013 Long Parameter List \u2022 Message Chains \u2013 Data Clumps \u2013 Duplicated Code"
    },
    {
        "word_count": 62,
        "value": "Approval Tests is a testing framework conceived by Llewellyn Falco\u00b9\u2070\u2074 based on the idea of a Golden Master. It has a fluent API that allows for the definition of scenarios and verification of outputs. Typically, it will serialize the output of an execution that the human will mark as accepted. If anything in the code changes the output, the test will fail."
    },
    {
        "word_count": 62,
        "value": "I Googled it quickly and read a few random pages here and there, and I realized this wasn\u2019t a subject you can pick up easily. And when memorization is not among one\u2019s best qualities, it may appear to be a daunting task. A few months later, I found Head First Design Patterns\u00b9\u00b9\u2070 on the shelves in the office of my next job."
    },
    {
        "word_count": 62,
        "value": "\u2022 \u201cA Behavioral Notion of Subtyping,\u201d Barbara H. Liskov and Jeannette M. Wing\u00b9\u00b3\u2077 \u2022 \u201cCohesion,\u201d Glenn Vanderburg\u00b9\u00b3\u2078 \u2022 \u201cCovariance And Contravariance \u2013 A Simple Guide,\u201d Mike James\u00b9\u00b3\u2079 \u2022 \u201cData Abstraction and Hierarchy,\u201d Barbara Liskov\u00b9\u2074\u2070 \u2022 \u201cDesign by Contract,\u201d Wikipedia\u00b9\u2074\u00b9 \u2022 \u201cInflection point,\u201d Sandro Mancuso\u00b9\u2074\u00b2 \u2022 SOLID deconstruction slides\u00b9\u2074\u00b3 \u2022 \u201cSOLID Design Principles Explained \u2013 Dependency Inversion Principle with Code Examples,\u201d Thorben Janssen\u00b9\u2074\u2074"
    },
    {
        "word_count": 62,
        "value": "Look Look at this code from the point of view of Coupling and Cohesion. How does it look? Not really good, right? We have a long list of parameters that clearly make the method Coupling score pretty high for the methods Execute in class OrderFlow, ProcessInvoice in class InvoiceProcessor and ProcessOrder in class OrderProcessor. This is a classic example of Data Coupling."
    },
    {
        "word_count": 62,
        "value": "We will see in the following chapters that a business is made of interacting people, so while technical excellence is important, it is not enough, per se. We feel that real mastery encompasses this understanding. So let\u2019s begin this final part of the journey with one last technique which, in our experience, seamlessly enables the perspective shift of development toward the business."
    },
    {
        "word_count": 62,
        "value": "This logical, high-level view of the system is more important than the internals because it is the key to doing the right thing. And here the crucial point is finding the perfect balance between their independence and their interrelations, determining how to split them. What subtasks should be grouped together to form a bounded context, and what should be on their own?"
    },
    {
        "word_count": 61,
        "value": "This is a Leanpub book. Leanpub empowers authors and publishers with the Lean Publishing process. Lean Publishing is the act of publishing an in-progress ebook using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do. \u00a9 2018 - 2019 Pedro Moreira Santos, Marco Consolaro and Alessandro Di Gioia"
    },
    {
        "word_count": 61,
        "value": "We have organized and presented the information in this book in a logical sequence. We strongly feel that practice and exercise are the fundamental resources needed for this journey. That\u2019s why you will find code challenges and katas at every chapter. They were selected to stimulate critical thinking about the subjects, leading you on a fun and pragmatic step-by-step learning path."
    },
    {
        "word_count": 61,
        "value": "The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed; births and deaths occur simultaneously, and the discretemoment at which this happens issometimes called a tick. Each generationis a purefunction of the preceding one. The rules continue to be applied repeatedly to create further generations\u00bb."
    },
    {
        "word_count": 61,
        "value": "Each hole carries on from the last, like in a golf game. Your goal is to (as safely and efficiently as possible) refactor the Hole-X code to look like the Hole X+1 code. You must aim to do it in as few \u201cstrokes\u201d as possible. A stroke is essentially a change made to the code, and every stroke costs you points."
    },
    {
        "word_count": 61,
        "value": "From a product point of view, \u201cPhilip Crosby, a widely acclaimed \u2018guru\u2019 of Quality Management, defined quality as \u2018conformance to requirements\u2019. As simple and blunt as that.\u201d\u00b2\u2070\u2074 Hence, if we think of defects as things that diverge from requirements, we can deliver the best possible value to the business when we strive to eliminate any kind of bugs from our codebase."
    },
    {
        "word_count": 61,
        "value": "As we have seen, instances of bounded context should have a high degree of independence, so it is important to minimize the number of dependencies among them. However, as we have seen with the Connascence concept, it is also important to understand their kind of dependency in order to maximize the autonomy of each single bounded context in a Service-Oriented scenario."
    },
    {
        "word_count": 61,
        "value": "The human component of organizations is a crucial aspect, because it is the very deep reason behind their complexity. Human beings display non-linear behavior, so the difficult part of having them effectively work together doesn\u2019t reside in the \u201ctechnical\u201d side, but in the \u201csocial.\u201d We have come to theconclusionthatthedifficultiesofatechnicalnaturearemoreoftenthannotjusthidingproblems of the social nature, merely the side effects of the social consequences."
    },
    {
        "word_count": 61,
        "value": "However, ideas can be misunderstood and resisted, either unconsciously or wickedly planned - you decide. The original Agile idea has been twisted until it has become a mockery of itself. Replaced by a set of ceremonies, methodologies and self-referential facilitation techniques which, despite being easy to brand (and hence to certify), have very little to do with the original 12 principles."
    },
    {
        "word_count": 61,
        "value": "This single aspect is the most significant for the success of any team, well beyond technicalities or methodologies. In an environment composed of selfless personalities, a few experienced leaders\u00b3\u2070\u2070 areenoughtorapidlyspreadknowledgeandcommonunderstandingbecauseeveryoneisconstantly focused on giving, not on receiving. This enables the most wonderful feedback loop of all\u2026 everybody acquiring the missing skills and insights of others, allowing the team to grow constantly andsteadilyeveryday.Notonlydoindividualsbecomesbetter,butthepositiveformofcollaboration"
    },
    {
        "word_count": 61,
        "value": "He has lived in Portugal (Lisbon), Brazil (S\u00e3o Paulo), Spain (Madrid, Barcelona), Netherlands (Hilversum), Belgium (Gent) and currently he is based in the UK (London), where he focuses on educating and inspiring other developers. He has spent hundreds of hours in pairing sessions as wellascoachingandmentoringdevelopersatalllevelsofproficiency.Histutoringexperiencecovers almost every aspect of software development: programming basics, object-oriented and functional designprinciples,refactoringlegacyapplications,pragmatictestingpractices,architecturaldecisions and career development choices."
    },
    {
        "word_count": 60,
        "value": "In the first chapters of the book, we focus mostly on rules and then slowly move into principles and values. Be patient. Just imagine you are a young driver: in the beginning, you focus on following the rules, but once you are an experienced driver, you are able to extract your own rules from internalized principles and your core values."
    },
    {
        "word_count": 60,
        "value": "Tests are about assertions (ASSERT). For an assertion to be possible, we need to take an action on the code we are asserting (ACT). Sometimes, to take an action, we need to create the context to enable the action (ARRANGE). Organizing tests in arrange, act and assert blocks helps keep the tests clean and easy to read. Example using fizzbuzz:"
    },
    {
        "word_count": 60,
        "value": "Arabic Roman Arabic Roman 1 I 60 LX 2 II 70 LXX 3 III 80 LXXX 4 IV 90 XC 5 V 100 C 6 VI 200 CC 7 VII 300 CCC 8 VIII 400 CD 9 IX 500 D 10 X 600 DC 20 XX 700 DCC 30 XXX 800 DCCC 40 XL 900 CM 50 L 1000 M"
    },
    {
        "word_count": 60,
        "value": "Transformations at the top of the list are preferred to those on the bottom. It is better (or simpler) to change a constant into a variable than it is to add an if statement. So when making a test pass, favor the transformations that are simpler (top of the list) to those that are more complex (bottom of the list)."
    },
    {
        "word_count": 60,
        "value": "A source control tool enables us to safely and quickly revert to a known good point, provided we took small steps and committed frequently. If by any chance we find ourselves in a bad spot, we can revert back to a safe point and start over. Refactoring should be a series of small experiments that we can easily rollback from."
    },
    {
        "word_count": 60,
        "value": "The principle stated that a good module structure should be either open and closed. Closed, becauseclientsneedthemodule\u2019sservicestoproceedwiththeirowndevelopment,andonce they have settled on a version of the module should not be affected by the introduction of new services they do not need. Open, because there is no guarantee that we will include right from the start every service potentially useful to some client.\u201d"
    },
    {
        "word_count": 60,
        "value": "1 <input type=\"checkbox\" name=\"transport\" value=\"<%= BIKE %>\" /> 2 I travel by bike <br /> 3 <input type=\"checkbox\" name=\"transport\" value=\"<%= CAR %>\" /> 4 I travel by car <br /> 5 <input type=\"checkbox\" name=\"transport\" value=\"<%= TRAIN %>\" /> 6 I travel by train <br /> 7 <input type=\"checkbox\" name=\"transport\" value=\"<%= BUS %>\" /> 8 I travel by bus <br />"
    },
    {
        "word_count": 60,
        "value": "Theideaofimplementingthesimplestthingthatcanworkanddeferringimportantdesigndecisions is at the heart of classic TDD. The refactoring phase in classic TDD is vital; hence, good refactoring skills are a key to its success. So the understanding about code smells, SOLID, Cohesion/Coupling and Connascence is a major advantage in order to change the shape of the code before the \u201cmess\u201d turns into code that\u2019s too difficult to refactor."
    },
    {
        "word_count": 60,
        "value": "If we look at software development from a value stream perspective, rather than simply looking at these activities as a process, we can emphasize the creation of customer value. As we have learned from Deming, it\u2019s all about improving the whole process, not just the parts \u2013 to minimize waste and ensure the customer gets exactly what they asked for."
    },
    {
        "word_count": 60,
        "value": "By one p.m. we had built our full, high-level domain knowledge with all of our questions answered. That allowed us to assemble the stories of the backlog into a logical order. Only implementation details remained buried in the old requirements, but there was time for the details. Half a day of user story mapping, and we were ready to start!"
    },
    {
        "word_count": 60,
        "value": "The workshop requires a big enough space where a long paper roll (minimum 8 meters) can be attached to the wall, where there is enough room for the people involved to walk up and down near the wall, but also at distance for a better holistic view. Seats should not be easily available, in order to stimulate participation and focus."
    },
    {
        "word_count": 60,
        "value": "Sometimes just reading a book on your own is not enough. If you want to get feedback on your progress, discuss the ideas presented in the book, get help on a specific topic, or have one of us coach you or your team, we are more than happy to help. We have multiple options available targeted to organizations and individuals."
    },
    {
        "word_count": 59,
        "value": "So, is the sub-set of XP practices (TDD, pair programming, refactoring and simple design) our core practices? Could these practices help prevent tech debt from accumulating? Simple design and refactoring look promising. Let\u2019s label them as technical design practices. What about pair programming and TDD? They belong in a slightly different category. Let\u2019s label them as technical feedback practices."
    },
    {
        "word_count": 59,
        "value": "No matter what, the TV broadcast would go on air at the scheduled time, so software had to be ready. When deadlines were approaching, I remember drinking too many coffees over long nights, pairing with my friend Rui to deliver in time. When we were too exhausted to continue, we would take turns, having a nap under the desks."
    },
    {
        "word_count": 59,
        "value": "The Message Chains code smell represents Coupling (covered later in this book) and also leads to the Shotgun Surgery code smell or Divergent Change code smell. We must avoid this code smell like the plague. In our coaching sessions, we use a checklist to help avoid this smell. This code smell is also known as the Law of Demeter."
    },
    {
        "word_count": 59,
        "value": "Gather together those things that change for the same reason, and separate those things that change for different reasons. This is another aspect of the Single Responsibility Principle. In short, it says thatasubsystem,module,class,orevenafunction,shouldnothavemorethanonereasontochange. Peter H. Salus, summarizing a portion of the Unix philosophy, wrote, \u201cWrite programs that do one thing and do it well. Write programs to work together.\u201d\u00b9\u00b2\u2079"
    },
    {
        "word_count": 59,
        "value": "He couldn\u2019t see anything evidently wrong either. We decided to investigate further, opening the deployment scripts, and there we found the culprit: more Connascence at deployment level! For every new message handled, they had to add a step in the deployment process, instructing the script to create a new subscription for it, with a dependency on the message type.\u201d"
    },
    {
        "word_count": 59,
        "value": "I personally love the four elements of simple design. It is the highest level set of principles, more like a set of goals to pursue with a defined priority than rigid rules to apply or break. This meshes better with my personality, but it also works really well when you have to make trade-off decisions while refactoring the design."
    },
    {
        "word_count": 59,
        "value": "\u201cThe user story is about the conversation that ideally happens between the people that want the product and those that are going to build the product. It is about the conversation and not about how much detail we can put into a user story so that someone else can just read it, try to interpret it and build it.\u201d\u00b2\u00b9\u2070"
    },
    {
        "word_count": 59,
        "value": "This technique has proved very useful for us in the past. Sometimes, well before the fifth why, something magical happens; the business domain expert, after a moment of reflection, answers, \u201cThat\u2019s a good question! I don\u2019t know it myself. Let me find out more\u2026\u201d That is the moment we are contributing to crunch the knowledge and increase shared understanding."
    },
    {
        "word_count": 59,
        "value": "Too much Cohesion: Keeping every task in one big bounded context would mean entangling the system, making it hard to change and scale, similar to the God class and Divergent Change code smells. Too much Coupling: Splitting every task into its own bounded context would mean moving that complexity over the communication between them, generating an explosion of dependencies."
    },
    {
        "word_count": 59,
        "value": "In the end, we are not just part of a team or an organization. As IT professionals we are all part of a wider community connected by its general knowledge and understanding. If you think about it, our profession is based on the knowledge and understanding of the people of the past who were kind enough to share it."
    },
    {
        "word_count": 58,
        "value": "These are the main technical subjects you will encounter during the journey we have organized for you. If you follow the planned schedule, you should find the learning path quite smooth, always building upon the previous steps. Feel free to wander away from the path and use the book as a quick reference manual for a particular subject."
    },
    {
        "word_count": 58,
        "value": "\u2022 X always goes first. \u2022 Players alternate placing X\u2019s and O\u2019s on the board. \u2022 Players cannot play on a played position. \u2022 A player with three X\u2019s or O\u2019s in a row (horizontally, vertically, diagonally) wins. \u2022 If all nine squares are filled and neither player achieves three in a row, the game is a draw."
    },
    {
        "word_count": 58,
        "value": "1. Gradually create a fake input for the system and persist it on a file. Hint: Look out for patterns in input and output. 2. Create a test that loads the fake input, injects it into the system, and captures and persists the output. 3. Measure the test coverage. Repeat until coverage is close to or at 100%."
    },
    {
        "word_count": 58,
        "value": "\u00b2\u2075\u2075Wikipedia, \u201c[T]he CAP theorem implies that in the presence of a network partition, one has to choose between consistency and availability.\u201d https://en.wikipedia.org/wiki/CAP_theorem CAP theorem is relevant because the nature of the web is different from local networking and more similar to network partitioning, thus the choice between consistency and availability is something to consider in our web development."
    },
    {
        "word_count": 58,
        "value": "Typical discussions about BDD frameworks arose, but the process to use a new framework for the team would have to go through bureaucracy and middle management \u2013 something we wanted to avoid because time wasn\u2019t on our side. Plus, we shared mixed feelings about existing frameworks, and we thought that the effort might not be worth the value."
    },
    {
        "word_count": 58,
        "value": "The main problem becomes evident when we consider that the value stream of an organization crosses all its silos; often the output of one department is the input for the next one downstream. \u201cThe obvious evidence [of the problem] is that one single source of knowledge won\u2019t be enough to solve problems that are spanning across multiple areas.\u201d"
    },
    {
        "word_count": 58,
        "value": "Caring about the problems, diversity in background, and a positive, inquisitive attitude are crucial. In fact, EventStorming provides a solid background for meaningful conversations across silo boundaries and an adaptable format that allows a collaboration across multiple disciplines. This means that business experts, Lean experts, service designers and software developers could all be part of the same conversation."
    },
    {
        "word_count": 58,
        "value": "1 #define CATCH_CONFIG_MAIN 2 3 #include \"catch.hpp\" 4 #include \"../src/Fibonacci.hpp\" 5 6 TEST_CASE(\"Calculate fibonacci number for index\", \"[Fibonacci]\") 7 { 8 REQUIRE(Fibonacci(0) == 0); 9 REQUIRE(Fibonacci(1) == 1); 10 REQUIRE(Fibonacci(2) == 1); 11 REQUIRE(Fibonacci(3) == 2); 12 REQUIRE(Fibonacci(3) == 2); 13 REQUIRE(Fibonacci(4) == 3); 14 REQUIRE(Fibonacci(5) == 5); 15 REQUIRE(Fibonacci(6) == 8); 16 REQUIRE(Fibonacci(7) == 13); 17 }"
    },
    {
        "word_count": 58,
        "value": "Cohesion Cohesion Cohesion One dot per line. Message Chains Coupling Don\u2019t abbreviate. NA Cohesion Keep all entities small. Large Class / Long Method / Cohesion Long Parameter List No classes with more than two Large Class Cohesion instance variables. No getters / setters / properties. NA Coupling All classes must have state, no static methods, no utility classes."
    },
    {
        "word_count": 57,
        "value": "Refactoring is missing from the above rules. We feel that TDD without refactoring is just half of the game. For the time being, in the refactoring phase just look for duplication. But wait until you are sure you have a duplication pattern. Avoid removing duplication too soon, as this may lead you to extract the wrong abstractions."
    },
    {
        "word_count": 57,
        "value": "Write another failing test and (ideally) stay on the same transformation or, if required, move to the next one on the table. Most of the time, we do not need to reach the end of the TPP table to solve a problem. This is a good sign. It means we solved a problem using only simple transformations."
    },
    {
        "word_count": 57,
        "value": "\u2022 You cannot have method arguments (except in constructors) that are collections (array, hash table, set, list, \u2026). \u2022 Create a class for all collections, even if a collection is just a private member variable in a class. This gives collection behaviors a home. \u2022 Any class that contains a collection should contain no other member variables."
    },
    {
        "word_count": 57,
        "value": "It may be that we have tests, but they are coupled with the implementation in a way that it is not possible to change the implementation without breaking the tests. In this case, we start refactoring by the tests, and once we have tests that are not coupled with the implementation, we can start refactoring the implementation."
    },
    {
        "word_count": 57,
        "value": "Once upon a time, a friend who was very skilled on the subjects in this book went to a job interview for a consultancy in a large company. They gave him an exercise about refactoring some legacy code. He created a \u201cseam\u201d and used it for solving the exercise in a way they have never seen before."
    },
    {
        "word_count": 57,
        "value": "\u2022 Tests should test one thing only. \u2022 Create more specific tests to drive a more generic solution (triangulate). \u2022 Give your tests meaningful names (behavior/goal-oriented) that reflect your business domain. \u2022 See the test fail for the right reason. \u2022 Ensure you have meaningful feedback from failing tests. \u2022 Keep your tests and production code separate."
    },
    {
        "word_count": 57,
        "value": "Let\u2019s go over a quick example. Imagine we are building a microwave oven class. The outside-in flow starts with the sketching of the class we are going to build first, which in this case is the MicrowaveOven class. Let\u2019s leave tests aside for a moment and use instead the Main method to start, at the outermost boundary."
    },
    {
        "word_count": 57,
        "value": "don\u2019t have to take design decisions without feedback. Outside-In TDD requires a deeper knowledge of design since we don\u2019t get the feedback loop of the \u201cmess,\u201d but it can be a lot more efficient and focused on the business. In the end, \u201ccontext is king,\u201d and we should use the most appropriate technique required by the context."
    },
    {
        "word_count": 57,
        "value": "\u00b2\u2075\u2070\u201cThe key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be.\u201d \u00b2\u2075\u00b9\u201cYou will never reach a complete explanation or understanding of everything, but your understanding increases the larger the system you comprehend. The knowledge increases the smaller the element you comprehend.\u201d"
    },
    {
        "word_count": 56,
        "value": "Use the Rule of Three to tackle duplication. If you need something once, build it. If you need something twice, pay attention. If you need it a third time, abstract it. Keep in mind that duplication is easier to tackle than the wrong abstractions. This is the reason why we want to see duplication three times."
    },
    {
        "word_count": 56,
        "value": "Use IDE-automated refactoring to minimize text editing and risk \u2013 provided you trust your IDE automated refactors. Most IDEs try to keep your code compiling, and if they cannot achieve this, they warn you before you make the refactor move. Also, usually IDEs provide the Undo feature for refactors, so if you break something, just undo."
    },
    {
        "word_count": 56,
        "value": "Change the class ShoppingCart. The class should be able to handle multiple items instead of the single one it currently supports. Run the tests every time you make a change. The tests must not be red at any time. No compile-errors, no failures. Commit. Refer to the Parallel Change code by Pawel Duda and Carlos Bl\u00e9.\u2076\u2075"
    },
    {
        "word_count": 56,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. \u2022 Apply object calisthenics to improve your design. \u2022 Stay on the green while refactoring. \u2022 Use the IDE to refactor quickly and safely. \u2022 Refactor code for readability/understandability first. \u2022 Look out for code smells and refactor your code accordingly (New habit)."
    },
    {
        "word_count": 56,
        "value": "Provide an interface for instantiating Abstract Factory families of related or dependent objects without having to specify their concrete classes. Define the interface for object creation, Factory Method but delegate the decisions about instantiation to the subclasses. Separate construction of an object from Builder its representation so that the same construction process can create different representations."
    },
    {
        "word_count": 56,
        "value": "W e have solved the Connascence of Position on the NotificationSystem class, but what about the new Notification class? Essentially, we have now just pushed the problem to the collaborator. How can we build the notification without the same type of Connascence? In such a case, a simplified version of the builder pattern can be helpful."
    },
    {
        "word_count": 56,
        "value": "In my opinion, the key element of the set is the focus on expressivity, considered one of the fundamental properties of good design. While the other three elements are very important, and we have seen many practices and principles that support them, I feel that there is generally not enough consideration about code expressing its intentions."
    },
    {
        "word_count": 56,
        "value": "Double loop TDD introduces the concept of acceptance tests in the Red -> Green -> Refactor classic TDD loop. The idea is to have a high-level test that covers a business requirement. As the name implies, we add a second loop to our TDD loop. This is an outer loop and also has Red -> Green"
    },
    {
        "word_count": 56,
        "value": "When starting a new feature, we begin by writing an acceptance test. This test will inevitably fail since we are lacking an implementation. Before we move on, we need to make sure our acceptance test is failing because it doesn\u2019t meet the acceptance criteria. This usually forces us to define the external API of our system."
    },
    {
        "word_count": 56,
        "value": "company | shares | current price | current value | last operation Old School Waterfall Software LTD | 500 | $5.75 | $2,875.00 | sold 500 on 11/12/2018 Crafter Masters Limited | 400 | $17.25 | $6,900.00 | bought 400 on 09/06/2016 XP Practitioners Incorporated | 700 | $25.55 | $17,885.00 | bought 700 on 10/12/2018"
    },
    {
        "word_count": 56,
        "value": "\u201cStory maps solve one of the big problems with using user stories in agile development \u2013 that\u2019s losing sight of the big picture. Story maps look at a product or feature from the users\u2019 perspective. Building a story map asks the story mapper to think through the experience of using the product from their users\u2019 perspective.\u201d\u00b2\u2074\u2075"
    },
    {
        "word_count": 56,
        "value": "The level of focus and commitment were outstanding. We had many discussions as a team, but decisions were always made by consensus in a matter of minutes. We trusted the expertise that each member gave to the service of the team, always willing to try out something suggested by someone who knew more about the matter."
    },
    {
        "word_count": 56,
        "value": "We built a fully functional, highly effective, sociotechnical System, which surpassed by far the sum of the skills of the individuals. If you think about it, that is one of the main general properties of Systems. As we learned from Deming, 95% of our performances depended on that.\u00b2\u2079\u2076 That was the real secret of Team C."
    },
    {
        "word_count": 56,
        "value": "It is particularly useful in any organization that wants to innovate, especially if it doesn\u2019t know how. It has already found its way into startups, large financial institutions, well-known technology companies, and many more different environments. For example, last year a group in the Canadian public sector won two prestigious national innovation awards by using it."
    },
    {
        "word_count": 56,
        "value": "Whether the goal is to write a piece of critical software for the organization, or to design the next implementation of a business flow for a startup, or to redesign a key business process for an existing line of business, this means having a clear, shared understanding of the problem landscape and of the possible solutions.\u201d"
    },
    {
        "word_count": 55,
        "value": "\u2022 Consider collections as primitives; this way any behavior specific to your collection will be attracted to a single place. \u2022 Filters will become part of the class. \u2022 Joins or special rules applied to collection elements will be contained within the class. \u2022 Changing the internal representation won\u2019t affect the clients that improve decoupling."
    },
    {
        "word_count": 55,
        "value": "For example, if we need to represent money, it\u2019s very tempting to use an int or a float or a decimal primitive type. This looks very benign. When we need to refer to money, we represent it with a primitive type. But now the business needs money to be in multiple currencies. How many places"
    },
    {
        "word_count": 55,
        "value": "At first, they wanted to reject the application. It was only when someone pointed out that this was a legitimate refactoring technique that they changed their mind and started the consultancy work. After six months working there, they appreciated his work so much that they tried to hire him permanently (without success, by the way)."
    },
    {
        "word_count": 55,
        "value": "\u2022 Organize your unit tests to reflect your production code (similar project structure). \u2022 Organize your test in arrange, act and assert blocks. \u2022 Write the assertion first and work backward. \u2022 Write fast, isolated, repeatable and self-validating tests. \u2022 Consider using object calisthenics to drive design decisions. \u2022 Consider adding tests to legacy code."
    },
    {
        "word_count": 55,
        "value": "1. On O itself. 2. On objects contained in attributes of itself (O) or a superclass (of O). 3. On an object that is passed as a parameter to the Method M. 4. On an object that is created by the Method M. 5. On an object that is stored in a global variable (outdated)."
    },
    {
        "word_count": 55,
        "value": "It is important to notice the relevance of the Law of Demeter for theFanIN and FanOUT impact on Coupling for message passing. While they potentially could add a big Coupling component to the system, respecting the Law of Demeter has the effect of limiting that impact, keeping it low, hence making Message Coupling very effective."
    },
    {
        "word_count": 55,
        "value": "When a method combines two functions just because they access the same data fields to execute. A component groups elements because they use the same input type or generate the same output type. This is a weak reason to group elements in the same component as they may perform very different functions in the system."
    },
    {
        "word_count": 55,
        "value": "Code smells Degree Cohesion / Coupling Reason Alternative classes with different interfaces Comments Data Class Data Clumps Dead Code Divergent Change Duplicated Code Feature Envy Inappropriate Intimacy Large Class Lazy Class Long Method Long Parameter List Message Chains Middle Man Parallel Inheritance Hierarchies Primitive Obsession Refused Bequest Shotgun Surgery Speculative Generality Switch Statements Temporary Field"
    },
    {
        "word_count": 55,
        "value": "In object-oriented programming, the Dependency Inversion Principle refers to a specific form of decouplingwhereconventionaldependencyrelationshipsestablishedfromhigh-level,policy-setting modules to low-level, dependency modules are inverted for the purpose of rendering high-level modules independent of the low-level module implementation details. To achieve that, you need to introduce an abstraction that decouples the high-level and low-level modules from each other. So:"
    },
    {
        "word_count": 55,
        "value": "This example is easy to solve for languages like Ruby or C# because when we call the method, we can use the named parameter construct to decouple from the order of the parameters. In other languages, we find that using custom types representing the meaning of the parameter is a valid way to solve it:"
    },
    {
        "word_count": 55,
        "value": "1 <input type=\u2019checkbox\u2019 name=\u2019transport\u2019 value=\u20191\u2019 /> 2 I travel by bike <br /> 3 4 <input type=\u2019checkbox\u2019 name=\u2019transport\u2019 value=\u20192\u2019 /> 5 I travel by car <br /> 6 7 <input type=\u2019checkbox\u2019 name=\u2019transport\u2019 value=\u20193\u2019 /> 8 I travel by train <br /> 9 10 <input type=\u2019checkbox\u2019 name=\u2019transport\u2019 value=\u20194\u2019 /> 11 I travel by bus <br />"
    },
    {
        "word_count": 55,
        "value": "I was still in Italy the first time I was responsible for the development of a very important project for a successful startup. The company wanted to improve their systems for scaling purpose. They had an old system written in VB, which wasn\u2019t optimized for the always increasing volume of items coming into the warehouse."
    },
    {
        "word_count": 55,
        "value": "It is not necessary to use heavyweight frameworks to achieve this as long as we keep the scenario specifications well-sorted and separate from the implementation. Business people are not intimidated if we use an underscore instead of a blank space in a method name. It is the complexity of the implementation that scares them (rightly)."
    },
    {
        "word_count": 55,
        "value": "\u00b2\u2075\u00b2Eric Evans, Domain-Driven Design: Tackling Complexity in the Heart of Software, https://www.goodreads.com/book/show/179133. Domain_Driven_Design \u00b2\u2075\u00b3Gene Kim, et al., The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations, https://www.goodreads.com/book/show/26083308-the-devops-handbook \u00b2\u2075\u2074Nick Tune, \u201cStrategic Domain Driven Design: What are the 3 virtues of modularity and how do you achieve them with Strategic DDD?\u201d http://www.ntcoding.co.uk/speaking/talks/strategic-domain-driven-design/agile-2018-san-diego-august-2018"
    },
    {
        "word_count": 55,
        "value": "\u201cThe First Way enables fast left-to-right flow of work from Development to Operations to the customer. In order to maximize flow, we need to make work visible, reduce our batch sizes and intervals of work, build in quality by preventing defects from being passed to downstream work centers, and constantly optimize for the global goals.\u201d\u00b2\u2075\u2076"
    },
    {
        "word_count": 55,
        "value": "So, one morning we invited all the relevant stakeholders (users, BAs, etc.) in the same room with our team for an epic story map session. We had all the key people there ready to answer all our questions. All BAs, including those from other teams, were also present so they could clarify their understanding, too."
    },
    {
        "word_count": 55,
        "value": "Teaching by example is so powerful; after the second week, the BA and tester didn\u2019t need to ask us developers much anymore. They were pairing like seasoned XP practitioners, cracking on more requirements and acceptance criteria than we could handle, with a level of clarity and attention to detail I have hardly found again afterward."
    },
    {
        "word_count": 55,
        "value": "I explained a bit of my story. \u201cWhen I was a kid, I played roller hockey semi-professionally for 12 years for the junior team in my town, which happens to be in the major Italian league. We even won the Italian championship in 1986. I gave it up only when I enrolled at the university\u2026.\u201d"
    },
    {
        "word_count": 55,
        "value": "That\u2019s exactly the reason we were motivated to write this book with six hands; we have enjoyed working together so much as a team of coaches and developers in the past that sharing this vision and experiencing this magic was a no-brainer, despite having to move out of our coding comfort zone as a team."
    },
    {
        "word_count": 55,
        "value": "Thebestpartoftheexperienceofcraftingthisbookhasbeengettingtogetherforremotemobwriting sessions. We were always pleasantly surprised by the chain reaction of ideas (and motivation) coming out of it. We discussed a lot, sometimes very deeply and from different positions. But there was always the belief and trust in each other and the opportunities to change our mind when new relevant elements arose in matters."
    },
    {
        "word_count": 55,
        "value": "Thisiswhyitiseasiertohaveaneffective,smallteamratherthenalargeone.Thisiswhywewantto keep our classes small, we break user stories down into the smallest deliverable units, and we strive to reduce the responsibility of our bounded contexts. In turn, this limits the size of our services. Limiting the complexity of the system, which means striving for low entropy, also maximizes the potential use of deductive rationality."
    },
    {
        "word_count": 55,
        "value": "So,ifwehavetorelyoninductiverationalityusingsubjectivebeliefsasArthursaid,weshouldshare as a team (and as an organization as well) a set of principles and values. These should be simple enough to be widely understood, but strong enough to allow us to work out decisions limiting the subjectivity. In this way, the decisions have a better chance to be correct and reaching consensus become simpler."
    },
    {
        "word_count": 55,
        "value": "We have seen that building a software system is an activity with the goal of automating the information flow to support the business\u2019s value stream. This means that a software system should exist to support the business processes and should be shaped around them, be at their service, optimize them and make them more effective."
    },
    {
        "word_count": 54,
        "value": "Tweet This Book! Please help Pedro Moreira Santos, Marco Consolaro and Alessandro Di Gioia by spreading the word about this book on Twitter! The suggested hashtag for this book is #AgileTechPraxis. Find out what other people are saying about the book by clicking on this link to search for this hashtag on Twitter: #AgileTechPraxis"
    },
    {
        "word_count": 54,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. \u2022 Apply object calisthenics to improve your design. \u2022 Stay on the green while refactoring. \u2022 Use the IDE to refactor quickly and safely. \u2022 Refactor code for readability/understandability first. \u2022 Look out for code smells and refactor your code accordingly."
    },
    {
        "word_count": 54,
        "value": "Glenn Vanderburg said, \u201cThis is also why we refer to a sound line of reasoning, for example, as coherent.Thethoughtsfit,theygotogether,theyrelatetoeachother.Thisisexactlythecharacteristic of a class that makes it coherent: the pieces all seem to be related, they seem to belong together, and it would feel somewhat unnatural [\u2026] to pull them apart. Such a class exhibits cohesion.\u201d"
    },
    {
        "word_count": 54,
        "value": "Hence, both high-level and low-level modules depend on the abstraction. The design principle does not just change the direction of the dependency, as you might have expected from its name. It splits the dependency between the high-level and low-level modules by introducing an abstraction between them. So in the end, you get two dependencies:"
    },
    {
        "word_count": 54,
        "value": "1 LOST IN SHOREDITCH. 2 YOU ARE STANDING AT THE END OF A BRICK LANE BEFORE A SMALL BRICK BUILDING CALLED THE\\ 3 OLD TRUMAN BREWERY. 4 AROUND YOU IS A FOREST OF RESTAURANTS AND BARS. A SMALL STREAM OF CRAFTED BEER FLOWS\\ 5 OUT OF THE BUILDING AND DOWN A GULLY. 6 >"
    },
    {
        "word_count": 54,
        "value": "Once the acceptance criteria are well-defined using examples, it becomes trivial to transpose them into a suite of Acceptance Tests. Furthermore, using an Outside-In approach, the team can drive the development of the scenarios, using the tests as a feedback for the work yet to be done in order to consider the story implemented."
    },
    {
        "word_count": 54,
        "value": "So we can think of it as a slightly more granular explanation of the \u201cflow of value\u201d of the Business Model Canvas, transposed in a temporal sequence of activities necessary to design, produce and deliver the value propositions. An organization will usually have many of them, and they will often have independent, changing pace."
    },
    {
        "word_count": 54,
        "value": "There is a vast amount of literature about value streams and value stream mapping, but we feel that the key concepts to understand aren\u2019t enhanced with more detail. From this point of view, the idea of the Lean value stream as a diagrammatic representation of the sequence of activities is the key starting point."
    },
    {
        "word_count": 53,
        "value": "Please do not take the Transformation Priority Premise table literally. This is a starting point. Adapt this table to your style, your programming language and environment. For the moment we ask you to take it as is, but once you feel comfortable with it, we encourage you to shape it to your context."
    },
    {
        "word_count": 53,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. \u2022 Apply object calisthenics to improve your design. \u2022 Stay on the green while refactoring. \u2022 Use the IDE to refactor quickly and safely. \u2022 Refactor code readability/understandability first. \u2022 Look out for code smells and refactor your code accordingly."
    },
    {
        "word_count": 53,
        "value": "The subject of Design Patterns is controversial.\u00b9\u00b9\u00b9 We debated whether or not to include it in this journey. We included it because we recognize the immense validity of the solutions that they lead to when applied correctly and the value they bring in certain technical discussions about how to solve a coding task."
    },
    {
        "word_count": 53,
        "value": "This exercise is meant to help internalize the implementation of a few patterns and prove that there are many ways to use patterns to solve a problem. Realistically, you should derive the pattern choice by the functional context and by how your code is meant to interact with other parts of the system."
    },
    {
        "word_count": 53,
        "value": "\u201cThe returns for refactoring are not linear. Usually there is a marginal return for a small return and the small improvements add up. They fight entropy and they are the frontline protection against a fossilized legacy. But some of the most important insights come abruptly and send a shock through the project. [\u2026]"
    },
    {
        "word_count": 53,
        "value": "Contrary to classic TDD, we don\u2019t wait to create a \u201cmess\u201d to extract sub-components; we use mocks to sketch them as soon as we write a test. Where in classic TDD most design decisions happened in the refactoring phase, in Outside-In TDD, the design decisions about public interfaces happen in the red stage."
    },
    {
        "word_count": 53,
        "value": "The treasures we can find in the cave are in the form of gold coins. They are collected automatically the first time the player moves to a location with gold or the first time the player opens an item containing gold. The total amount of gold retrieved can be seen in the bag."
    },
    {
        "word_count": 53,
        "value": "ThisiswhereDanNorth\u2019sBehavior-DrivenDevelopmentrevealsallitspower,providingastructure for capturing the relevant aspects of that conversation. This has the consequence of enabling great things to happen, like the automation of the proof for business correctness, the establishment of a shared business-related vocabulary (the ubiquitous language), and gathering data about the nature of bugs for a team to improve its performance."
    },
    {
        "word_count": 53,
        "value": "\u201cSoftwareprojectsfailwhenyoudon\u2019tunderstandthebusinessdomainyouareworkingwithinwell enough.Typingisnotthebottleneckfordeliveringaproduct;codingistheeasypartofdevelopment. [\u2026] [C]reating and keeping a useful software model of the domain that can fulfill business-use cases is the difficult part. However, the more you invest in understanding your business domain the better equipped you will be when you are trying to model it in software to solve its inherent business problems.\u201d\u00b2\u00b3\u2076"
    },
    {
        "word_count": 53,
        "value": "\u201cOn many software projects, the developers only get the lower tiers of an impact map \u2013 what the businessthinkstheyneedandhowtheythinkthedevelopersshouldachieveit.Withanimpactmap, though, you can unwind their assumptions and find out what they really want to achieve. And then you can use your technical expertise to suggest superior alternatives that they would never have thought of.\u201d\u00b2\u2074\u00b2"
    },
    {
        "word_count": 53,
        "value": "details. Then pictures must be taken, edited, linked to the item and the available stock should be assessed. These subtasks generate and need data to be completed, but the completion of each one of them is not relevant outside the bounded context; therefore, its complexity should be completely encapsulated inside the bounded context."
    },
    {
        "word_count": 53,
        "value": "\u201cBoundedcontextsaredescribedinthebookDomain-DrivenDesignbyEricJ.Evans.Theideaisthat developers should be able to understand and update the code of a service without knowing anything about the internals of its peer services. Services interact with their peers strictly through APIs [and messagequeues\u2013weadd]andthusdon\u2019tsharedatastructures,databaseschemata,orotherinternal representations of objects. Bounded contexts ensure that services are compartmentalized and have well-defined interfaces, which also enables easier testing.\u201d\u00b2\u2075\u00b3"
    },
    {
        "word_count": 53,
        "value": "\u00b3\u00b9\u00b3BoundedrationalityisaconceptdefinedbyHerbertSimon,winneroftheNobelPrizeinEconomicsin1978andtheTuringAwardin1975. It states that \u201cHuman beings make quite reasonable decisions, but only based on the information they have.\u201d The idea is that when individuals make decisions, their rationality is limited by the tractability of the decision problem, the cognitive limitations of their minds, and the time available to make the decision. https://en.wikipedia.org/wiki/Bounded_rationality, https://en.wikiquote.org/wiki/Bounded_rationality"
    },
    {
        "word_count": 53,
        "value": "His professional life changed when he came across Agile methodologies, especially eXtreme Programming (XP). He likes concise, expressive, and readable code as well as making existing solutions better when needed. He is always trying to learn better ways of designing asynchronous distributed architectures and crafting software, in either an object-oriented or functional style."
    },
    {
        "word_count": 52,
        "value": "Six degrees of freedom (6DoF) refers to the freedom of movement of a rigid body in three- dimensional space. Specifically, the body is free to change position as forward/backward (surge),up/down(heave),left/right(sway)translationinthreeperpendicularaxes,combined with changes in orientation through rotation about three perpendicular axes, often termed yaw (normal axis), pitch (transverse axis), and roll (longitudinal axis)."
    },
    {
        "word_count": 52,
        "value": "Fizz Buzz \u2013 partial walkthrough Let\u2019s first pick the behavior where numbers not divisible by 3 or 5 are returned as a string. Let\u2019s start with number 1. Write a new failing test. When I fizzbuzz number 1, I get back a string representing it Use fake it as an implementation strategy."
    },
    {
        "word_count": 52,
        "value": "As with theUnconditional -> conditionaltransformation, this is another gear-shifting transforma- tion. We introduce the concept of iteration\u2074\u2076 by using recursion. We want to use tail recursion\u2074\u2077 even if our language compiler does not optimize for it. Grossly oversimplifying, the recursive function call should be the last thing we execute in an expression."
    },
    {
        "word_count": 52,
        "value": "\u2022 Itself \u2022 Objects contained in attributes of itself or a super class. \u2022 An object that is passed as a parameter to the method. \u2022 An object that is created by the method. \u2022 An object that is stored in a global variables. We don\u2019t use global variables, do we? :)"
    },
    {
        "word_count": 52,
        "value": "Remember that exceptions can be hidden return values; the same conformance rules still apply. Do not throw exceptions from derived classes that are not the same type or subtypes as exceptions thrownbythebaseclass.RemembertheRefusedBequestcodesmell?Inheritanceisa\u201coneofakind\u201d relationship where subclasses are specializations of the base classes; they don\u2019t change the behavior \u2013 they make it more specific."
    },
    {
        "word_count": 52,
        "value": "Strength is the likelihood that Connascence requires compensating changes in connascent elements and how hard it would be to make those changes. The stronger the form of Connascence, the more difficult and costly it would be to refactor the elements in the relationship. We should try to use only the weakest forms."
    },
    {
        "word_count": 52,
        "value": "Connascence of Position occurs when multiple components must be adjacent or must appear in a particular order \u2013 often when passed within a positional structure like an array or a tuple. It is the strongest form of static Connascence and must be carefully avoided, especially for higher degrees. Let\u2019s see an example."
    },
    {
        "word_count": 52,
        "value": "Seeing matters in this way allows us to think to System Entropy in a much more pragmatic way. If the entropy is related to the \u201cnumber of possible states of a System,\u201d a simple object with only primitive fields is calculable as a combinatorial function of all possible values of its components."
    },
    {
        "word_count": 52,
        "value": "TRUMAN BREWERY. AROUND YOU IS A FOREST OF RESTAURANTS AND BARS. A SMALL STREAM OF C\\ 4 RAFTED BEER FLOWS OUT OF THE BUILDING AND DOWN A GULLY. 5 > LOOK N 6 I CAN SEE A BRICK BUILDING WITH A SIGN SAYING \"TRUMAN BREWERY\" AND A WOODEN WHITE DO\\ 7 OR."
    },
    {
        "word_count": 52,
        "value": "Transform the following unstructured requirements into BDD style specification. Ideally, it should be done using acceptance criteria in a Given/When/Then structure and within an automation suite in order to be part of a continuous automation environment. If you feel like it, you can even carry on and implement them, using Outside-In ATDD!"
    },
    {
        "word_count": 52,
        "value": "In order to keep the overall entropy of the information system of the whole organization under control, the business must correctly separate and group these activities into independent but interconnected subsystems and optimize their communication. This is a crucial point. In the world of Domain-Driven Design, these subsystems are called bounded contexts."
    },
    {
        "word_count": 52,
        "value": "The answer is that it depends on the overall context \u2013 there is no silver bullet here either, sorry! But we have principles that can help with the inductive process of making decisions. For instance, we can see here the same forces in place that we have seen in Cohesion and Coupling:"
    },
    {
        "word_count": 52,
        "value": "The foundation for doing a great job was there: everyone in the team trusted each other, and we knew that these little fears were just an indication that they cared to be as effective as they could, focused on the common goal before anything else. With these premises we could go far."
    },
    {
        "word_count": 52,
        "value": "Oneofthegreatthingsaboutworkinginsmallercompanies\u2013especiallyingrowingstartups\u2013isthat you can have deep, human contact with everybody in the business, including key leaders driving the vision into execution. These people usually have extensive experience and knowledge. When they are also servant-leaders, it\u2019s a real pleasure hanging out with them because there is always something to learn, even from unexpected situations."
    },
    {
        "word_count": 52,
        "value": "From this point of view, PopcornFlow introduces, sustains, and accelerates continuous innovation and change, promoting ultra-rapid experimentation to help the decision-making process under uncertainty. It consists of two parts: an iterative decision cycle based on seven visualizable steps (which give the \u201cPopcorn\u201d in PopcornFlow its acronymic name) and a set of principles."
    },
    {
        "word_count": 51,
        "value": "This organization had a strict code review policy. Once a developer finished his task, he would call someone senior to walk through all the code he had written. Inevitably, the reviewer would find flaws, things he did not agree with, and you were required to make all the changes to comply."
    },
    {
        "word_count": 51,
        "value": "\u2022 \u201cLlewellyn\u2019s strong style pairing,\u201d Llewellyn Falco\u00b9\u2079 \u2022 \u201cMob programming and strong-style pairing,\u201d Emily Bache\u00b2\u2070 \u2022 \u201cPair programming,\u201d Marek Kusmin\u00b2\u00b9 \u2022 \u201cPairing techniques,\u201d Roger Almeida\u00b2\u00b2 \u2022 \u201cThe Pomodoro Technique,\u201d Francesco Cirillo\u00b2\u00b3 \u2022 \u201cRethinking pair programming,\u201d Sandro Manusco\u00b2\u2074 \u2022 \u201cTeddy bear pair programming,\u201d Adrian Bolboac\u0103\u00b2\u2075 \u2022 \u201cWhat is pair programming,\u201d Adrian Bolboac\u0103\u00b2\u2076"
    },
    {
        "word_count": 51,
        "value": "Startbywritingonefailingunittest.Wedon\u2019twanttowriteallthetestsbeforehandassometimesthe implementation will \u201csuggest\u201d a test we had not envisioned before. If we write all tests beforehand, we may miss some important test scenarios. TDD is a feedback loop that works both ways. We not only get feedback from failing and passing tests, production code also gives feedback on needed tests."
    },
    {
        "word_count": 51,
        "value": "We should invest some time becoming proficient with our IDE refactors and refactoring shortcuts. This enables us to experiment more with refactoring since we can quickly do and undo refactors. It also allows us to chain several refactors to move code from A to Z in a safe and efficient way."
    },
    {
        "word_count": 51,
        "value": "Beware of a combinatorial explosion! With great power comes great responsibility, so be careful when adding more values to your input sets. The resulting collection of parameters could increase so quickly that your test execution won\u2019t proceed, and the captured Golden Master will occupy a lot of space on your disk."
    },
    {
        "word_count": 51,
        "value": "Inthechapter\u201cObjectCalisthenics,\u201dweintroducedGameofLife\u00b9\u00b9\u00b2asanexercisetopractice the rules. If you have done this exercise, you should have it saved somewhere and that would be the starting point for this exercise. If you have not done it, we suggest you give it a go. Once you have your implementation done, you will be ready to carry on."
    },
    {
        "word_count": 51,
        "value": "Coupling between A and B is defined as: \u2018if I change element A I also have to change element B [\u2026] Cohesion of an element A is defined as: \u2018if I change sub-element A.1, do I have to change all the other sub-elements A.2-n?\u2019 So, cohesion is coupling within an element.\u201d"
    },
    {
        "word_count": 51,
        "value": "Example: An element that formats the output and an element that prints to the console can be executed in a sequence, but this does not mean they are cohesive with each other. They shouldn\u2019t belong to the same component just because they need to be executed sequentially inside the same method."
    },
    {
        "word_count": 51,
        "value": "\u2022 \u201cAbout Connascence,\u201d Codesai\u00b9\u2075\u00b9 \u2022 \u201cThe Building Blocks of Modularity,\u201d Jim Weirich\u00b9\u2075\u00b2 \u2022 \u201cComparing Techniques by Means of Encapsulation and Connascence,\u201d Meilir Page-Jones\u00b9\u2075\u00b3 \u2022 \u201cConnascence Examined,\u201d Jim Weirich\u00b9\u2075\u2074 \u2022 \u201cThe Grand Unified Theory,\u201d Jim Weirich\u00b9\u2075\u2075 \u2022 \u201cThe Page-Jones refactoring algorithm,\u201d Kevin Rutherford\u00b9\u2075\u2076 \u2022 \u201cUnderstanding Coupling and Cohesion,\u201d Corey Haines, et al.\u00b9\u2075\u2077"
    },
    {
        "word_count": 51,
        "value": "Coupling and Cohesion are in reality the same force. Cohesion is felt inwards and Coupling outwards. We believe this to be the fundamental force in object-oriented design, just as gravity is the essential force in Newton\u2019s laws. The secret to great design is finding a good balance between Cohesion and Coupling."
    },
    {
        "word_count": 51,
        "value": "In this chapter, we start a journey where we move from building things right to building the right things. Building things right is a more technical journey and revolves around the principles covered so far. Building the right things is a matter of business alignment and that involves several other abilities."
    },
    {
        "word_count": 51,
        "value": "Another big difference between Outside-In TDD and classic TDD is the nature of assertions. In classic TDD, we usually write state-based assertions (assert some-value-returned-by-function is equal to some-expected-value). Outside-In favors the \u201cTell, don\u2019t ask\u201d heuristic of commands over queries. So assertions are usually based on collaboration with some other components (mock)."
    },
    {
        "word_count": 51,
        "value": "The dependencies should follow a direction from what is more likely to change toward what is less likely to change; hence, abstraction should not depends on details. The domain should be the pure part of our code, with ideally no dependencies to anything else since it\u2019s the least likely to change."
    },
    {
        "word_count": 51,
        "value": "So the key enabling factor in preventing defects is having a mechanism to gather feedback in our processes for all the important aspects of development. The quicker the feedback, the more effective because identifying mistakes early is what prevents the waste of working on an incorrect product and sending it downstream."
    },
    {
        "word_count": 51,
        "value": "Beforetheuserstoryisdeveloped,thethreeamigosgettogetherandhavetheconversationwetalked about before.\u00b2\u00b9\u00b2 In our experience, the best results occur when this activity is done \u201cJust In Time\u201d because the concepts will stay fresh in the mind, and that usually minimizes the need for questions later on. However, the most important thing is that the conversation happens with the right people:"
    },
    {
        "word_count": 51,
        "value": "Sincethen,MarcohasworkedinItalyandtheUK,alwayslookingtolearnsomethingnew.Whenhis journey led him to the Agile principles, he quickly realized the effectiveness of such an approach for both technical and organizational areas. He now strongly believes that an iterative approach based on trust, transparency, self-organization and quick feedback loops is the key to success for any team in any discipline."
    },
    {
        "word_count": 50,
        "value": "This was very frustrating, as I would only get feedback after completing a task. I did not know it at the time, but this is a symptom of a broken feedback loop. Pair programming brings in the feedback as early as possible, thus allowing us to react to it faster."
    },
    {
        "word_count": 50,
        "value": "Spending significant amounts of time pairing can be very exhausting. Keeping the communication channel open while coding is an extra activity that pairs have to do all the time. Things that are trivialforsomeonemaynotbeastrivialforsomeoneelseatthatpoint.Afterafewpairingiterations, people involved in pair programming are usually tired, and this leads to decreased clarity and/or pair dysfunction."
    },
    {
        "word_count": 50,
        "value": "In this chapter, we will write our tests in a slightly different way. When creating a new test, we will go straight to the assertion we are trying to prove. This will ensure that test code exists solely to support the assertion, thus minimizing any code written for the tests."
    },
    {
        "word_count": 50,
        "value": "\u2022 Primitives are super types that have only contextual meaning. They can express anything so we tend to use them for everything. \u2022 Make the code more explicit by expressing intent through types that become behavior attractors. \u2022 Objects will have inherent meaning. \u2022 Cure for Primitive Obsession code smell."
    },
    {
        "word_count": 50,
        "value": "We understand that in particular environments it is not always possible to handle the unsuccessful commandsthatarethrowingexceptions(thinkofhighlytransactionalenvironmentsatlargescaleor not really exceptional situations). In this scenario, returning a self-contained data structure holding the minimum significant information of the result is an acceptable trade-off. (Think about the http protocol request/response returning http status codes.)"
    },
    {
        "word_count": 50,
        "value": "Add characterization tests to the GildedRose class. Try to name tests from a business perspective that describe what the code is doing. As with our first approach to testing, remember the degrees of freedom; before moving to the next exercises, stay in a behavior until you have characterized it fully."
    },
    {
        "word_count": 50,
        "value": "superclass, deferring some steps to subclasses. Do we need call back functionality or Encapsulate the method call in a first Command to keep track of history? Do requests need to be handled at different times or in different orders? Should we decouple the invoker from the object handling the invocation?"
    },
    {
        "word_count": 50,
        "value": "We have Connascence of Meaning when two or more components must agree on the meaning of specific values, hence using a convention. This kind of Connascence is not considered strong, but it is particularly annoying because it\u2019s quite common, easy to fix, and can become really tedious in debugging mode."
    },
    {
        "word_count": 50,
        "value": "Whatifweapplythefutureportionofthequotetosoftwaredevelopment?Theoretically,insoftware development we fully control the future. It\u2019s the way we are going to write the next piece of code. Andtheamountofcontrolwehaveisproportionaltohowmuchweunderstandandhoweffectively we can act on the codebase. In your code, the control you can have over your future is deeply connected to how you have been building in the past."
    },
    {
        "word_count": 50,
        "value": "1 I CAN SEE A BRICK BUILDING WITH A SIGN THAT READS \"TRUMAN BREWERY\" AND A WOODEN WHIT\\ 2 E DOOR. 3 > OPEN DOOR 4 YOU ARE INSIDE THE MAIN ROOM OF THE TRUMAN BREWERY. THERE IS A STRONG SMELL OF HOPS \\ 5 AND A DOZEN EMPTY CASKS."
    },
    {
        "word_count": 50,
        "value": "Introducing test automation as an integral part of our development process and improving the design of the system has many benefits, which are evident if we consider bug category 1. However, categories 2 and 3 are problems of a different nature because they are caused by issues related to communication."
    },
    {
        "word_count": 50,
        "value": "The activities of the flow are independent, but interconnected; this is one of the properties of a Complex System. Each activity performs different tasks in autonomy, but feeds information back to other parts of the System that are needed for the chain of value to progress to the next stage."
    },
    {
        "word_count": 50,
        "value": "The problem is that, as W. Brian Arthur has noted, once we reach those boundaries in interactive situations of complexity, which are somewhat inevitable when human beings are involved, \u201cagents cannotrelyanymoreupontheotheragents[\u2026]tobehaveunderperfectrationality,andsoareforced to guess their behavior. This lands them in a world of subjective beliefs, and subjective beliefs about subjective beliefs.\u201d\u00b3\u2070\u00b2"
    },
    {
        "word_count": 50,
        "value": "After sorting out the logistics, the most important thing for a successful workshop is having the right people involved. Essentially, there are two kinds of people particularly interesting to have in the room: the ones who care, who will ask questions, and the ones who know, who will provide answers."
    },
    {
        "word_count": 50,
        "value": "The The next transformation, constant to variable, is not sufficient to make the test pass. The next transformation, statement to statements, is also not sufficient to make the test pass. Note:Notstrictlytrue;thereisaconstructorofstringthatrepeatsachar.Wecouldhaveusedithere, but we decided not to. Applying the next transformation, unconditional to conditional, is sufficient to make the test pass."
    },
    {
        "word_count": 49,
        "value": "Next, I want to thank here my high school\u2019s Informatics teacher, Paola Trappolin, for the patience she had with me in those years. She was very disappointed with my lack of discipline, but never let that jeopardize my motivation, recognizing and honestly appreciating my talent. The same was also"
    },
    {
        "word_count": 49,
        "value": "Never forget we are human beings doing an intellectually intensive task. As humans, our potential is extraordinary, but we are not immune to failures, especially when tired. If you want to give your best when programming, avoid pushing your mental stamina beyond its boundaries. A sustainable pace is key."
    },
    {
        "word_count": 49,
        "value": "jumping from behavior to behavior before one is completed. Staying on a behavior means testing that behavior for happy and sad paths and for the average and extremes values it could expose. Take special care to not start implementing a combination of distinct behaviors before they are tested independently."
    },
    {
        "word_count": 49,
        "value": "Without the tests for feedback, we started making small errors that accumulated into a messy codebase. The next day, without the pressure of the meetup, we paired again and calmly worked on the exercise using object calisthenics as best as we could. Finally, it started to make some sense."
    },
    {
        "word_count": 49,
        "value": "\u2022 Sometimes we really don\u2019t have state, but usually if we have a static method, it means it could be anywhere. \u2022 Try to create classes that have clear responsibilities and require state maintenance. This forces us to create a network of collaborators that expose behavior and hide state."
    },
    {
        "word_count": 49,
        "value": "Although you can perform refactors manually, most development environments already automate a lot of them. The five atomic refactors are widely supported and some of the higher-level refactors as well. Using an IDE, if we trust it, allows for very safe and efficient automated refactors, thus avoiding manual mistakes."
    },
    {
        "word_count": 49,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. \u2022 Apply object calisthenics to improve your design. \u2022 Stay on the green while refactoring (New habit). \u2022 Use the IDE to refactor quickly and safely (New habit). \u2022 Refactor code for readability/understandability first (New habit)."
    },
    {
        "word_count": 49,
        "value": "In clothing, a seam joins parts together to form a piece of clothing. In code, we can use this concept to find soft points where we can separate coupled parts. If your language supports passing functions as parameters, you can use the Peel and Slice technique by Llewellyn Falco."
    },
    {
        "word_count": 49,
        "value": "In the Refactoring chapter, we said, \u201cDon\u2019t change production code that is not covered by tests. If we need to refactor some code that has no tests, then start by adding behavior tests.\u201d Now that we know how to test legacy code, we can expand our guidelines to include:"
    },
    {
        "word_count": 49,
        "value": "Cohesion is not only a matter of data and interaction with data, but should also take into consideration the semantics of methods in connection with the behavior they are expected to exibit. Let\u2019s look at the different kinds, starting with the good one and moving to the worse ones."
    },
    {
        "word_count": 49,
        "value": "Ideally, we should identify points of predicted variation and create a stable interface around them. The problem is that if we predict more variation than what is actually warranted, we waste effort on over-engineering a wrong abstraction. But if we fail to identify the variation over a common pattern"
    },
    {
        "word_count": 49,
        "value": "\u2022 When we find duplication in our code. (Don\u2019t forget the Rule of Three). DRY violation. \u2022 When we break any object calisthenics rules. \u2022 When our code exhibits code smells. \u2022 When code has low Cohesion or high Coupling. \u2022 When our code does not follow SOLID principles."
    },
    {
        "word_count": 49,
        "value": "Such Such an implementation works correctly if and only if the controllers share the same instance of GlobalCounter. In this case, a better solution would be using some external persistence mechanism so that the counter would just send a command for the increment without relying on a shared state."
    },
    {
        "word_count": 49,
        "value": "Many people try to come up with a great name all at once. This is hard and rarely works well. The problem is that naming is design: it is picking the correct place for each thing and creating the right abstraction. Doing that perfectly the first time is unlikely.\u201d"
    },
    {
        "word_count": 49,
        "value": "Very often you hear that you have to write readable code to make it more maintainable. Making it readable is not enough; try to write obvious code. If you reach the point where you think, Do I really need to be this explicit?, then you have achieved the goal."
    },
    {
        "word_count": 49,
        "value": "If we can have a system that passes its tests, minimizes duplication and maximizes clarity, we have already achieved an exquisite design. The next step is to check if we can maintain the mentioned design characteristics by employing fewer elements. This last rule is the icing on the cake."
    },
    {
        "word_count": 49,
        "value": "From a higher perspective, Cohesion/Coupling/Connascence are gauges for different aspects of the Entropy of the system. They are actually a very powerful aspect to have feedback from. From a systemic point of view, we can think of them like an index of the contribution to the overall System Entropy.\u00b9\u2077\u2075"
    },
    {
        "word_count": 49,
        "value": "At this point, we don\u2019t have the implementation of the class yet, so the IDE shows it highlighted in red. But if we prompt the suggestions, one of them says something like \u201ccreate type MicrowaveOven\u201d. Let\u2019s select it and let it do the magic. Now we have something like:"
    },
    {
        "word_count": 49,
        "value": "\u2022 An Agile Mind blog\u00b2\u00b9\u2076 \u2022 Bob Marshall\u2019s blog\u00b2\u00b9\u2077 \u2022 Dan North\u2019s blog\u00b2\u00b9\u2078 \u2022 \u201cEntropy (information theory),\u201d Wikipedia\u00b2\u00b9\u2079 \u2022 \u201cSub-second acceptance tests,\u201d (repository)\u00b2\u00b2\u2070 \u2022 \u201cSub-Second Acceptance Tests,\u201d Aslak Hellesoy (SCLConf 2018)\u00b2\u00b2\u00b9 \u2022 \u201cThe Three Amigos Strategy of Developing User Stories,\u201d George Dinwiddie\u00b2\u00b2\u00b2 \u00b2\u00b9\u2076http://anagilemind.net \u00b2\u00b9\u2077https://flowchainsensei.wordpress.com \u00b2\u00b9\u2078https://dannorth.net \u00b2\u00b9\u2079https://en.wikipedia.org/wiki/Entropy_(information_theory) \u00b2\u00b2\u2070https://github.com/subsecondtdd/codebreaker-js \u00b2\u00b2\u00b9https://www.youtube.com/watch?v=PE_1nh0DdbY \u00b2\u00b2\u00b2https://www.agileconnection.com/article/three-amigos-strategy-developing-user-stories"
    },
    {
        "word_count": 49,
        "value": "The main misconception about DDD is \u201cthinking that it is just a handful of implementation patterns as many articles and blogs focus on the modelling patterns. It is much easier for developers to see tacticalpatternsofDDDimplementedincoderatherthanconversationsbetweenbusinessusersand teams on a domain that they do not care about or do not understand\u201d.\u00b2\u00b3\u2075"
    },
    {
        "word_count": 49,
        "value": "Customers pay money for the value that the products or services of the company fulfill, which in turn pays money to other actors in order to perform activities that create that value. The difference between revenue and costs is the margin (i.e., the net monetization of the value provided)."
    },
    {
        "word_count": 49,
        "value": "As part of the Third Way, we also design our system of work so that we can multiply the effects of new knowledge, transforming local discoveries into global improvements. Regardless of where someone performs work, they do so with the cumulative and collective experience of everyone in the organization.\u201d\u00b2\u2075\u2078"
    },
    {
        "word_count": 49,
        "value": "Imagine you are in a big team. Without a strong leadership. Everyone going in a different direction. Justafewseemabletoreachagreements,owningandsharingprinciplesanddiscussinghowtoapply them best for the collective benefit. They spend hours helping each others, often pairing together over the same code. But they are the minority. Largely outnumbered by egos and wannabe heroes."
    },
    {
        "word_count": 49,
        "value": "1 import XCTest 2 3 enum TicTacToeError: Error { 4 case invalidPlayer 5 case invalidPosition 6 } 7 8 enum Player { 9 case o 10 case x 11 } 12 13 enum Position { 14 case topLeft 15 case topMiddle 16 } 17 18 class Board { 19"
    },
    {
        "word_count": 49,
        "value": "Describing himself as a software craftsman, systems thinker, Agile technical coach, entrepreneur, philosopher, restless traveler \u2013 all blended with Venetian humor \u2013 Marco learned coding in Basic on a Commodore when he was nine years old. He graduated from Venice University in 2001 with a degree in Computer Science."
    },
    {
        "word_count": 48,
        "value": "Our profession is about instructing a machine to follow rules written in form of coding. Critical thinkingisoneofthemostrelevantandhard-to-emulatequalitiesthatdefinethedifferencebetween human beings and artificial intelligence way of thinking. Switching off critical thinking only moves yousteadilydownthepathofuselessness.Ifitwerejustaboutfollowingrules,sincerobotsaremuch better then us in doing that, they would have already filled all the programming jobs available."
    },
    {
        "word_count": 48,
        "value": "Nevertheless, we use rules as shortcut in order to practice and learn how to behave in a particular scenario. The final goal should never be an exercise of mere memorization of rules. The ultimate achievement of practicing a ruleset is the internalization of the basic principles underlying them."
    },
    {
        "word_count": 48,
        "value": "\u00abTheuniverseofthe GameofLifeisaninfinite,two-dimensionalorthogonalgridofsquare cells, each of which is in one of two possible states: alive or dead (or populated and unpopulated, respectively). Every cell interacts with its eight neighbors, which are the cells that are horizontally, vertically or diagonally adjacent. At each step in time, the following transitions occur:"
    },
    {
        "word_count": 48,
        "value": "\u2022 Designing software is a constant compromise, and sometimes we have to accept code smells as a compromise as long as it\u2019s a conscious compromise. As software developers, we should be very conscious of our design and code decisions and have an opinion on every decision we make."
    },
    {
        "word_count": 48,
        "value": "\u2022 When you understand the different Test Doubles (Stub, Mock, Fake, Spy). \u2022 When you understand the difference between a query and a command method. \u2022 When you can use Mocks and Stubs to test your production code. \u2022 When you can write your own Fakes and Spies."
    },
    {
        "word_count": 48,
        "value": "We should be extremely careful when breaking dependencies, especially when we have low test coverage. This is a very delicate operation, so we want to minimize changes that are not covered by tests. Ideally, we want most of the changes on test code and not on production code."
    },
    {
        "word_count": 48,
        "value": "After the general laugh (Matteo is a great developer and an amazing storyteller!), I had this exotic term blinking in my mind: \u201cDesign Patterns.\u201d I didn\u2019t even know what these patterns were. I would have been doomed as well in such an interview. I had to know more."
    },
    {
        "word_count": 48,
        "value": "Components depend on other components\u2019 internal elements\u2019 data. This is the worst form of Coupling since one component can mutate another component\u2019s data. This makes the system very brittle and very difficult to change. Using encapsulation and abstractions is an effective strategy to minimize this type of Coupling."
    },
    {
        "word_count": 48,
        "value": "Elements are grouped in the same method because it combines two functions where the output of an element is used as the input of another. The fact that one element uses as input the output of another component is not by itself a reason to group them together."
    },
    {
        "word_count": 48,
        "value": "Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling Too high / Too low Cohesion / Coupling"
    },
    {
        "word_count": 48,
        "value": "That\u2019s obviously not a valid time. Is it wise to rely on the user\u2019s knowledge about the concept of \u201ctime?\u201d The best thing we can do to improve our design is to try to eliminate it by making invalid states unrepresentable. What if we do something like this:"
    },
    {
        "word_count": 48,
        "value": "\u2022 Fundamentals of Object-Oriented Design in UML, Meilir Page-Jones\u00b9\u2075\u2078 \u2022 Practical Guide to Structured Systems Design, Meilir Page-Jones\u00b9\u2075\u2079 \u2022 Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design, Edward Yourdon and Larry L. Constantine\u00b9\u2076\u2070 \u2022 What Every Programmer Should Know About Object-Oriented Design, Meilir Page-Jones\u00b9\u2076\u00b9"
    },
    {
        "word_count": 48,
        "value": "From the point of view of Coupling and Cohesion, we removed the Data Coupling by introducing a more cohesive Order class, which drastically reduces the Coupling score of this method. Moving the behavior closer to the data in the Order class also enhanced the Cohesion of this code."
    },
    {
        "word_count": 48,
        "value": "So with this in mind, let\u2019s think deeper about the nature of bugs in relation to requirements and see if we can find something to help in acquiring ability. From this point of view, on a very high level we could categorize software defects into three different groups:"
    },
    {
        "word_count": 48,
        "value": "Category 1: The requirements were correct, but the code doesn\u2019t work as expected to fulfill them. Category 2: The requirements were incorrect (or incomplete), and the code works correctly (irrelevant, however). Category 3: The requirements were correct, but misunderstood by the developer so the code does something else."
    },
    {
        "word_count": 48,
        "value": "where the communication line is short and there is regular, direct interaction between stakeholders, product owners and development teams. From a mere development point of view, there is not much we can do about it except leverage our agility and promptly fix them after clarification with the business.\u00b2\u2070\u2075"
    },
    {
        "word_count": 48,
        "value": "The idea is that the Title and optionally the Narrative of a user story are what is visible on our kanban board. It\u2019s the one-sight identification of a deployable unit of work and needs to be as short as possible, just enough to remember what it is about."
    },
    {
        "word_count": 48,
        "value": "\u2022 BDD in Action: Behavior-driven development for the whole software lifecycle, John Ferguson Smart\u00b2\u00b2\u00b3 \u2022 Crystal Clear: A Human-Powered Methodology for Small Teams, Alistair Cockburn\u00b2\u00b2\u2074 \u2022 Quality Is Free, Philip B. Crosby\u00b2\u00b2\u2075 \u2022 Specification by Example, Gojko Adzic\u00b2\u00b2\u2076 \u2022 Structured Analysis and System Specification, Tom DeMarco, P.J. Plauger\u00b2\u00b2\u2077"
    },
    {
        "word_count": 48,
        "value": "\u201cThe theory of constraints (TOC) is an overall management philosophy introduced by Eliyahu M. Goldratt in his 1984 book titled The Goal, which is geared to help organizations continually achieve their goals. Goldratt adapted the concept to project management with his book Critical Chain, published in 1997.\u201d \u00b2\u00b3\u00b3"
    },
    {
        "word_count": 48,
        "value": "Collaboration with domain experts is at the core of DDD, which coined the term \u201cknowledge crunching\u201d to express it. \u201cKnowledge crunching is the art of distilling relevant information from the problem domain in order to build a useful model that can fulfill the needs of business use cases.\u201d\u00b2\u00b3\u2077"
    },
    {
        "word_count": 48,
        "value": "PopcornFlow naturally supports the idea of the DevOps\u2019 Three Ways of effectiveness (discussed later), using a visualization technique to support critical thinking and organizational learning via quick experimentation and feedback loops. You can read more about PopcornFlow in its own dedicated section at the end of the book."
    },
    {
        "word_count": 48,
        "value": "\u201cBusiness Model Canvas is a strategic management and lean startup template for developing new or documenting existing business models. It is a visual chart with elements describing a firm\u2019s or product\u2019s value proposition, infrastructure, customers, and finances. It assists firms in aligning their activities by illustrating potential trade-offs."
    },
    {
        "word_count": 48,
        "value": "The deeper reason we achieved a considerable goal that time, however, goes beyond the mere technical aspect. The full exploitation of the great potential of the single individuals was possible only because we set up a fully functional team where everyone was trying to meet each others\u2019 needs."
    },
    {
        "word_count": 47,
        "value": "Nothing in this world can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and determination alone are omnipotent.\u201d"
    },
    {
        "word_count": 47,
        "value": "This book does not focus on any languages or tools in particular. We firmly believe that habits, principles and values are the most crucial part of a developer\u2019s knowledge and that they are technologically agnostic. Hence, you are welcome to choose the ones that best suit you."
    },
    {
        "word_count": 47,
        "value": "1. Decide on the task to be done. 2. Set the (Pomodoro) timer to \u2018n\u2019 minutes (traditionally 25 minutes). 3. Work on the task until the timer rings. 4. Take a short break (3\u20135 minutes). 5. After four (Pomodoro) cycles, take a more extended break (15\u201330 minutes)."
    },
    {
        "word_count": 47,
        "value": "\u2022 Tell don\u2019t ask \u2013 Tell objects to perform actions instead of asking them for data and processing it elsewhere. Similar to no getters/setters. \u2022 Law of Demeter \u2013 Each component should only talk to its friends; don\u2019t talk to strangers. Similar to one dot per line."
    },
    {
        "word_count": 47,
        "value": "A test suite that contains a lot of fragile tests will slow down development and compromise the ability to refactor. The solution is to review the fragile tests and see if either the specification should beweakenedortheobjectcompositionisnotoptimalandshouldbechanged.\u201cAspecificationshould be as precise as possible, but not more precise.\u201d (Paraphrasing Einstein\u2078\u2077)"
    },
    {
        "word_count": 47,
        "value": "\u2022 \u201cThe Little Mocker,\u201d Robert C. Martin\u2079\u00b3 \u2022 \u201cMocking katas,\u201d PlanetGeek.ch\u2079\u2074 \u2022 \u201cMocks aren\u2019t Stubs,\u201d Martin Fowler\u2079\u2075 \u2022 \u201cMocks, Fakes, Stubs and Dummies,\u201d Gerard Meszaros\u2079\u2076 \u2022 \u201cMocks for Commands, Stubs for Queries\u201d Mark Seemann\u2079\u2077 \u2022 \u201cReally Simple CQRS,\u201d Vaughn Vernon, Kalele blog\u2079\u2078 \u2022 \u201cTest Double,\u201d Gerard Meszaros\u2079\u2079"
    },
    {
        "word_count": 47,
        "value": "Inthiscase,theGameclassiscoupledwiththerandomnumbergeneratorlibrary.Weneedtocontrol Inthiscase,theGameclassiscoupledwiththerandomnumbergeneratorlibrary.Weneedtocontrol the dice rolling in order to test the Game class. Step 1: Add a protected virtual method to the Game class to encapsulate the behavior that has the Coupling issue. We use a protected method to avoid extending the public interface of the Game class."
    },
    {
        "word_count": 47,
        "value": "Cohesion should be as high as possible, but not higher. We should strive for highly cohesive components; however, overdoing Cohesion has bad consequences. A great example is a God Class that concentrates all the behavior. Some potential indicators of too much Cohesion are the following code smells:"
    },
    {
        "word_count": 47,
        "value": "\u2022 All instructions inside a method should be at the same level of abstraction \u2022 All public methods inside a class should be at the same level of abstraction \u2022 All classes should be inside a package/namespace \u2022 All sibling packages/namespace should be inside a parent package/namespace.\u201d\u00b9\u00b3\u2075"
    },
    {
        "word_count": 47,
        "value": "Here the Connascence of position is about the order of the arguments of the SendEmail method because we have to make sure that we pass those arguments in that exact order, otherwise our message isn\u2019t going to get where it\u2019s supposed to go, which could be disastrous."
    },
    {
        "word_count": 47,
        "value": "The way we solved it was straightforward. In the same way the service was able to self-configure at startup, we added the ability to check if the subscription was set up in the environment, setting it up when missing. Easy to do, once you think about it!"
    },
    {
        "word_count": 47,
        "value": "Here the concept of responsibility become key. Identifying the different responsibilities gives us an idea of the kind of collaboration we might need. There is no need to implement the sub-module in this stage, however, because we can stub it and fake its behavior for our test."
    },
    {
        "word_count": 47,
        "value": "1 Given I have a product. 2 And I have a customer that is a gold customer. 3 When I add the product to the customer shopping cart with a quantity of 1. 4 Then the shopping cart should be saved with the gold customer discount applied."
    },
    {
        "word_count": 47,
        "value": "Taiichi Ohno, one of the main personalities behind the Toyota Production System, believed that if it\u2019s not possible to reduce the number of defects there is a lack of ability, and if it\u2019s not possible to get close to zero defects, there is a lack of perseverance."
    },
    {
        "word_count": 47,
        "value": "\u201cSuccessful application of Specification by example is documented to significantly reduce feedback loops in software development, leading to less rework, higher product quality, faster turnaround time for software changes and better alignment of activities of various roles involved in software development such as testers, analysts and developers.\u201d\u00b2\u00b9\u00b3"
    },
    {
        "word_count": 47,
        "value": "TheexceptioniscausedbythefactthattheDeliveryOfficedoesn\u2019tworkovertheweekend.Packages received from a supplier on a weekend will be dispatched the following Monday. Furthermore, none of the suppliers work during the weekend, so if an order is received on Friday with a lead time of 2 days, the Delivery Office would receive and dispatch on Tuesday."
    },
    {
        "word_count": 47,
        "value": "So we can say that knowledge answers the question \u201cwhat\u201d about something, while understanding answer the question \u201cwhy.\u201d We can know things we don\u2019t understand. We know facts, but understand ideas. So, understanding explains knowledge. It\u2019s on a higher level of abstraction (to use software design terminology)."
    },
    {
        "word_count": 47,
        "value": "User story mapping is particularly useful in situations where there is a pre-existing backlog, but the overall understanding of it is lacking, unclear or scattered among several different actors in the business. It has been proven very effective in re-coordinating all the knowledge into a holistic understanding."
    },
    {
        "word_count": 47,
        "value": "Then imagine one day they told you, \u201cIf we don\u2019t deliver something significant in four months, our project will be dumped by the business. Pick whom you want, and build a new team to deliver a completely new piece of backlog. But you must do it quickly.\u201d"
    },
    {
        "word_count": 47,
        "value": "When we made the choice of business analyst (BA) and tester, we went to talk to them first to see if they would like the idea of working with us. It was very humbling to feel they were genuinely excited about it, but also a bit scared."
    },
    {
        "word_count": 47,
        "value": "The resulting discussion was challenging, but not dogmatic. After all, we didn\u2019t have much time, we all knew exactly what we were doing, and this technique could reveal itself as a big win. We arrived quickly to the consensus of unit tests at discretion of the developer.\u00b2\u2079\u2075"
    },
    {
        "word_count": 47,
        "value": "All authors have multiple years of experience coaching developers in a wide range of orga- nizations. If you would like to discuss coaching services for your organizations, contact us at info@agiletechpraxis.com or on Twitter @agiletechpraxis. We can provide onsite or online coaching of software developers and teams."
    },
    {
        "word_count": 46,
        "value": "One of the main causes is probably technical debt. This is one of the reasons why technical practices are so crucial to the success of an Agile project. They allow us to continue delivering value by addressing the accidental complexity or tech debt as it emerges.\u00b2"
    },
    {
        "word_count": 46,
        "value": "Onceyoumastermostoftheprincipleswediscusshere,somethingverycoolmighthappen:youwill find yourself more naturally predisposed to think about software design using a particular subset of those principles. Or, even more cool, you might want to find your very own principles, those that work and make sense for you, driving every single line of your code."
    },
    {
        "word_count": 46,
        "value": "Pair programming encourages participants to switch roles often. These procedures make sure everyone has a chance to drive and navigate. It is crucial that both partners spend an equal amount of time performing each role. There are a few techniques you can use to encourage this."
    },
    {
        "word_count": 46,
        "value": "45 Transformation 2 \u2013 Nil -> constant The next transformation is to evolve return nil to return a constant. Example: return 0. Transformation 3 \u2013 Constant -> constant+ This transformation uses a more complex constant or a combination of constants. Transformation 4 \u2013 Constant -> scalar"
    },
    {
        "word_count": 46,
        "value": "\u2022 Exposes the intent hides implementation, telling an object to do something for you instead of asking for its internal representation. \u2022 Reduces the amount of knowledge you should have to enable a behavior. \u2022 This doesn\u2019t apply to LINQ (Language Integrated Query) and fluent interfaces."
    },
    {
        "word_count": 46,
        "value": "Once we are comfortable with basic refactoring movements and choreographies, it is time to apply this new practice to code. In the refactoring golf exercise, we were given a starting point and an end point. In a real refactoring session, the endpoint is an imaginary point."
    },
    {
        "word_count": 46,
        "value": "Mock objects might also be Stubs, but should not add any additional complexity to the test environment. Their behavior should be obvious and self-explanatory. We have noticed that when real behavior has been added to Mock objects, it is usually a strong symptom of misplaced responsibilities."
    },
    {
        "word_count": 46,
        "value": "Combination Tests is a feature of Approval Tests that allows for parameters to be passed to the System Under Test in a combinatorial fashion. Given a known set of inputs, they will be combined in all possible ways to exercise as many execution paths as possible."
    },
    {
        "word_count": 46,
        "value": "Avoid leaking the name of the pattern in your code when possible. Naming should always focus on behavior related to the business functionality you are implementing. Showing off thatyouhaveimplementedavisitorpatternwithanabstractfactory andacommand doesn\u2019t express the functional goal of your code. And it doesn\u2019t make you look smarter, either."
    },
    {
        "word_count": 46,
        "value": "Another important aspect of Interaction Coupling is the number and kind of parameters passed into themethods,whichwecanthinkofastheimpactofthatmethodontheoverallCoupling.Something to always keep in mind is that there is an optimal way to design our methods for minimal impact. To help in these choices, we identified high-level Method Coupling Premises."
    },
    {
        "word_count": 46,
        "value": "For each row in the Degree column and in the Cohesion / Coupling column, highlight the correct concept and then add a reason in the Reason column. After the table, we have listed several sample reasons to use. In some cases, both Coupling and Cohesion apply."
    },
    {
        "word_count": 46,
        "value": "A good example is the famous Rectangle and Square. In this case, when we inherit Square from Rectangle, we are creating a more restrictive precondition; changing one size sets the other size to the same value, but this did not happen on the base class Rectangle."
    },
    {
        "word_count": 46,
        "value": "Duplication is the first code smell we examined in this book. It is an important indicator we can use to detect problems in our code. Removing duplication often leads us to create new abstractions that more clearly express the intent of the code, thus increasing clarity."
    },
    {
        "word_count": 46,
        "value": "\u2022 \u201cBeck Design Rules,\u201d Martin Fowler\u00b9\u2076\u2077 \u2022 \u201cThe Four Elements of Simple Design,\u201d JB Rainsberger\u00b9\u2076\u2078 \u2022 \u201cGood naming is a process, not a single step,\u201d Arlo Belshee\u00b9\u2076\u2079 \u2022 \u201cPutting an Age-Old Battle to Rest,\u201d JB Rainsberger\u00b9\u2077\u2070 \u2022 \u201cSimple Made Easy,\u201d Rich Hickey\u00b9\u2077\u00b9 \u2022 \u201cXP simplicity rules\u201d\u00b9\u2077\u00b2"
    },
    {
        "word_count": 46,
        "value": "All of this being said, classic TDD in the hands of experienced software engineers who are aware of the pitfalls described above is an amazing way to develop software. In the following diagram, we try to capture the high-level flow of software growth using classic TDD:"
    },
    {
        "word_count": 46,
        "value": "Given, Given, when, then (GWT) style English language style, example: Gherkin language Given I have a car And I accelerate for 10 seconds And I break for 5 seconds When I measure the velocity Then the velocity should be lower than the one measured before breaking"
    },
    {
        "word_count": 46,
        "value": "Before going too deep with this subject, we recommended to have a good grasp of the chapter about Test Doubles, because they are heavily used for Outside-in style. If you feel you need to refresh the topic of Test Doubles, please do so before moving forward."
    },
    {
        "word_count": 46,
        "value": "In this example, we are implementing the scenario of adding a product to a customer\u2019s shopping cart on a web site. In this case, the customer is a \u201cGold\u201d customer and is entitled to a discount. We start by writing an acceptance test for this scenario:"
    },
    {
        "word_count": 46,
        "value": "\u2022 Acquiring (physically or remotely) the items to be sold \u2022 Describingtheirphysicaldetails(color,qualities,picturesandotherinformationusefulfortheir placement on the market) \u2022 Assessing and interacting to handle the quantity in stock \u2022 Creating and managing the mechanism for customers to browse the catalogue, place an order and pay, dispatch the items"
    },
    {
        "word_count": 46,
        "value": "We were just a team of four when we started, and we had to wait a few days before the two new members could jump on board. Eldon and I decided to split the job and tackle the two most critical tasks first, one task each."
    },
    {
        "word_count": 46,
        "value": "The tester was writing the acceptance criteria in the solution and even learned to effectively use basic source control commands. We used to joke a lot together, and I told him, \u201cYou see, on your next job you can change careers and apply for developer roles!\u201d"
    },
    {
        "word_count": 46,
        "value": "A few weeks later, the news no one would have bet a dime on arrived: the project had been green flagged. We had ensured the budget for the whole team to be available for another year. We made possible what a few months before seemed impossible."
    },
    {
        "word_count": 46,
        "value": "Creatinganenvironmentoftrulyselflesscollaborationallowedeveryonetofreelytryoutideaswith the consequence of attaining awesome knowledge and technical implementation breakthroughs. It also enabled the team to surpass the limits of the individual by sharing abilities when it was needed, asnoonewaseverafraidtoaskquestions,revealtheywerestuck,ordidn\u2019tknowsomething.Suchan environmentenabledeveryonetoeffectivelyusetheknowledgeofthewholeteamineverysituation because everyone knew that the best solution was always just a quick question away."
    },
    {
        "word_count": 46,
        "value": "The best team players all have in common one very distinguishable characteristic: they put the common goal of the team before any personal one. In that context, they are selfless \u2013 because they are able to merge their ego with the collective consciousness of the team."
    },
    {
        "word_count": 46,
        "value": "\u2022 Drive: The Surprising Truth About What Motivates Us, Daniel H. Pink\u00b3\u2070\u2074 \u2022 The Five Dysfunctions of a Team: A Leadership Fable, Patrick Lencioni\u00b3\u2070\u2075 \u2022 Hearts over Diamonds, Bob Marshall\u00b3\u2070\u2076 \u2022 The Ideal Team Player: How to Recognize and Cultivate the Three Essential Virtues, Patrick Lencioni\u00b3\u2070\u2077"
    },
    {
        "word_count": 45,
        "value": "The idea for the book\u2019s title arose when the plan was born on a rare snowy night in London. After discussingtheideatogetheroverpizza(andafewPeronis),weorderedacoupleofroundsofdigestive grappa.\u00b9 It was then that we started joking about the title and soon we had fallen in love with it, so here it is!"
    },
    {
        "word_count": 45,
        "value": "If you do not use ping pong/popcorn or the chess clock, use something else to remind you to switch roles. Do not just rely on your partner pointing out that you need to change roles, as he or she may not feel comfortable requesting it."
    },
    {
        "word_count": 45,
        "value": "\u2022 Clearly separates what is being tested from the setup and verification steps. \u2022 Clarifies and focuses attention on specific test responsibilities. \u2022 Makes some test smells more obvious, such as assertions intermixed with \u201cAct\u201d code or tests that test too many things at once."
    },
    {
        "word_count": 45,
        "value": "We will first work only with the material we have covered so far. We will then use the new concepts introduced in this chapter. This way you get a chance to compare the two implementations and witness the effect of using TPP on your code."
    },
    {
        "word_count": 45,
        "value": "Another way to use the Transformation Priority Premise is to keep writing new code using obvious implementation. Whenever duplication is detected, refactor to a simpler or more complex transformation to remove it. When refactoring, first try to go to a simpler transformation. This does notworkallthetime;oftenyouneedtomovetoamorecomplextransformationtoavoidduplication."
    },
    {
        "word_count": 45,
        "value": "So far our refactoring phase on the TDD cycle has been concerned with removing duplication. However, refactoring is much more than that. Removing duplication is only the first step of refactoring. Refactoring is mainly about finding abstractions and shaping them; duplication is just a symptom."
    },
    {
        "word_count": 45,
        "value": "\u2022 Smells are the symptoms of a problem rather than the problem itself, just like the symptoms of a disease are not the disease itself. \u2022 Smells provide feedback on our decisions, and we should pay attention to them, as they may indicate deeper problems."
    },
    {
        "word_count": 45,
        "value": "In our experience, we found out that the most dangerous code smells are: Duplication, Primitive Obsession, Feature Envy and Message Chains. For that reason, we decided to highlight them, especially the last three, as we have already paid enough attention to duplication in previous chapters."
    },
    {
        "word_count": 45,
        "value": "\u2022 Extract private methods from deep conditionals. \u2022 Extract smaller private methods from long methods, and encapsulate cryptic code in private methods. \u2022 Return from methods as soon as possible. \u2022 Encapsulate where we find missing encapsulation. \u2022 Remove duplication. \u2022 Refactor to patterns (New)."
    },
    {
        "word_count": 45,
        "value": "\u2022 \u201cCohesion - The cornerstone of Software Design,\u201d Sandro Mancuso, Codurance\u00b9\u00b2\u00b3 \u2022 \u201cCohesion (computer science),\u201d Wikipedia\u00b9\u00b2\u2074 \u2022 \u201cCoupling And Cohesion,\u201d C2 wiki\u00b9\u00b2\u2075 \u2022 \u201cLaw of Demeter,\u201d Wikipedia\u00b9\u00b2\u2076 \u2022 \u201cSoftware Complexity: Toward a Unified Theory of Coupling and Cohesion,\u201d David P. Darcy and Chris F. Kemerer\u00b9\u00b2\u2077"
    },
    {
        "word_count": 45,
        "value": "To To apply the principle, we introduced abstraction layers in the form of interfaces. They act as catalysts for the dependencies, attracting the direction of the arrows of the dependency diagram. The following picture shows how the dependency flow has changed with this simple adjustment."
    },
    {
        "word_count": 45,
        "value": "What about making invalid states unrepresentable? Can we do it? Studying the properties of triangles a little allows us to create an alternative design for our class. Let\u2019s look at the angles in this example. Can we use this for making our constructor less fragile?"
    },
    {
        "word_count": 45,
        "value": "W e can see something else becoming red now: the MicrowaveGenerator class marked with the problem of not implementing the IGenerateMicrowaves interface because it is yet obviously missing that method. But we have the handy suggestion \u201cimplement missing members,\u201d which will add the method automatically:"
    },
    {
        "word_count": 45,
        "value": "An Acceptance Test suite must have well-defined properties in order to provide benefits. It is important to set goals about them early on so we can always have a clear idea of what we want to achieve and make trade-off decisions based on those goals."
    },
    {
        "word_count": 45,
        "value": "For example, a few days after joining one of the most exciting Italian startups at the time, I was invited for lunch by Max, an important man on the Board. We had already exchanged some words before,andIwaspleasantlysurprisedtoseehowdown-to-earthhewas.Thedialoguewasenjoyable, and I immediately had good feelings about him."
    },
    {
        "word_count": 45,
        "value": "1 [TestFixture] 2 public class RomanConverterShould 3 { 4 [TestCase(1, \"I\")] 5 [TestCase(2, \"II\")] 6 [TestCase(3, \"III\")] 7 [TestCase(4, \"IV\")] 8 [TestCase(5, \"V\")] 9 [TestCase(6, \"VI\")] 10 [TestCase(7, \"VII\")] 11 [TestCase(8, \"VIII\")] 12 [TestCase(9, \"IX\")] 13 [TestCase(10, \"X\")] 14 [TestCase(40, \"XL\")] 15 [TestCase(44, \"XLIV\")] 16"
    },
    {
        "word_count": 44,
        "value": "This is what my father told me just some months ago after 5 years since I moved from Italy. The truth is without my parents, their support, their trust and faith in what I and my sister could do I wouldn\u2019t have done much."
    },
    {
        "word_count": 44,
        "value": "If you are in a position of power, authority or seniority, it\u2019s on you to make sure your pair enjoys a good experience when pairing with you. Avoid using your power to impose decisions or making your pair feel uncomfortable while pairing with you."
    },
    {
        "word_count": 44,
        "value": "This idea was presented by Llewellyn Falco and we find this style of pairing very interesting from the point of view of \u201cMob programming\u201d because of the high level of trust and maturity required. Once this technique is learned, mob programming would follow smoothly."
    },
    {
        "word_count": 44,
        "value": "The adjustment period from solo programming to collaborative programming was like eating a hot pepper. The first time you try it, you may not like it because you are not used to it. However the more you eat it, the more you like it.\u201d"
    },
    {
        "word_count": 44,
        "value": "\u2022 Promotes a main execution lane with few special cases. \u2022 Suggests polymorphism to handle complex conditional cases, making the code more explicit (for example, using the State Pattern). \u2022 Try using the Null Object pattern to express that a result has no value."
    },
    {
        "word_count": 44,
        "value": "\u2022 Instead of asking an object for its data and then acting on it, tell the object what it should do for you. \u2022 Data structures and objects are both represented with the class keyword in Java and C#, but they have different responsibilities."
    },
    {
        "word_count": 44,
        "value": "Don\u2019t change production code that is not covered by tests. If we need to refactor some code that has no tests, then start by adding behavior tests. We will cover this point in more detail in the next chapter that deals with legacy code."
    },
    {
        "word_count": 44,
        "value": "Mocks are set up with expectations of the calls they are expected to receive. They can throw an exception if they receive a call they don\u2019t expect and/or are queried during the assertion phase to verify they received all the calls they were expecting."
    },
    {
        "word_count": 44,
        "value": "Often, though, continuous refactoring prepares the way for something less orderly. Each refinement of code and model gives developers a clearer view. This clarity creates the potential for a breakthrough insights. [\u2026] This sort of breakthrough is not a technique; it is an event.\u201d"
    },
    {
        "word_count": 44,
        "value": "If communication is so important, it is easy to grasp why the Agile principles put so much focus on it. In particular, the 6th principle states, \u201cThe most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\u201d\u00b2\u2070\u2079"
    },
    {
        "word_count": 44,
        "value": "Russell Ackoff, one of the pioneers in the field of System Thinking, stated that \u201cyou will never reach a complete explanation or understanding of everything, but your understanding increases the larger the system you comprehend. The knowledge increases the smaller the element you comprehend.\u201d\u00b2\u00b2\u2079\u00b2\u00b3\u2070"
    },
    {
        "word_count": 44,
        "value": "\u201cSo whatever your goal is, think about whether you\u2019re going to need intellect, intuition, or emotion in order to achieve it. Then design your practice to rewire this part of your brain, and get ready for the long journey from knowledge to understanding.\u201d \u00b2\u00b3\u00b2"
    },
    {
        "word_count": 44,
        "value": "The goal of knowledge crunching is collectively going toward the path to understanding so that the requirements are focused on the features that give the most value to the business, features that in turn maximize the value that the software implementing them can provide."
    },
    {
        "word_count": 44,
        "value": "Conway\u2019s Law states that \u201corganizations which design systems [\u2026] are constrained to produce designs which are copies of the communication structures of these organizations.\u201d\u00b2\u2074\u00b3 So if we want to achieve the optimal design, it is often necessary to act first on those communication structures."
    },
    {
        "word_count": 44,
        "value": "Workingonthatcodewaspurejoy,andthedirectresultwastrulycollectivecodeownership.Anyone could easily find out where to act in the code to get the desired result. Curious members of the other teams often asked if they could see it, like it was some sort of attraction. \u201cWow, it\u2019s so simple and easy to understand!\u201d"
    },
    {
        "word_count": 44,
        "value": "Whensomeonesaysthat\u201cAgileisdead,\u201dwesuggestthat(afterreadingtheprinciples)oneshouldask if Agile was ever \u201cborn\u201d in the first place. As clothes do not make the man, \u201cAgile methodologies\u201d in job specs, some tests in the code, a whiteboard with colored post-its, and standup/scrum at 9:00 in the morning don\u2019t make a team Agile."
    },
    {
        "word_count": 44,
        "value": "What John says here is that that inertia it is not absolute. The system actually has changing patterns, but they are naturally and mostly unconsciously used to prevent drastic internal change. They are often just effects of decisions taken without the goal of changing."
    },
    {
        "word_count": 44,
        "value": "Dividing organizations in sealed departments without effective communication generates several problems, the main one being the lack of understanding of the business as a whole System by the people inside the single departments. The good thing is that the problem can potentially be resolved"
    },
    {
        "word_count": 44,
        "value": "We apply the same if to while transformation to the remaining if statement, and this allows us to get rid of the duplicated while statements. In order for this to work, it\u2019s more convenient to have the dictionary reversed, so we also do this."
    },
    {
        "word_count": 43,
        "value": "If you do not use the Pomodoro technique, use something else to remind you to take regular breaks. Do not just rely on your partner pointing out that you need to change roles, as he or she may not feel comfortable requesting it."
    },
    {
        "word_count": 43,
        "value": "When I first read about TDD, I was surprised. We should write the test before the implementation, and the tests should be testing behavior instead of performing atomic operations; running all tests would be automated and a report generated. I was immediately sold."
    },
    {
        "word_count": 43,
        "value": "1. Fake it Justreturntheexactvalueyouneed.Ifyourtestexpectsazerofromamethod,simplydoit.Usually, you use this when you are unsure about how to implement a specific functionality, or your previous steps were too significant, and you cannot figure out what went wrong. Something that works is better than something that doesn\u2019t work!"
    },
    {
        "word_count": 43,
        "value": "\u2022 TDD is not enough. TDD will have a positive side effect on design, but simply doing TDD will not take care of design by itself. \u2022 DRY(DonotRepeatYourself)isnotenough.Sofarourrefactoringeffortshavebeenfocused on removing duplication. This is crucial to write maintainable code, but it is not enough."
    },
    {
        "word_count": 43,
        "value": "With this approach, we have a home for all behaviors that belong to money (currency exchange, for example) and discount (types of discounts, for example) instead of adding those behaviors to the invoice class. This way we achieve a better separation of concerns."
    },
    {
        "word_count": 43,
        "value": "\u2022 Small classes tend to be focused on doing just one thing, making them easier to reuse. \u2022 Makes classes easier to understand. \u2022 Use packages (namespaces) to cluster related classes. \u2022 Small packages force them to have a clear purpose and identity."
    },
    {
        "word_count": 43,
        "value": "However, I always remember those days of the \u201cpoor man way\u201d as the most interesting; I have learned so much from implementing Test Doubles manually! If you have never tried it yourself, I suggest giving it a try. It\u2019s a very interesting exercise!"
    },
    {
        "word_count": 43,
        "value": "A \u201cTest Double\u201d borrows from the name and use of stunt doubles in movies. Gerard Meszaros introduced the term in his book xUnit Test Patterns. A Test Double is any kind of object used in place of a real object for testing purposes.\u2078\u2075"
    },
    {
        "word_count": 43,
        "value": "The balance between these forces is the inflection point. The inflection point defines the maximum amount of investment we are comfortable making in a desired type of flexibility at a given moment in time. Beyond this point, the investment is not worth it."
    },
    {
        "word_count": 43,
        "value": "What What happens if in our calls to the ReceiptSender we invert the order and call the Archive method before the SendToCustomer with the same receiptId? If that would result in a failure on the second call, we have Connascence of Execution Order."
    },
    {
        "word_count": 43,
        "value": "Let\u2019s Let\u2019s leave these empty and keep focusing on our MicrowaveOven class; we still have an ugly throw there to remove. Now we can finally tell the generator to switch itself on, as we were planning! We start again sketching its public interface."
    },
    {
        "word_count": 43,
        "value": "Portfolio scenario We need to provide a class able to record the buy and sell operations of a customer and display the information as per the acceptance criteria. For simplicity, you can assume it should work for just one user at a time."
    },
    {
        "word_count": 43,
        "value": "This kata is a little more structured and challenging so you can try to put many concepts and principles into practice in a domain that can benefit from them. This is quite a large kata, so expect to spend some time with it."
    },
    {
        "word_count": 43,
        "value": "\u2022 Who knows what the business wants (product owner or business analyst) \u2022 Who knows how to make the system achieve it (developers) \u2022 Eventually, a third party in charge to witness the discussion and agree on how to prove its correctness (testers)"
    },
    {
        "word_count": 43,
        "value": "Given that the acceptance criteria are expressed using business language, they also represent a great source for documenting the status of the project because they will never become stale and will always reflect faithfully what the system does in that moment in time."
    },
    {
        "word_count": 43,
        "value": "\u2022 Isolation: It must be possible to make changes to different contexts independently, without breaking other contexts. \u2022 Comprehensibility:Theymusthaveanubiquitousvocabularyandbenamedafterit,enabling holistic conversations about them in relation with the business. \u2022 Parallelization: They should be able to evolve in parallel with little or no coordination.\u00b2\u2075\u2074"
    },
    {
        "word_count": 43,
        "value": "Information, knowledge and understanding enable us to do things right, to be efficient, but wisdom enables us to do the right things, to be effective. Science pursues data, information, knowledge and understanding: what is truth; but the humanities pursue wisdom: what is right.\u201d"
    },
    {
        "word_count": 43,
        "value": "We suggest the reader to go beyond the Agile Manifesto and read over the 12 principles to better understand them. They are unfortunately relegated to \u201cpage 2\u201d of the Agile Manifesto website, so we have reproduced them at the end of this book."
    },
    {
        "word_count": 42,
        "value": "return \"1\" if number == 1 then return \"1\" else return \"2\" if number == 1 then return \"1\" else if number == 2 then return \"2\" else return \"4\" return str(number) if number == 3 then return \"fizz\" else return str(number)"
    },
    {
        "word_count": 42,
        "value": "In these katas, we are given an initial code base and a desired final result. The objective is to apply the minimal refactoring moves to take us from the initial code base to the final one, using as few movements as possible."
    },
    {
        "word_count": 42,
        "value": "If we follow the steps in the previous sections, we should now have a Golden Master test for our system. If we make any changes in the production code that break the behavior of the system, our Golden Master test(s) should fail."
    },
    {
        "word_count": 42,
        "value": "Components share global data; any change in this global data format has a ripple effect, breaking multiple components (Shotgun Surgery code smell). We can abstract common data to minimize this Coupling or remove global data and move to Data Coupling or message-passing."
    },
    {
        "word_count": 42,
        "value": "The types of Cohesion categorize how we group elements into classes and components. There are differentreasonswhywegroupelementsinsoftwaredesign;somearebetter,someworse.Theworst cases of Cohesion are like leaving windows broken on a building \u2013 they invite others to break the remaining windows because no one seems to care.\u00b9\u00b2\u00b2"
    },
    {
        "word_count": 42,
        "value": "\u00b9\u00b3\u00b2Wikipedia, \u201cDesign by contract\u201d https://en.wikipedia.org/wiki/Design_by_contract \u00b9\u00b3\u00b3Another way to state this principle is to say that subclasses should be contravariant of overridden method input types and covariant of overriddenmethodoutputtypes,or,thataderivedclassshouldbelessorequallyrestrictiveoninputsandmoreorequallyrestrictiveonoutputs for overridden methods. (Mike James, \u201cCovariance And Contravariance \u2013 A Simple Guide\u201d) https://www.i-programmer.info/programming/ theory/1632-covariance-and-contravariance-a-simple-guide.html"
    },
    {
        "word_count": 42,
        "value": "1 public interface IBuildCarsWithBrand{ 2 IBuildCarsWithEngine WithBrand(Brand brand); 3 } 4 5 public interface IBuildCarsWithEngine{ 6 IBuildCarsWithColor WithEngine(Engine engine); 7 } 8 9 public interface IBuildCarsWithColor{ 10 IBuildCars WithColor(Color color); 11 } 12 13 public interface IBuildCars{ 14 Car Build(); 15 }"
    },
    {
        "word_count": 42,
        "value": "This Claude Shannon\u00b9\u2077\u2074 quote is controversial and usually generates interesting conversations. The main observationisthis: Wedon\u2019treally havefullcontrolof thefuture.That\u2019sactuallyameaningful observation if we consider the future portion of the quote at its higher philosophical level (our inability to change the past being much less debatable)."
    },
    {
        "word_count": 42,
        "value": "The same method Execute also has Cohesion problems because it generates order IDs internally. The main behavior of this method/class is to orchestrate the order flow (as its name suggests), not to generate order IDs. This is also a Single Responsibility violation."
    },
    {
        "word_count": 42,
        "value": "Formal testing with respect to user needs, requirements, and business processes conducted to determine whether or not a system satisfies the acceptance criteria and to enable the user, customers or other authorized entity to determine whether or not to accept the system."
    },
    {
        "word_count": 42,
        "value": "Outside-In is a great way to align with the business, growing the code and sketching the collabora- tion between different subsystems. It is focused on delivering the value for the business first while moving to the implementation and unit testing strategy afterwards."
    },
    {
        "word_count": 42,
        "value": "At At this point we can move the MicrowaveOven class to its own file, or carry on in the same file and delay this operation later. To move on, now we need to implement the Cook method. At first we sketch it:"
    },
    {
        "word_count": 42,
        "value": "\u201cA Walking Skeleton is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.\u201d\u00b2\u00b9\u2075"
    },
    {
        "word_count": 42,
        "value": "To use a metaphor, you can think of a system as a chain of rings. If we put tension on the chain, the chain will break at the weakest ring. So, to improve the whole chain, we should strengthen the weakest ring."
    },
    {
        "word_count": 42,
        "value": "Luckily, there are several techniques that can help prevent this from happening. They focus more on soft skills, facilitation and collective learning, with the goal of understanding and probing the wider system. In many situations your technical skills might not be enough."
    },
    {
        "word_count": 42,
        "value": "One of the most powerful questions to ask for reaching understanding is very simple: WHY? It\u2019s not a coincidence that kids in their path to make sense of the world pass through the \u201cWhy?\u201d phase, asking it continuously like a broken record."
    },
    {
        "word_count": 42,
        "value": "Among other canvases, the most significant is the \u201cLean Canvas\u201d adapted by Ash Maurya. \u201cThe Lean Canvas is adapted from Alex Osterwalder\u2019s Business Model Canvas and optimized for the Lean Startup methodology with a big emphasis on finding customer problems worth solving.\u201d\u00b2\u2074\u2079"
    },
    {
        "word_count": 42,
        "value": "advantage, not only to understand the deep reasons behind the principles for writing good software, but also to understand the systemic problems arising in organizations. This is because System Thinking offers a generic set of principles applicable to every kind of System."
    },
    {
        "word_count": 42,
        "value": "Nevertheless, facts are with the few, which slowly over time conquer respect. But far from making the impact they want, the team as a whole is still delivering neither quality nor quantity, strangled by an unreachable consensus and inevitable, growing technical debt."
    },
    {
        "word_count": 41,
        "value": "The concept of six degrees of freedom can be used as a metaphor for code behaviors and can be very useful when writing tests. The idea is that we stay in one behavior until we are sure that behavior is completed."
    },
    {
        "word_count": 41,
        "value": "Why did we not write the test for number 3 after the test for number 2? The reason is number 3 would add new behavior to the code base, and we haven\u2019t finished implementing the behavior we are working on yet."
    },
    {
        "word_count": 41,
        "value": "The first time I came in contact with object calisthenics was in a meetup in London with my friend Ger M\u00e1n. We were so overwhelmed that we decided not to write any tests in order to focus on understanding this concept."
    },
    {
        "word_count": 41,
        "value": "\u2022 \u201cCode Smells,\u201d SourceMaking.com\u2077\u2079 \u2022 \u201cNo Silver Bullet \u2013 Essence and Accident in Software Engineering,\u201d Fredrick P. Brooks Jr.\u2078\u2070 \u2022 \u201cOut of the tar pit,\u201d Ben Mosley and Peter Marks\u2078\u00b9 \u2022 \u201cSimple Made Easy,\u201d Rich Hickey\u2078\u00b2 \u2022 \u201cSoftware Development AntiPatterns,\u201d SourceMaking.com\u2078\u00b3"
    },
    {
        "word_count": 41,
        "value": "If you have read the \u201cgang of four\u201d (GOF) book Design Patterns, one of the guiding principles mentioned in the introduction is \u201cprogram to an interface, not an implementation.\u201d One advantage is that it opens the doors for using Test Doubles."
    },
    {
        "word_count": 41,
        "value": "CQS or Command-Query Separation is a principle that states that a software interface abstraction is designed with two types of methods. One method type is known as a Command method, and the other method type is known as a Query method.\u2078\u2076"
    },
    {
        "word_count": 41,
        "value": "\u2022 A Command method modifies or mutates the state underneath the interface, but does not answer any portion of that state. \u2022 A Query method answers the current state beneath the interface, but must not modify that state before answering it."
    },
    {
        "word_count": 41,
        "value": "\u2022 When you are able to break dependencies to allow testing. \u2022 When you are able to add tests to previously untested code. \u2022 When you are able to refactor production legacy code. \u2022 When you cannot tolerate bad names anymore."
    },
    {
        "word_count": 41,
        "value": "The first time I heard about Design Patterns I was still in Italy, in one of my first jobs. A colleague was talking about a previous interview: \u201c\u2026when they started asking me about design patterns, I knew I was doomed! Ciaone!\u201d"
    },
    {
        "word_count": 41,
        "value": "\u2022 Design Patterns: Elements of Reusable Object-Oriented Software, Erich Gamma, et al.\u00b9\u00b9\u2075 \u2022 Head First Design Patterns: A Brain Friendly Guide, Eric Freeman, et al.\u00b9\u00b9\u2076 \u2022 Patterns of Enterprise Application Architecture, Martin Fowler, et al.\u00b9\u00b9\u2077 \u2022 Refactoring to Patterns, Joshua Kerievsky\u00b9\u00b9\u2078"
    },
    {
        "word_count": 41,
        "value": "In simple terms, the Liskov Substitution Principle (LSP) says that derived classes should keep promises made by base classes. This also applies to interfaces, and it means that classes that implement some interface should keep the promises made by that interface."
    },
    {
        "word_count": 41,
        "value": "\u2022 \u201cA Case for Outside-In Development,\u201d Sandro Manusco\u00b9\u2079\u2077 \u2022 \u201cThe London School of Test Driven Development,\u201d Emily Bache\u00b9\u2079\u2078 \u2022 \u201cMocking as a Design Tool,\u201d Sandro Manusco\u00b9\u2079\u2079 \u2022 \u201cOutside-In development with Double Loop TDD,\u201d Emily Bache\u00b2\u2070\u2070 \u2022 \u201cTell, Don\u2019t Ask,\u201d Alec Sharp\u00b2\u2070\u00b9"
    },
    {
        "word_count": 41,
        "value": "After few weeks, we delivered an amazing system despite a restricted startup budget. Jos\u00e9 and I were very proud of the achievement, and in the process developed a strong professional relationship based on mutual respect that has lasted through the years."
    },
    {
        "word_count": 41,
        "value": "But if anyone has not yet got the concepts, I shall teach him to use the words by means of examples and by practice. \u2013 And when I do this I do not communicate less to him than I know myself.\u201d"
    },
    {
        "word_count": 41,
        "value": "The best way to fight misunderstanding is by being as clear as possible when discussing require- ments. Having a shared vocabulary for identifying business concepts is fundamental, but that\u2019s not enough when functionality needs to be injected into an information system."
    },
    {
        "word_count": 41,
        "value": "excelling only in pure technical aspects is often not enough to achieve real effectiveness. Sometimes it is important to be able to step out of the comfort zone of sitting behind the screen and take actions that enable communication to happen."
    },
    {
        "word_count": 41,
        "value": "Here a good compromise can be to delay the implementation of the infrastructural boundary until thesystemrequiresscalingcapabilities.Usingthedesignprinciplesexplainedintheprevioussection, itispossibletokeepthelogicalseparationbetweenallthemoduleswithoutforcingtheinfrastructure tofollow.Additionally,aparticularfocusontheisolationofthedatapersistenceanditsaccessallows us to have a system easy to scale without paying the price of the infrastructural complexity until it is justified by business needs."
    },
    {
        "word_count": 41,
        "value": "Incomplexenvironments,thekeyfactorinminimizingtheeffectsofboundedrationalityisaccessto therightinformationformakingdecisions.\u00b3\u00b9\u00b3Basically,silosserveasboundaries,limitingthespread of knowledge in organizations, preventing holistic understanding. This makes different departments behave more like different entities than parts within the same organization. In consequence, this promoteswhat Brandolini callstheunevendistribution of expertise.\u201cUsually we\u2019llhaveto deal with differentknowledgesandexpertise,andtheinformationwe\u2019llachievecanonlybelocallyconsistent: nobody holds the whole truth.\u201d"
    },
    {
        "word_count": 41,
        "value": "The The first transformation is not enough to make the test pass, so we apply the second transformation: nil to constant. This is enough to make the test pass, so we stop evolving the code until we have a failing test."
    },
    {
        "word_count": 41,
        "value": "{ 38 {1000, \"M\"}, 39 {900, \"CM\"}, 40 {500, \"D\"}, 41 {400, \"CD\"}, 42 {100, \"C\"}, 43 {90, \"XC\"}, 44 {50, \"XL\"}, 45 {40, \"XL\"}, 46 {10, \"X\"}, 47 {9, \"IX\"}, 48 {5, \"V\"}, 49 {4, \"IV\"}, 50 {1, \"I\"}, 51"
    },
    {
        "word_count": 41,
        "value": "Too low Cohesion Too low Cohesion \u2013 Class misses behavior. Too low Cohesion \u2013 Duplication instead of encapsulation. Too low Cohesion Divergent Change Cohesion/Coupling Duplicated Code Cohesion/Coupling Feature Envy Too high Coupling and too low Cohesion \u2013 Data and behavior in"
    },
    {
        "word_count": 40,
        "value": "We have identified a journey that could take the most diligent readers to mastery in a matter of weeks. If you are prepared to spend some time and effort going through the material, you will improve as a software developer."
    },
    {
        "word_count": 40,
        "value": "We have used some big words in the previous paragraphs. Don\u2019t worry if you are unfamiliar with them. That is what this book is here for. We hope you find it inspiring \u2013 or at least interesting. Explore and enjoy!"
    },
    {
        "word_count": 40,
        "value": "We are so used to having rules to observe that many of us seem to be lost without them. Rules are obviously useful, but can unfortunately lead to the most dangerous habit for a software developer: switching off critical thinking."
    },
    {
        "word_count": 40,
        "value": "Run the test and make sure it\u2019s green. Write a new failing test since we do not have enough examples to prove the behavior we are implementing yet. When I fizzbuzz number 2, I get back a string representing it"
    },
    {
        "word_count": 40,
        "value": "Transformation 11 \u2013 Statement -> recursion We can make use of full recursion without worrying if it is tail recursive or not. Transformation 12 \u2013 Expression -> function Extract complex logic into simpler functions. Transformation 13 \u2013 Variable -> mutation"
    },
    {
        "word_count": 40,
        "value": "\u2022 Extract private methods from deep conditionals. \u2022 Extract smaller private methods from long methods, and encapsulate cryptic code in private methods. \u2022 Return from methods as soon as possible. \u2022 Encapsulate where we find missing encapsulation. \u2022 Remove duplication."
    },
    {
        "word_count": 40,
        "value": "Code smells consequence Long Method Long Method / Duplicated Code Primitive Obsession / Duplicated Code / Shotgun Surgery Divergent Change / Large Class Message Chains Don\u2019t abbreviate NA Keep all entities small No classes with more than two instance variables"
    },
    {
        "word_count": 40,
        "value": "In the beginning, Test Doubles became popular as an instrument for isolating tests from third-party libraries. Despite that being one of its use cases and still very useful, it is not the only one and perhaps not the most important."
    },
    {
        "word_count": 40,
        "value": "1 // Too much logic in the test 2 var username = new Random().Next(1, 11) % 2 == 0 3 ? \"Pedro\" 4 : string.Empty; 5 6 var pedro = new User(\"Pedro\"); 7 8 userServiceMock 9 .Setup(service => service.GetUser(username)) 10"
    },
    {
        "word_count": 40,
        "value": "Codewithouttestsisbadcode.Itdoesn\u2019tmatterhowwellwrittenitis;itdoesn\u2019tmatterhow pretty or object-oriented or well-encapsulated it is. With tests, we can change the behavior of our code quickly and verifiably. Withoutthem, wereally don\u2019t knowif ourcode is getting better or worse. To me, legacy code is simply code without tests.\u201d"
    },
    {
        "word_count": 40,
        "value": "The The values of the sides need to satisfy a particular relation for it to be a triangle as shown in the picture. So here we have the same validation problem, and validation must occur in the constructor as well."
    },
    {
        "word_count": 40,
        "value": "Implement a controller for an elevator system considering the following requirements. For evaluating purpose, assume that it takes one second to move the elevator from one floor to another and the doors stay open for three seconds at every stop."
    },
    {
        "word_count": 40,
        "value": "The beauty of this technique, in accordance with the quote of Alan Kay, resides in the \u201cservant approach\u201d afforded by the focus on the functionality provided to the world outside the class, rather than its internals. This has many benefits:"
    },
    {
        "word_count": 40,
        "value": "\u00b9\u2079\u00b9Wikipedia, \u201cAcceptance testing,\u201d https://en.wikipedia.org/wiki/Acceptance_testing \u00b9\u2079\u00b2International Software Testing Qualifications Board, \u201cISTQB Glossary\u201d http://glossary.istqb.org/search/ \u00b9\u2079\u00b3International Software Testing Qualifications Board, \u201cISTQB Glossary\u201d http://glossary.istqb.org/search/ \u00b9\u2079\u2074We will go more in detail on this subject in the next chapter. Patience is the virtue of the strong."
    },
    {
        "word_count": 40,
        "value": "Outside-In TDD is also commonly know as \u201cLondon school of TDD,\u201d acceptance test driven development (ATDD) or mockist TDD. In Outside-In TDD, we use mocks to sketch the design of parts of the system we don\u2019t know much about yet."
    },
    {
        "word_count": 40,
        "value": "The frustration of discovering that you have been building right the wrong thing is proportional to the time and effort you have spent building it. So it\u2019s better to make sure as early as possible that\u2019s not the case, right?"
    },
    {
        "word_count": 40,
        "value": "use beyond Toyota, and is now used within Kaizen, Lean manufacturing and Six Sigma. In other companies, it appears in other forms. Under Ricardo Semler, Semco practices \u201cthree whys\u201d and broadens the practice to cover goal setting and decision making.\u201d\u00b2\u2074\u2070"
    },
    {
        "word_count": 40,
        "value": "In our experience, one of the most evident consequences of this is the inability of organizations to evolve and adapt fast enough. This is another property of Systems as defined by John Gall in his amazing book, The Systems Bible:"
    },
    {
        "word_count": 40,
        "value": "In complex systems, context becomes the driving force; strategies and solutions are not safely repeatable. There are no silver bullets, and what worked before might not work tomorrow for a different situation since the new contextual information will be different."
    },
    {
        "word_count": 40,
        "value": "We agree with Alberto when he says that \u201cconservative organizations are usually reluctant to fully embrace the consequences of complexity. Risk-adverse culture manifests itself in the pursuit of proven solutions rather than adventurous experimental ones in controlled environments or forms.\u201d"
    },
    {
        "word_count": 40,
        "value": "(are [number expected] (= expected (fizzBuzz number)) 7 1 \"1\" 8 2 \"2\" 9 3 \"fizz\" 10 6 \"fizz\" 11 9 \"fizz\" 12 5 \"buzz\" 13 10 \"buzz\" 14 20 \"buzz\" 15 15 \"fizzbuzz\" 16 30 \"fizzbuzz\" 17 45 \"fizzbuzz\"))"
    },
    {
        "word_count": 39,
        "value": "with all production code covered by tests, thus increasing our confidence in the production code. This rule also helps to ensure all design decisions are made as a response to a behavior that our production code needs to implement."
    },
    {
        "word_count": 39,
        "value": "var fibs = [0, 1, 1, 2, 3, 5]; return fibs[index] var fibs = [0, 1, 1, 2, 3, 5, 8]; return fibs[index] 7 13 Scalar -> array(duplication) var fibs = [0, 1, 1, 2, 3, 5, 8, 13];"
    },
    {
        "word_count": 39,
        "value": "\u2022 Comments \u2022 Data Class \u2022 Data Clumps \u2022 Divergent Change \u2022 Duplicated Code \u2022 Feature Envy \u2022 Large Class \u2022 Lazy Class \u2022 Long Method \u2022 Long Parameter List \u2022 Message Chain \u2022 Primitive Obsession \u2022 Shotgun Surgery"
    },
    {
        "word_count": 39,
        "value": "Use Mocks for Commands in the Assert section Commands are all about side effects on other parts of the system, and Mocks are all about verifying the occurrence of a behavior (that is, that the side effects\u2019 trigger occurred)."
    },
    {
        "word_count": 39,
        "value": "The solution starts by assessing the behavior under test. Once that is identified, if we still have the problem, it might be time to act on the collaborators\u2019 design of the Subject Under Test. It might be solved by:"
    },
    {
        "word_count": 39,
        "value": "Michael Feathers, who coined the term \u201ccharacterization test,\u201d defines it as a test that describes (characterizes) the actual behavior of a piece of code. These tests protect the existing behavior of legacy code against unintended changes via automated testing."
    },
    {
        "word_count": 39,
        "value": "\u2022 Redirect output to a file. In this case, the output of the system is the console. To capture the system output, we can redirect the console to an in-memory stream and then save the stream to a file."
    },
    {
        "word_count": 39,
        "value": "Can we get by with a superficial understanding of the legacy code? If the answer is yes and the system under test has clear inputs and outputs, we can probably use the Golden Master technique or Approval Tests ."
    },
    {
        "word_count": 39,
        "value": "\u2022 When we find duplication in our code. (Don\u2019t forget the Rule of Three.) DRY violation. \u2022 When we break any object calisthenics rules. \u2022 When code exhibits code smells. \u2022 When code has low Cohesion or high Coupling."
    },
    {
        "word_count": 39,
        "value": "1 public interface IAmACar{ 2 void GoTo(Location location); 3 int CurrentMileage(); 4 } 5 6 public interface IUseGasoline : IAmACar{ 7 void RefillGasoline(int gallons); 8 } 9 10 public interface IUseElectricity : IAmACar{ 11 void RefillElectricity(decimal kiloWatts); 12 }"
    },
    {
        "word_count": 39,
        "value": "For each row in the \u201cCohesion / Coupling\u201d column, highlight the correct concept and then add a reason in the \u201cReason\u201d column. We created a few sample reasons you can use. In some cases, both Coupling and Cohesion apply."
    },
    {
        "word_count": 39,
        "value": "\u2022 Unit tests tell you when you are done \u2022 Self-documenting code \u2022 Once and only once, don\u2019t repeat yourself, redundancy is inertia \u2022 You aren\u2019t gonna need it, minimum number of classes and methods \u00b9\u2076\u2075Martin Fowler, \u201cBeckDesignRules,\u201d https://martinfowler.com/bliki/BeckDesignRules.html"
    },
    {
        "word_count": 39,
        "value": "We focus on the high-level concept of entropy, which can be seen in various aspects; all have mathematically proven equivalents. (We leave the math for the more curious readers \u2013 see the references at the end of this chapter).\u00b9\u2077\u2077"
    },
    {
        "word_count": 39,
        "value": "Anyprogram,asameantomoveinformationfromoneplacetoanotherorfromoneformtoanother, is nothing more than a system. So, if we think of writing a program as equivalent to building a system, while developing we can use a good deal of knowledge from Information Theory and apply it for guidance."
    },
    {
        "word_count": 39,
        "value": "Both. They are two different approaches, and different situations require different strategies. The question is not \u201cshould I use classic TDD or Outside-In TDD?\u201d but rather \u201cwhen should I use classic TDD and when should I use Outside-In TDD?\u201d"
    },
    {
        "word_count": 39,
        "value": "There are several commands for interacting with the environment. These commands are always composed of two parts: the action and the object. Usually the object is specified in the main description or in the result of the LOOK command."
    },
    {
        "word_count": 39,
        "value": "An order consists of an order date and a collection of products that a customer has added to their shoppingbasket.EachoftheseproductsissuppliedtoourcompanyJustInTimethroughanumberof third-party suppliers. As soon as an order is received by a supplier, the supplier will start processing the order."
    },
    {
        "word_count": 39,
        "value": "At an organizational level, one of the best ideas that we have seen recently on this topic is \u201cPopcornFlow,\u201d ideated by Claudio Perrone. The PopcornFlow method helps with the goal of embedding the change-enabling principle into one\u2019s work habits."
    },
    {
        "word_count": 39,
        "value": "A value stream is a notion borrowed from Lean manufacturing as the end-to-end sequence of value- addingactivitiesthatanorganizationundertakesinordertoproduceanoverallresultforacustomer, stakeholder or end-user, focused on both the production flow from raw material to end-product and the design flow from concept to realization."
    },
    {
        "word_count": 39,
        "value": "IfyouremembertheAlanKay\u2019squoteinthepreviouschapter,\u00b2\u2075\u2070themostimportantthinginmaking a great, growable system is designing how its modules communicate. The enabling factor here is modularity. Alan takes for granted that the system is fractally composed of modules and says that how they communicate is the key point."
    },
    {
        "word_count": 39,
        "value": "Furthermore, the challenging discussions with them have led us to clarify our own thoughts. We\u2019ve also acquired more insight about the concepts we have always understood, and the new ideas that have come along the way have been priceless."
    },
    {
        "word_count": 39,
        "value": "The goal of the workshop is set in the beginning: \u201cWe are going to explore the business process as a whole by placing all the relevant events along a timeline. We\u2019ll highlight ideas, risks and opportunities along the way\u201d"
    },
    {
        "word_count": 38,
        "value": "The most difficult step ever is the first step. It comes with doubts, uncertainties, and all sort of fears. If you defy all odds and take it, your confidence will replicate very fast and you\u2019ll become a master!\u201d"
    },
    {
        "word_count": 38,
        "value": "\u2022 When you can apply the TPP table to evolve your code. \u2022 When you are proficient with TDD practices. In the next chapter we move to design, so make sure you have TDD practices under your belt."
    },
    {
        "word_count": 38,
        "value": "In the beginning this can cause some frustration, like the one I felt on my first encounter. However, this is a very powerful design tool. In my humble opinion, the benefits outweigh the pain by a large margin."
    },
    {
        "word_count": 38,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise. \u2022 Consider using object calisthenics to drive design decisions (New habit)."
    },
    {
        "word_count": 38,
        "value": "\u2022 \u201cDoes TDD really lead to good design?\u201d Sandro Mancuso\u2075\u2074 \u2022 \u201cImproving code quality with Object Calisthenics,\u201d Diego Mariani\u2075\u2075 \u2022 \u201cObject Calisthenics,\u201d William Durand\u2075\u2076 \u2022 Object calisthenics paper\u2075\u2077 \u2022 \u201cObject calisthenics: write better object oriented code,\u201d Fran Dieguez\u2075\u2078"
    },
    {
        "word_count": 38,
        "value": "There is a saying in software development: All problems can be solved with another layer of abstraction. Refactoring is the choreography we use to move code from design A to design B in a safe and efficient way."
    },
    {
        "word_count": 38,
        "value": "Implement new functionality starting from the tests, either by writing new tests or by adapting duplicated old tests. Make sure to write new code using TDD practices. Once all new functionality is implemented, move to the migration step."
    },
    {
        "word_count": 38,
        "value": "The same is valid for fixed types, such as those defined by the runtime or external libraries. So how do we test the interaction with an external library? The trick here is to write a thin wrapper to"
    },
    {
        "word_count": 38,
        "value": "public Copier(ISource source, IDestination destination) {...} 4 public void Copy() {} 5 } 6 7 public interface ISource 8 { 9 char GetChar(); 10 } 11 12 public interface IDestination 13 { 14 void SetChar(char character); 15 }"
    },
    {
        "word_count": 38,
        "value": "Is it important to understand the legacy code in detail? If the answer is yes, Characterization Tests are probably the best solution. This is a slow process, but gives us the best insight on how legacy code works."
    },
    {
        "word_count": 38,
        "value": "Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it."
    },
    {
        "word_count": 38,
        "value": "Class Cohesion: As the holistic Cohesion at class level deducted from fields, methods and their interactions. Method Cohesion: As the Cohesion of the individual methods, focusing on how \u2018single- minded\u2019 they are. \u00b9\u00b2\u00b9https://docs.oracle.com/javase/8/docs/api/java/util/package-summary.html \u00b9\u00b2\u00b2Wikipedia, \u201cBroken windows theory,\u201d https://en.wikipedia.org/wiki/Broken_windows_theory"
    },
    {
        "word_count": 38,
        "value": "We should always favor the reader when writing code. Clarity can be achieved by naming, but also by creating meaningful abstractions that encapsulate details. Often the need for new abstractions emerges from duplication issues that must be solved."
    },
    {
        "word_count": 38,
        "value": "The importance of the \u201cmess\u201d is highlighted by the Rule of Three, which stops us from premature refactors,maximizingthefeedbacktofindtherightpattern.ThesecretinthisstyleofTDDishaving the right amount of \u201cmess\u201d to provide feedback for design decisions, but no so much that makes refactoring too painful."
    },
    {
        "word_count": 38,
        "value": "1 INSIDE THE BUILDING. 2 YOU ARE INSIDE THE BUILDING, A WELL HOUSE FOR LARGE SPRINGS. 3 THERE ARE SOME KEYS ON THE FLOOR. 4 > TAKE KEYS 5 KEYS: TAKEN. 6 > DROP KEYS 7 KEYS: DROPPED."
    },
    {
        "word_count": 38,
        "value": "The key to our success resided in the direct, continuously open communication flow between us, without intermediates, which created a super-fast feedback loop. Hence, we naturally converged on the optimal solution without wasting any time in the process."
    },
    {
        "word_count": 38,
        "value": "Shingo differentiates betweenmistakes that are inevitable as part of the nature of human beings and defects that are mistakes that manage to get through the system and reach the customer. Poka-yoke seeks to prevent mistakes from becoming defects."
    },
    {
        "word_count": 38,
        "value": "That was the real ingredient missing in other teams, where too many egos clashed, competing for doing things their way instead of being open to trusting each other without caring about who suggested this idea or that solution."
    },
    {
        "word_count": 38,
        "value": "The iteration cycle consists of seven steps, each mapped to a column of the board, which is essential to give visibility about the state of the learning activities. The initial letter of each step forms the word \u201cPOPCORN.\u201d"
    },
    {
        "word_count": 37,
        "value": "ThisbookisalsodedicatedtomyKungFuteacher,MasterYangLinShengandhisfamily.Heaccepted me as one of his students almost twenty years ago and showed me the real meaning of Kung Fu. It is a lifelong lesson to learn but I am enjoying every single step in this journey."
    },
    {
        "word_count": 37,
        "value": "This book is about technical practices in the context of Agile software development. It is aimed at software developers looking to improve their technical practices. Software coaches may also find it helpful as a teaching reference manual."
    },
    {
        "word_count": 37,
        "value": "The Agile Manifesto does not mention any technical practices. SCRUM and Kanban do not specify any either. Can we use the Software Craftsmanship manifesto? No specific technical practices are discussed there either. What about Extreme Programming (XP)?"
    },
    {
        "word_count": 37,
        "value": "As soon as you feel confident, you can help others along the path. Help by answering questions and sharing your experience. Helping others is a great way to challenge your knowledge and internalize what you have learned!"
    },
    {
        "word_count": 37,
        "value": "To perform a test, an operator would press the buttons on the GUI. The granularity of the operations was so fine that to run a test, an operator had to press several buttons in a specific sequence."
    },
    {
        "word_count": 37,
        "value": "2. Obvious implementation When you are sure of the code you need to write, write it, and see the test go green! Most of the time you will use this method to move forward with TDD quickly."
    },
    {
        "word_count": 37,
        "value": "So, to extend the metaphor, if you are testing a particular degree of freedom (roll, for example) stay on it until you are convinced it is working as expected, then move on to surge, heave, sway. Avoid"
    },
    {
        "word_count": 37,
        "value": "TPP is quite important in the context of TDD as it defines obvious implementation. Before finding out about TPP, I had been using instinct/intuition/experience and feedback. TPP brings a bit of process and rationale to evolving code."
    },
    {
        "word_count": 37,
        "value": "With this approach, we do not add getters/properties to our class and expand the class interface just for the purpose of testing. There are other benefits as well, but we will discuss those later in the book."
    },
    {
        "word_count": 37,
        "value": "The idea of refactoring is to change the design without changing the behavior of code. We should refactor both production code and tests because having solid and well-designed tests is as important asproductioncode.Weshouldleavenobrokenwindowsonourcodebase,\u2075\u2079asthisencouragesother windows to be broken."
    },
    {
        "word_count": 37,
        "value": "Smells are not yet the principles or values behind the rules; they are somewhere in between. If we break rules, we end up with design and code issues. Code smells are the visible symptoms of those problems."
    },
    {
        "word_count": 37,
        "value": "These are high-level smells, the tip of the iceberg. We should treat these smells as flashing warning signs. They definitely alert for a big problem, though they provide little information on the real cause of the problem."
    },
    {
        "word_count": 37,
        "value": "Dummy objects are needed only to complete the parameters\u2019 list of a method, but are never actually used. They are not very common in well-designed systems since they are often an indication of room for design improvement."
    },
    {
        "word_count": 37,
        "value": "Another flavor of this problem arises when we have a complicated procedure to set up and assert on Objects which are at the same time both Stubs and Mocks. Sometimes is fine to not follow the CQS"
    },
    {
        "word_count": 37,
        "value": "What should be avoided, instead, is what we call strong violation occurrences when a query has the side effect of changing any state of the system. This is a clear violation of the Principle of Least Astonishment\u2078\u2079"
    },
    {
        "word_count": 37,
        "value": "\u2022 They almost never apply out-of-the-box, but need to be shaped and customized to match a particular scenario. \u2022 They fail miserably to express business concepts and domain vocabulary, focusing on imple- mentation details instead of behavior."
    },
    {
        "word_count": 37,
        "value": "Couplingmeasuresthedegreeofinterdependencebetweensoftwarecomponents.Inobject-oriented design, we want Coupling to be as low as possible, but not lower, or we end up with software that does very little. This allows us to make changes in a component without impacting other components."
    },
    {
        "word_count": 37,
        "value": "As shown in the previous table, we can refer to object calisthenics and other heuristics to avoid creating code smells when writing the code in the first place. This has an effect also on Coupling and Cohesion."
    },
    {
        "word_count": 37,
        "value": "In object-oriented programming, the Single Responsibility Principle (SRP) states that every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility."
    },
    {
        "word_count": 37,
        "value": "What What if we now need to enforce an execution order and, for whatever reason, must have the Brand, Engine and Color specified in exactly that particular sequence? Is it even possible without Connascence of Execution Order?"
    },
    {
        "word_count": 37,
        "value": "Acceptance tests are also similar to unit tests since they can only have one of two states: pass or fail. Where they differ is with the goal; acceptance tests are related to a use case scenario and"
    },
    {
        "word_count": 37,
        "value": "If you see things in this way, most of the activities we do \u2013 methodological and technical \u2013 derive from an Agile mindset and are oriented to gathering quick feedback for the different aspects of our work."
    },
    {
        "word_count": 37,
        "value": "\u00b2\u2070\u2075There are many ways to improve these kind of defects by leveraging the principles of Systems Theory, but it is out of scope for this \u00b2\u2070\u2076Wikipedia, \u201cClaude Shannon,\u201d https://en.wikipedia.org/wiki/Claude_Shannon \u00b2\u2070\u2077Wikipedia, \u201cA Mathematical Theory of Communication,\u201d https://en.wikipedia.org/wiki/A_Mathematical_Theory_of_Communication \u00b2\u2070\u2078https://en.wikipedia.org/wiki/Chinese_whispers"
    },
    {
        "word_count": 37,
        "value": "TheBusinessModelCanvasshowsinitscenterthemostimportantthingtoidentifyforanybusiness: the valuepropositions. It is basically the reason for the business to exist, the combination of products andservicesitprovidestoitscustomersandthecorevaluethattheysupply.Onewaytoidentifythis value is for an owner to specify what he/she wants customers to remember about their interaction with the company."
    },
    {
        "word_count": 37,
        "value": "Accordingly to Claudio, PopcornFlow performs best in complex domains where the \u201cproblems\u201d are, essentially, system probes. To a great extent, what the method does is use uncontrolled parallel experiments to explore options and change the system dynamics."
    },
    {
        "word_count": 37,
        "value": "There are several levels of depth corresponding to several flavors of EventStorming, each one appropriate for a different context. Alberto says that he likes to think about it as \u201cpizzas,\u201d with a common base but different toppings."
    },
    {
        "word_count": 37,
        "value": "Unfortunately, in complex domains, there is no such thing as a \u201cproven solution.\u201d Like in football, hiring the best coach with the longest winning streak does not guarantee that your team will win the championship next year."
    },
    {
        "word_count": 37,
        "value": "Pedro has over 25 years of experience in the software industry. He has worked in finance, aviation, consultancy, media and retail industries and built a wide range of software, ranging from embedded systems to cloud-based distributed applications."
    },
    {
        "word_count": 36,
        "value": "When I started my career, I worked on software for television broadcast, mainly developing computer graphics for sports, news and so on. Unknowingly, I was up for a stressful challenge as I could never be late."
    },
    {
        "word_count": 36,
        "value": "When I was developing software for automated cash machines, we created a simple graphical user interface (GUI) to test our code. The GUI was a plain window full of small buttons, each performing a specific operation."
    },
    {
        "word_count": 36,
        "value": "This rule ensures that production code is only produced as a consequence of the need to implement a specific behavior, represented by one or more unit tests. If we follow this rule, we should end up"
    },
    {
        "word_count": 36,
        "value": "25 NOT 26 |_ OR 27 |_ OR 28 | |_ TRUE 29 | |_ TRUE 30 |_ AND 31 |_ TRUE 32 |_ FALSE 33 34 35 \"TRUE OR TRUE OR NOT TRUE AND FALSE\""
    },
    {
        "word_count": 36,
        "value": "Be strict about staying on green. We learned that in refactoring, it is more effective to let go of something as soon as tests break, rather than stubbornly trying to fix things to make tests pass."
    },
    {
        "word_count": 36,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise. \u2022 Consider using object calisthenics to drive design decisions."
    },
    {
        "word_count": 36,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise \u2022 Consider using object calisthenics to drive design decisions."
    },
    {
        "word_count": 36,
        "value": "Use Stubs for Queries in the Arrange section Stubs\u2019 main task is about \u201cmaking happy noises.\u201d A way to achieve this is, when return data is required, to return canned data from dependencies. Perfect for queries."
    },
    {
        "word_count": 36,
        "value": "Using Test Doubles is a technique for software design. That\u2019s why it is important to only mock/stub typesthatbelongtotheteam\u2019scodebase.ThekeyconcepthereisthatiftheTestDoublesarecoupled with an external interface, they cannot change the design to respond to requirements that arise from the process."
    },
    {
        "word_count": 36,
        "value": "The exercise is to implement the character copier using Test Doubles for the source and the destination (try using Spies \u2013 manually written Mocks \u2013 and Mocks written with a mocking framework). Start from these definitions:"
    },
    {
        "word_count": 36,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise. \u2022 Consider using object calisthenics to drive design decisions."
    },
    {
        "word_count": 36,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise. \u2022 Consider using object calisthenics to drive design decisions."
    },
    {
        "word_count": 36,
        "value": "The problem is that, in our experience, we have seen many examples of software overengineering driven by applying Design Patterns extensively \u201cby the book.\u201d We usually call this \u201cDesign Pattern Golden Hammer\u201d or \u201cDesign Patterns Obsession.\u201d"
    },
    {
        "word_count": 36,
        "value": "In the following table, we have grouped code smells in relation to Coupling or Cohesion excesses. Because Cohesion and Coupling are more abstract concepts, we can make use of code smells to help us detect imbalances."
    },
    {
        "word_count": 36,
        "value": "What What happens if we have to, for example, add another way to visualize the Engine Status report on an alternative display for enhanced access? The obvious way would be to add a method like this:"
    },
    {
        "word_count": 36,
        "value": "It makes sense to follow rules in the order they are enunciated. Applying these rules, we can create correct, compact, expressive and succinct code. The four rules of simple design define what good design looks like."
    },
    {
        "word_count": 36,
        "value": "We can use the gravity force as an analogy for Cohesion and Coupling. Cohesion would be planet Earth gravity, pulling everything inward. Coupling would be the Sun, pulling planet Earth and keeping it in its orbit."
    },
    {
        "word_count": 36,
        "value": "Fixing Cohesion had an effect on Coupling and Connascence. Fixing Coupling had an effect on Cohesion and Connascence. Fixing Connascence had an effect on Coupling and Cohesion. It\u2019s as if they are all the same force!"
    },
    {
        "word_count": 36,
        "value": "Cohesion, Coupling, Connascence, SOLID principles and code smells are different manifestations of the same thing, and they are deeply connected. This is similar to electromagnetism where there is always an interrelation between electric and magnetic fields."
    },
    {
        "word_count": 36,
        "value": "1 > GO N => move to the NORTH 2 > GO E => move to the EAST 3 > GO S => move to the SOUTH 4 > GO W => move to the WEST"
    },
    {
        "word_count": 36,
        "value": "Ifwethinkabouttheverydeepprinciplesonwhichsoftwaredevelopersbasetheirwork,it\u2019samazing to realize that many concepts are not new at all. Using tests in our code is an effective way to reduce bugs, but the idea has been similarly applied in other contexts several decades ago."
    },
    {
        "word_count": 36,
        "value": "To apply the TOC, you should consider the concept of throughput of a system as the rate at which it delivers value. In every value stream, there is always a constraining step limiting the overall throughput."
    },
    {
        "word_count": 36,
        "value": "In our experience, we have found that the best way to achieve understanding is by asking questions. InItalythereisaproverb:\u201cChiederee\u2019lecito,risponderee\u2019cortesia.\u201dNeverbeafraidtoaskquestions. However, to maximize the value we get from the answers, it is important to ask the right questions."
    },
    {
        "word_count": 36,
        "value": "Unfortunately, most of large companies are organized into sealed departments, and communication between them is often very difficult and ineffective. This makes it hard and sometimes impossible to reach an understanding of the business as whole."
    },
    {
        "word_count": 36,
        "value": "Recruiting was sorted there and then. The essence of pragmatism. I am proud of having a good network of respectable and knowledgeable team players who enjoyed working with me and would love to do it again."
    },
    {
        "word_count": 36,
        "value": "Essentially, deductive rationality in a complex System tends to break down. The obvious reason is that beyond a certain level of complexity, the human mind reaches its natural limit to cope; hence, human rationality is bounded."
    },
    {
        "word_count": 36,
        "value": "This overview of EventStorming (and the pictures) borrows from Alebrto Brandolini\u2019s book, Introducing EventStorming: An Act of Deliberate Collective Learning, with his permission. To learn more, see the Resources section at the end of this appendix."
    },
    {
        "word_count": 36,
        "value": "We can\u2019t just sit back and wait for feedback to be offered, particularly when we\u2019re in a leadership role. If we want feedback to take root in the culture, we need to explicitly ask for it.\u201d"
    },
    {
        "word_count": 35,
        "value": "This is not a beginner\u2019s book on how to program. We expect readers to be comfortable with at least one programming language and to be able to write unit tests using any unit testing framework."
    },
    {
        "word_count": 35,
        "value": "We use the Agile term as a wide umbrella covering agile principles and practices as well as most methodologies associated with it. As for technical practices within agile, we will need to explore a bit."
    },
    {
        "word_count": 35,
        "value": "Sometimes we are overwhelmed by the amount of rules. Most of the time we don\u2019t really even know the exact rules, yet we are able to behave correctly in (almost) any situation. That\u2019s because when"
    },
    {
        "word_count": 35,
        "value": "We did not have automated sequences, nor were we generating any reports. Nevertheless, we were very proud of our test GUIs. The quality assurance engineers loved them, and they were a lifesaver on many occasions."
    },
    {
        "word_count": 35,
        "value": "So you have written your first test, and it is failing for the right reason. Now what? How do you make it pass (make it green)? There are a few simple ways to achieve this."
    },
    {
        "word_count": 35,
        "value": "Fake it is a well-defined method; we just return a value that works, and this passes the test. Triangulation is also well-defined; we just write a new failing test that forces the code to change."
    },
    {
        "word_count": 35,
        "value": "When I am coaching software developers, the object calisthenics session is usually the first big challenge.Objectcalisthenicsforcespeopletothinkdifferentlyaboutsoftwaredesign,notbyadding anything, but by removing. Object calisthenics is about constraining software design decisions; it is about what you cannot do."
    },
    {
        "word_count": 35,
        "value": "From our experience, we learned that 80% of the value in refactoring comes from improving readability and understandability of code. The remaining 20% comes from design changes. We will thus focus on the first 80%."
    },
    {
        "word_count": 35,
        "value": "\u2022 When we find duplication in our code. (Don\u2019t forget the Rule of Three.) DRY violation. \u2022 When we break any object calisthenics rules. \u2022 When code exhibits code smells that we did not expect."
    },
    {
        "word_count": 35,
        "value": "Start by identifying the smells, then slowly refactor the code. Remember to keep the tests passing at all times during the refactor. It\u2019s okay to revert back to a previous working state at any moment."
    },
    {
        "word_count": 35,
        "value": "Despite that little drag, we succeeded in delivering the backlog in time and with very few bugs. The company finally allowed us to introduce the frameworkswe needed to optimize the amount of work not done."
    },
    {
        "word_count": 35,
        "value": "When the instrument detects an error situation during executing (note that the Execute method will already have returned the control flow to the caller due to its asynchronous implementation) then it fires the Error event."
    },
    {
        "word_count": 35,
        "value": "Sometimes it is not possible to write tests due to excessive Coupling. If your code is dealing with external dependencies, we can break the dependency to allow the Subject Under Test to be exercised independently."
    },
    {
        "word_count": 35,
        "value": "Componentssharedatathroughparameters;it\u2019saverycommonpracticetocallamethodonanother component. Compared with message passing, a component needs to know a bit more detail about the other component in order to perform a method call. We can refactor to message-passing to lower the Coupling."
    },
    {
        "word_count": 35,
        "value": "We are software developers, so the principle says that we shouldn\u2019t mislead the developers who will work on the code in the future with namings that are not coherent with the behavior inside the constructs."
    },
    {
        "word_count": 35,
        "value": "The power of the concept of Connascence resides in the fact that it is not just limited to code! Let\u2019s see this real life story to understand better the worst type of Connascence of all."
    },
    {
        "word_count": 35,
        "value": "So,inthelongrun,developmenteffectiveness (understandingandactingquicklyandeffectivelyona software system) depends on design. That is what really gives us the keys for controlling the future; the better the design, the more the control. That\u2019s why we focus so much on it."
    },
    {
        "word_count": 35,
        "value": "That\u2019s not good news because it means that there is a combinatorial entropy growth for every new field we add. It\u2019s not a surprise that the Single Responsibility Principle makes a lot of sense now."
    },
    {
        "word_count": 35,
        "value": "The great advantage is that once the walking skeleton is working, it means that all the infrastructure we need for running our code and acceptance tests is set up, successfully connected and ready to grow."
    },
    {
        "word_count": 35,
        "value": "The Business Model Canvas was initially proposed by Alexander Osterwalder based on his earlier work on Business Model Ontology. Since the release of Osterwalder\u2019s work in 2008, new canvases for specific niches have appeared.\u201d \u00b2\u2074\u2078"
    },
    {
        "word_count": 35,
        "value": "The process starts with the identification of the flow of domain events, represented by orange post- itsandaname.Eventsarewritteninpasttense(ordersubmitted,paymenttaken,etc.).Thistemporal flow forms the narrative of the business, and the events will be the building blocks of the business-"
    },
    {
        "word_count": 35,
        "value": "Object calisthenics Code smell Only one level of indentation per Long Method method. Don\u2019t use the ELSE keyword. Long Method / Duplicated Code Wrap all primitives and strings. Primitive Obsession First class collections. Divergent Change"
    },
    {
        "word_count": 34,
        "value": "This had little resemblance to Test-Driven Development (TDD), but at that time, TDD had not been \u201cinvented\u201d yet. However, the high value provided by that mechanism made me aware of the importance of tests."
    },
    {
        "word_count": 34,
        "value": "Write some code to generate the Fibonacci number for the nth position. Example: int Fibonacci(int position). The first Fibonacci numbers in the sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.\u00b3\u00b2"
    },
    {
        "word_count": 34,
        "value": "# Transformation 1 {} -> nil 2 Nil -> constant 3 Constant -> constant+ 4 Constant -> scalar 5 Statement -> statements 6 Unconditional -> conditional 7 Scalar -> array 8 Array -> container"
    },
    {
        "word_count": 34,
        "value": "1 \"(TRUE OR (TRUE OR ((NOT TRUE) AND FALSE)))\" 2 3 OR 4 |_ TRUE 5 |_ OR 6 |_ TRUE 7 |_ AND 8 |_ NOT 9 | |_ TRUE 10 |_ FALSE"
    },
    {
        "word_count": 34,
        "value": "Object calisthenics is a simple ruleset that, if applied correctly, should have a big effect on your design. For the time being, follow these rules. We will discuss the principles behind them later on."
    },
    {
        "word_count": 34,
        "value": "With the latter approach, we have a home for all behaviors that belong in the collection instead of adding those behaviors to the invoice class. This way we achieve a better separation of concerns."
    },
    {
        "word_count": 34,
        "value": "\u2022 The more instance variables, the lower the Cohesion within the class. \u2022 Usually classes with more than one instance variable are orchestrators, and classes with one instance variables are actuators. Separate the responsibilities."
    },
    {
        "word_count": 34,
        "value": "This is by far the most common type of Coupling. Based on the nature of the method call, its locality and the parameters exchanged we can further identify several different types of Interaction Coupling:"
    },
    {
        "word_count": 34,
        "value": "Components share a common data structure. We should avoid passing data structures amongst components. Remember the first class collections rule in Object Calisthenics? It helps to reduce this type of Coupling to Data Coupling."
    },
    {
        "word_count": 34,
        "value": "The ideal scenario, when a method performs a particular function interacting with elements be- longing to the component because they are all needed to perform that same function, responsibility, and/or share the same concern."
    },
    {
        "word_count": 34,
        "value": "Whatdoesitmeanforaclassthatitshouldkeepthepromisesbythebaseclass?Everythingregarding the LSP is about the behavior of a class. So the \u201cis-a\u201d relationship in OOP has to be seen from the perspective of exposed behavior, not the internal structure or the abstract meaning."
    },
    {
        "word_count": 34,
        "value": "Now, let\u2019s suppose a new kind of car is coming out. This car doesn\u2019t run on gasoline; it\u2019s an electric car. What happens if we just add it to the current interface, like this:"
    },
    {
        "word_count": 34,
        "value": "Degreeisthesizeoftheimpactasestimatedbythenumberofoccurrencesandthenumberofentities it affects. The acceptability of Connascence is strongly related to its degree: the higher the degree, the higher the pain when a modification is needed. We should aim to have minimal possible degree."
    },
    {
        "word_count": 34,
        "value": "The classic TDD revolves around the idea of creating \u201cmessy\u201d code and constantly refactoring it to clean it up. The \u201cmess\u201d in classic TDD is critical since it provides feedback for refactoring the design."
    },
    {
        "word_count": 34,
        "value": "In engineering and its various sub-disciplines, acceptance testing is a test conducted to determine if the requirements of a specification or contract are met. It may involve chemical tests, physical tests, or performance tests."
    },
    {
        "word_count": 34,
        "value": "\u2022 From outside to the inside \u2022 From high-level responsibilities to low-level details \u2022 From the main goal to the steps to reach it \u2022 From strategic to tactical \u2022 Following the dependency flow"
    },
    {
        "word_count": 34,
        "value": "1. We can create a strong dependency and let the oven be responsible for it. OR 2. We can inject it so we could change it at runtime and test the generator in isolation."
    },
    {
        "word_count": 34,
        "value": "The causes of defects lie in worker errors, and defects are the results of neglecting those errors. It follows that mistakes will not turn into defects if worker errors are discovered and eliminated beforehand.\u201d"
    },
    {
        "word_count": 34,
        "value": "Here is a brief example of how a simple acceptance test could look without dependencies, just pushing methods implementation at the bottom of the file \u2013 enough to have a base for the discussions:"
    },
    {
        "word_count": 34,
        "value": "Here Here is another brief example without heavyweight dependencies, just using EasyBdd micro- framework based on one abstract class. It would easily allows the previous example to reuse the methods inside the Given/When/Then/And structures:\u00b2\u00b9\u2074"
    },
    {
        "word_count": 34,
        "value": "This is the story of what happened when Eldon and I (Marco) had the green light for starting \u201cTeam C,\u201d after we suggested our plan for saving the project when it was \u201cred flagged.\u201d\u00b2\u2079\u00b3"
    },
    {
        "word_count": 34,
        "value": "Fromthenon,Ispentthenexttwoweeksmobprogramming,tacklingtheinitialstoriesofthebacklog with the BA on the left of me and the tester on the right. We defined acceptance criteria, often going to talk to the business users, writing the criteria in code using EasyBdd."
    },
    {
        "word_count": 34,
        "value": "Any model - technical, methodological or psychological - has very little relationship to reality when the human and social aspects are not considered. This is ultimately the greatest strength of the 12 Agile principles.\u00b2\u2079\u2078"
    },
    {
        "word_count": 34,
        "value": "While While adding a new element to the array was enough to make the test pass, we now spot some duplication on character \u201cI\u201d. By applying the next transformation statement to tail recursion, we"
    },
    {
        "word_count": 34,
        "value": "can get rid of this duplication. Since we are trying to follow the transformation table, we applied the array to container (in this case, we used a collection container) transformation before the tail recursion."
    },
    {
        "word_count": 33,
        "value": "Ideally, you should work on the exercises as a pair. Even better, have a journey companion. Either working on your own or with a pair, we strongly encourage you to join the community."
    },
    {
        "word_count": 33,
        "value": "Pair programmers: Keep each other on task. Brainstorm refinements to the system. Clarify ideas. Take the initiative when their partner is stuck thus lowering frustration. Hold each other accountable to the team\u2019s practices.\u201d"
    },
    {
        "word_count": 33,
        "value": "Write a function that takes numbers from 1 to 100 and outputs them as a string, but for multiplesofthreeitreturns\u201cFizz\u201dinsteadofthenumber,andformultiplesoffiveitreturns \u201cBuzz.\u201d For numbers that are multiples of both three and five, it returns \u201cFizzBuzz.\u201d"
    },
    {
        "word_count": 33,
        "value": "Given a positive integer number (for example, 42), determine its Roman numeral represen- tation as a string (for example, \u201cXLII\u201d). You cannot write numerals like IM for 999. \u2074\u00b3CyberDojo Foundation (See license), http://www.cyber-dojo.org/"
    },
    {
        "word_count": 33,
        "value": "Tests should be testing behavior, so there is no reason why we should break any tests during refactoring. If you break any tests while refactoring, undo, go back to green and start over."
    },
    {
        "word_count": 33,
        "value": "Unit tests work best when they focus on testing only one behavior at a time, one Subject Under Test at a time and setting expectations only on objects that are the nearest neighbors."
    },
    {
        "word_count": 33,
        "value": "Do we have an internal state of an object that must be saved and restored at a later time and cannot be exposed by interfaces without exposing implementation? Must encapsulation boundaries be preserved?"
    },
    {
        "word_count": 33,
        "value": "Connascence of Value occurs when two or more components\u2019 values are related or have an intrinsic range of validity in their input not expressed by their primitive types. Let\u2019s consider the initial example:"
    },
    {
        "word_count": 33,
        "value": "Code duplication leads to many problems in design. This is the reason why this is the second rule. After each test, we should look for duplication and refactor it out of our system."
    },
    {
        "word_count": 33,
        "value": "The elevator can now queue the stop requests from the floors and collect people in the way, but cannot change direction once started until all calls in the same direction have been fulfilled."
    },
    {
        "word_count": 33,
        "value": "In 1948 Claude Shannon published the paper, \u201cA Mathematical Theory of Communication,\u201d which is considered to be the beginning of an entirely new field of study called Information Theory. In this paper,hedefinestheconceptofInformationEntropy asameasureoftheuncertaintyinamessage.\u00b9\u2077\u2076"
    },
    {
        "word_count": 33,
        "value": "When our knowledge of the problem/domain is not very high, classic TDD is a great way to discover/explore solutions. If you are a beginner, classic TDD is a lot more accessible since you"
    },
    {
        "word_count": 33,
        "value": "The game at startup shows the title and main description of the initial location. When the player moves to another location, the system always prompts title and main description for the new location."
    },
    {
        "word_count": 33,
        "value": "USEperformsanactionwiththeitemiftheenvironmentissetupforitandiftheplayerhastheitem in the bag. The action can result in an extra sentence in the main description, unlocking a passage toward a hidden location, releasing a new item in the location, and so forth."
    },
    {
        "word_count": 33,
        "value": "\u2022 Me: \u201cNope, wrong answer. It means it ain\u2019t so difficult! At least for the level required for your task. Trust me, in a few weeks time you will laugh about this fear.\u201d\u00b2\u2079\u2074"
    },
    {
        "word_count": 33,
        "value": "He suddenly asked me a tricky question, \u201cSince you love football as much as I do, let\u2019s see if you know this: what\u2019s the line-up of the last Italian World Cup winning team?\u201d"
    },
    {
        "word_count": 33,
        "value": "SAMPLE SOLUTIONS 296 Sample solutions: Roman numerals in C# For the kata associated with this solution, see \u201cRoman Numerals by cyber-dojo.\u201d We start by writing the simplest unit test we can think of."
    },
    {
        "word_count": 33,
        "value": "1 [TestFixture] 2 public class RomanConverterShould 3 { 4 [TestCase(1, \"I\")] 5 [TestCase(2, \"II\")] 6 [TestCase(3, \"III\")] 7 [TestCase(4, \"IV\")] 8 [TestCase(5, \"V\")] 9 [TestCase(6, \"VI\")] 10 [TestCase(7, \"VII\")] 11 [TestCase(8, \"VIII\")] 12"
    },
    {
        "word_count": 33,
        "value": "W e spot duplication around if statements, so we refactor the code to the next transformation, if to while. This gets rid of if statement duplication, but we now have while statement duplication."
    },
    {
        "word_count": 33,
        "value": "1 // 10 if -> while. We used a foreach in place of a while loop since it is a simpler \\ 2 contruct in C# 3 public class RomanConverter 4 { 5"
    },
    {
        "word_count": 32,
        "value": "Agile Technical Practices Distilled A Journey Toward Mastering Software Design Pedro Moreira Santos, Marco Consolaro and Alessandro Di Gioia This book is for sale at http://leanpub.com/agiletechnicalpracticesdistilled This version was published on 2019-06-10"
    },
    {
        "word_count": 32,
        "value": "true for my math teacher, Paolo Quadri, recently passed to a better life. Thank you for leading and teaching by example, not just with words. The World needs more teachers like you!"
    },
    {
        "word_count": 32,
        "value": "Pair programming is a disciplined approach to writing software. It assigns specific roles and responsibilities to each pair member, defines strategies to switch positions, and promotes breaks to avoid pairs exhausting themselves."
    },
    {
        "word_count": 32,
        "value": "The Rule of Three defers duplication minimization until there is enough evidence. Code that does not contain duplication is often referred to as abiding to the DRY (Do not Repeat Yourself) principle."
    },
    {
        "word_count": 32,
        "value": "However, obvious implementation is ambiguous. It may mean something for one developer and something else for another one. The transformations\u2074\u2074 on the following table are a way to clarify the mentioned ambiguity."
    },
    {
        "word_count": 32,
        "value": "\u2022 Especially if used only for unit test assertions, do not add public getters/setters/properties just for the purpose of making tests easier to write. \u2022 Consider overriding equality to overcome this constraint."
    },
    {
        "word_count": 32,
        "value": "Implement the game of Tic Tac Toe again, following all TDD practices plus object calisthenics rules. When you are finished, compare the solution you did first and the one using object calisthenics."
    },
    {
        "word_count": 32,
        "value": "Problem Solution Design Pattern Do we apply some rules or algorithms Define families of algorithms, Strategy that are replaceable or can change? encapsulate each one behind an interface, and make them interchangeable."
    },
    {
        "word_count": 32,
        "value": "When a method performs multiple functions related only by the moment in time they execute. A component is created just for exposing a method to execute all elements in the same timespan."
    },
    {
        "word_count": 32,
        "value": "Now Now we can have cars correctly accepting either gasoline or electricity, without unimplemented methods. The interfaces correctly map the real functionality and correctly inherit the common behavior from the base interface."
    },
    {
        "word_count": 32,
        "value": "1 public interface IOvenCook{ ... } 2 3 public interface IGenerateMicrowaves{ ... } 4 5 public class Kitchen{ 6 private IOvenCook _oven; 7 8 public Kitchen(IOvenCook oven){ 9 _oven = oven; 10"
    },
    {
        "word_count": 32,
        "value": "All of the above can also be achieved by using classic TDD, but it requires more effort from the software developer and does not come as naturally as in the Outside-In approach."
    },
    {
        "word_count": 32,
        "value": "The introduction of acceptance tests forces a discussion on test boundaries. What are the boundaries ofanacceptancetest?Whatabouttheboundariesofunittests,integrationtestsandend-to-endtests? In the next diagram, we try to convey our views on different tests boundaries. \u00b9\u2079\u2075FitNesse http://docs.fitnesse.org"
    },
    {
        "word_count": 32,
        "value": "The problem is that test terminology is not very standardized and in our experience we have seen some confusion about the different concepts of tests. Hopefully the following definitions clarify the terminology."
    },
    {
        "word_count": 32,
        "value": "Restrain from mocking every abstraction layer in your module (model, bounded context). Test it as black box through the public interface while being declarative and assertive about your interaction with other modules."
    },
    {
        "word_count": 32,
        "value": "For instance, in our previous example, to consider the activity of describing an item, there are many different aspects that must be considered: the brand, the name, the short description, the technical"
    },
    {
        "word_count": 32,
        "value": "\u00b2\u2075\u2078Gene Kim, et al., The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations, https://www.goodreads.com/book/show/26083308-the-devops-handbook \u00b2\u2075\u2079Ross D. Arnold and Jon P. Wade, 2015 Conference on Systems Engineering Research"
    },
    {
        "word_count": 32,
        "value": "The technical skills that we applied, along with the experience and the principles described in this book,wereofgreatimportance.Webalancedriskmitigationanddevelopmentspeedusingasuperior acceptance tests suite and a maniacal focus on clean code, SOLID principles and simple design."
    },
    {
        "word_count": 32,
        "value": "A much better starting point is the high regard for the human nature of the individuals who work inside teams and companies, proven by attending to their needs and appreciating their professionality."
    },
    {
        "word_count": 32,
        "value": "When team members trust each other and know that everyone is capable of admitting when they\u2019re wrong, then conflict becomes nothing more than the pursuit of truth or the best possible answer.\u201d"
    },
    {
        "word_count": 32,
        "value": "EventStorming is a learning activity about the business\u2019s value stream delivered in the form of workshop. At a very high level, it can be seen as a process composed of several steps:"
    },
    {
        "word_count": 31,
        "value": "This book is for my love and life companion, Nucha. Without her I would not be what I am. I dedicate this book to my sons \u2013 Diogo, Vasco and Andr\u00e9."
    },
    {
        "word_count": 31,
        "value": "The first time I read about pairing, I skipped the chapter, as it was nothing new to me. I had been doing it for many years. What could I possibly learn?"
    },
    {
        "word_count": 31,
        "value": "Approaching pairing with someone you never worked with before requires a bit more structure for it to succeed. Actually, pairing has nothing to do with rushing for meeting a specific deadline!"
    },
    {
        "word_count": 31,
        "value": "3. Triangulation When you want to introduce new behavior, write a new and more specific test that forces the code to be more generic (triangulation equals using tests as pivot points)."
    },
    {
        "word_count": 31,
        "value": "* Write a failing test (this is the only task where a failing test is allowed) * Make a failing test pass * Refactor * Think (you cannot repeat this task)"
    },
    {
        "word_count": 31,
        "value": "Transformation 7 \u2013 Scalar -> array If we end up with too many if statements, one option is to refactor them into a lookup table. Transformation 8 \u2013 Array -> container"
    },
    {
        "word_count": 31,
        "value": "\u2022 Red, green, refactor. \u2022 Writing the test starting from the assertion. \u2022 Using transformation priority premise to keep your code simple. \u2022 Using object calisthenics to help you with design."
    },
    {
        "word_count": 31,
        "value": "To improve readability, you should start with better names for variables, methods and classes. The idea is to express intent rather than implementation details. We recommend Arlo Belshee\u2019s\u2076\u00b2 approach for naming."
    },
    {
        "word_count": 31,
        "value": "Parallel Change, also known as expand, migrate and contract, is a refactor pattern to implement breaking changes safely (staying on the green). It consists of three steps: expand, migrate and contract."
    },
    {
        "word_count": 31,
        "value": "The Law of Demeter helps avoid Coupling components. It\u2019s a very simple but effective law. It says that Method M on Object O can only invoke methods of the following objects:"
    },
    {
        "word_count": 31,
        "value": "When a method supports multiple functions, but the choice of the specific execution is determined by a control parameter passed in input. Often elements are bundled into a component because they"
    },
    {
        "word_count": 31,
        "value": "Tests also allow us to refactor the design with caution, allowing us to tackle design issues safely and effectively. Finally, tests serve as documentation to improve the clarity of the system."
    },
    {
        "word_count": 31,
        "value": "Clarity is achieved not just from good names but also from good abstractions that express intent in design. Code smells, SOLID violations, low Cohesion, high Coupling and high Connascence reduce clarity."
    },
    {
        "word_count": 31,
        "value": "Part I The building has 5 total floors including basement and ground. The elevator can be called at any floor only when it is not in use via one call button."
    },
    {
        "word_count": 31,
        "value": "consequently to a business scenario. Acceptance tests are used to verify that business requirements are met. Thus they are closely tied to the business requirement that they are trying to prove."
    },
    {
        "word_count": 31,
        "value": "Shingoarguedthaterrorsareinevitableinanyprocessinvolvinghumanwork,butthatifappropriate poka-yokes are implemented, then mistakes can be caught quickly and prevented from resulting in defects. By eliminating defects at the source, the cost of mistakes within a company is reduced."
    },
    {
        "word_count": 31,
        "value": "Thetheoryfollowsfromthefactthateveryorganizationhasroomforimprovementsandthecurrent performances are bounded by the most limiting constraint. Removing the constraint would have the effect of instantly improving the overall system, which will then be limited by a different constraint."
    },
    {
        "word_count": 31,
        "value": "IN ORDER TO REMAIN UNCHANGED, THE SYSTEM MUST CHANGE. Specifically, the changes that must occur are changes in the patterns of changes (or strategies) previously employed to prevent drastic internal change.\u201d"
    },
    {
        "word_count": 31,
        "value": "These templates offer a very focused way to see the whole business from an ever higher perspective, basically providing a one-page snapshot of the organization\u2019s activities and their reason for being."
    },
    {
        "word_count": 31,
        "value": "This is in agreement with our systemic vision focused on delivering value to the customer, so only when the system is deployed and available to the customer is this value reached."
    },
    {
        "word_count": 31,
        "value": "We had regular product demos with stakeholders, led every time by a different member of Team C. Those who weren\u2019t in the meeting were at their desks, working on the backlog."
    },
    {
        "word_count": 31,
        "value": "The idea behind my suggestion is very simple, and it relies heavily on the experience of the developers,whichinthatcasewasveryhigh.Tobeeffective,itrequirestheabilitytowriteoutside-in testable code naturally, without the need of a test to drive any class."
    },
    {
        "word_count": 30,
        "value": "So I want to dedicate this book to my parents Gianpaolo and Rosaria, and to my lovely little sister Eleonora. Thinking of you all makes me feel at home anywhere."
    },
    {
        "word_count": 30,
        "value": "We live in a world with rules everywhere. On the road, at work, at school, at the movies: we have to respect the rules of the environment we are in."
    },
    {
        "word_count": 30,
        "value": "\u2074David Thomas initially used the term \u201ccode kata\u201d in his excellent book, The Pragmatic Programmer. The idea of a code kata is to spend some time deliberately practicing a skill."
    },
    {
        "word_count": 30,
        "value": "Use the new habits when solving the katas. Start from the assertion and work backward. Organize your tests in arrange, act and assert blocks. Follow the unit test principles above."
    },
    {
        "word_count": 30,
        "value": "\u2022 Abbreviations can be confusing, so it\u2019s better to be clear. \u2022 If we are repeating the name over and over, maybe we are missing an opportunity to remove duplication."
    },
    {
        "word_count": 30,
        "value": "The idea behind refactoring golf exercises is to practice refactoring from a starting point to the desired endpoint while minimizing the number of movements needed to perform the change code."
    },
    {
        "word_count": 30,
        "value": "The The Execute method starts the instrument, which will begin to execute the task passed to it. The method will return immediately (we assume that the instrument implementation is asynchronous)."
    },
    {
        "word_count": 30,
        "value": "Imagine describing classes through their invariants, preconditions and postconditions as explained in the design by contract of Bertrand Meyer.\u00b9\u00b3\u00b2 Following the LSP in terms of design by contract, it means:\u00b9\u00b3\u00b3"
    },
    {
        "word_count": 30,
        "value": "The concept of Connascence pervades anything we do when we work on software development. Every line of code displays some element of it as the logical building blocks of programs."
    },
    {
        "word_count": 30,
        "value": "1 public enum Hour { 2 Midnight = 0, 3 OneAm = 1, 4 TwoAm = 2, 5 ThreeAm = 3, 6 FourAm = 4, 7 FiveAm = 5, 8"
    },
    {
        "word_count": 30,
        "value": "This basic idea is in agreement with all the practices and principles exposed in this book as far as we can think to good software design as a low-entropy System."
    },
    {
        "word_count": 30,
        "value": "The The method, as usual, is highlighted red. Let\u2019s open the automatic suggestion and select the option \u201ccreate method IGenerateMicrowaves.SwitchOn\u201d and rename the parameter minutes. Voil\u00e0! The interface now becomes:"
    },
    {
        "word_count": 30,
        "value": "TAKEcollectsanitemfromtheenvironmentandputsitinthebag.DROPallowstheplayertoleave an item in the environment. Every item can be taken and dropped anywhere, and the game has to list the items in the environment just after the main description."
    },
    {
        "word_count": 30,
        "value": "\u00b2\u00b3\u2074This example has been used with reference to the article of our friend Matthew Butt, \u201cHow Applying Theory of Constraints Helped Us Optimize Our Code\u201d, Matthew Butt\u2019s blog https://blog.matthewbutt.com/2016/12/18/how-applying-theory-of-constraints-helped- us-optimise-our-code/"
    },
    {
        "word_count": 29,
        "value": "\u201cNot even in my prayers and my dreams, I was hoping for you to achieve all of this. Your accomplishments are proof that I did well as a father.\u201d"
    },
    {
        "word_count": 29,
        "value": "Principle Afundamentaltruthorpropositionthatservesasthefoundationforasystemofbelieforbehavioror for a chain of reasoning. A general scientific theorem or law that has numerous special applications across a wide field. A fundamental source or basis of something."
    },
    {
        "word_count": 29,
        "value": "Value The regard that something is held to deserve; the importance, worth, or usefulness of something. Principles or standards of behavior; one\u2019s judgment of what is important in life."
    },
    {
        "word_count": 29,
        "value": "Mastery is applied knowledge, and even the most talented person can\u2019t skip practicing to reach it. Spend time going through the exercises to master the concepts and practices presented."
    },
    {
        "word_count": 29,
        "value": "Don\u2019t lettheapparentsimplicityofTDDdeceiveyou.I havespentmany yearsbelievingIwasdoing TDD. At some point, I had the opportunity to pair with a seasoned TDD practitioner; that\u2019s when I realized I had been missing a lot."
    },
    {
        "word_count": 29,
        "value": "Take over from this point on and finish the Fizz Buzz kata on your own. Note: For a sample solution, see the Appendices. More katas Leap year by cyber-dojo"
    },
    {
        "word_count": 29,
        "value": "If you need to review something to answer any of the above questions, review the Great Habits section, where we summarize most of the new material on this chapter."
    },
    {
        "word_count": 29,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise (New habit)."
    },
    {
        "word_count": 29,
        "value": "\u2022 \u201cFunctional Calisthenics,\u201d Jorge Gueorguiev Garcia\u2074\u2079 \u2022 \u201cThe Transformation Priority Premise,\u201d Robert C. Martin\u2075\u2070 \u2022 \u201cTransformation Priority Premise Applied,\u201d Micah Martin\u2075\u00b9 \u2022 \u201cTransformation Priority Premise with JavaScript,\u201d Carlos Bl\u00e9\u2075\u00b2"
    },
    {
        "word_count": 29,
        "value": "Try to make invalid state unrepresentable. Make the compiler work for you. If client code tries to pass invalid state to your code, the compiler should signal an error."
    },
    {
        "word_count": 29,
        "value": "Stubs respond to calls made during the test with some pre-programmed output specific for each test. This implies that they need to be specifically set up for every test."
    },
    {
        "word_count": 29,
        "value": "Whenthereisnoclearlydefinedpurposeforthemethodoritperformsmultipleunrelatedfunctions. Unrelated elements bundled into a component for no specific reason. Readability and understand- ability are difficult, and reusability is very low. This is the worst case of Cohesion."
    },
    {
        "word_count": 29,
        "value": "Single Responsibility Principle Cohesion / Coupling Open/Closed Principle Cohesion / Coupling Liskov Substitution Principle Cohesion / Coupling Interface Segregation Principle Cohesion / Coupling Dependency Inversion Principle Cohesion / Coupling"
    },
    {
        "word_count": 29,
        "value": "The elevator is not fast enough so as an experiment to speed it up the idea is to allow the elevator to queue the requests and optimize the trips."
    },
    {
        "word_count": 29,
        "value": "\u2022 The energy dispersal rate of the system \u2022 The degree of disorder in a system \u2022 An increasing function of the number of possible states of a system"
    },
    {
        "word_count": 29,
        "value": "Outside-In is not just a testing strategy; it is a development approach. There is a misunderstanding that considers Outside-In as the \u201cmockist\u201d testing approach. You can do Outside-In development"
    },
    {
        "word_count": 29,
        "value": "This seems to imply that \u201cto know\u201d and \u201cto understand\u201d are not the same thing. So, what is the difference between the two? Let\u2019s see what the dictionary says:"
    },
    {
        "word_count": 29,
        "value": "\u2013 or at least improved \u2013 with the right dose of learning. In this context, EventStorming becomes an amazing tool for enabling rapidly shared learning at an organizational level."
    },
    {
        "word_count": 29,
        "value": "No No other transformations required. Simply adding new values to the dictionary allowed us to make the tests pass, but we can now spot duplication, again around character \u201cI\u201d."
    },
    {
        "word_count": 29,
        "value": "If you want to have feedback or give feedback or just watch the discussions about the single topics presented, please join our free community at Agile Tech Praxis community.agiletechpraxis.com\u00b3\u00b9\u2077."
    },
    {
        "word_count": 28,
        "value": "\u2022 What you liked \u2022 What inspired you \u2022 What you learned \u2022 What we missed \u2022 What we could have explained better \u2022 What you disagree with"
    },
    {
        "word_count": 28,
        "value": "Using a chess clock, the pair assigns a time period for performing each role. When the clock rings or a natural breaking point occurs, the pair switches roles."
    },
    {
        "word_count": 28,
        "value": "\u2022 \u201cThe Mysterious Art Of Triangulation,\u201d Jason Gorman\u00b3\u2074 \u2022 \u201cTest-driven development,\u201d Wikipedia\u00b3\u2075 \u2022 \u201cTest-driven programming workflow,\u201d Rachel M. Carmena\u00b3\u2076 \u2022 \u201cThe three rules of TDD,\u201d Robert C. Martin\u00b3\u2077"
    },
    {
        "word_count": 28,
        "value": "\u2022 biro bior brio broi boir bori \u2022 ibro ibor irbo irob iobr iorb \u2022 rbio rboi ribo riob roib robi \u2022 obir obri oibr oirb orbi orib"
    },
    {
        "word_count": 28,
        "value": "\u2074\u2074As far as we know, Robert C. Martin was the first to present the idea of evolving code in a sequence of transformations: \u201cThe Transformation Priority Premise,\u201d https://8thlight.com/blog/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html"
    },
    {
        "word_count": 28,
        "value": "When you have a failing test, follow the TPP table above to evolve your production code, starting with transformation 1 {} -> nil. Stop when your test passes."
    },
    {
        "word_count": 28,
        "value": "\u2022 TDD will punish you if you don\u2019t understand design. When we find ourselves writing very complex test code, we should consider changing the design of the implementation."
    },
    {
        "word_count": 28,
        "value": "Objectcalisthenicsdoesnotgiveyouanythingnew.Onthecontrary,ittakesstuffaway.Expectthese rules/constraints to be challenging/frustrating if you never used them before. Be strict for now. No exceptions! The time to bend the rules has not yet come. :)"
    },
    {
        "word_count": 28,
        "value": "These repos contain several source trees, or numbered \u201cHoles\u201d based on a several different exercises with different subjects. The idea behind all these exercises, however, is the same."
    },
    {
        "word_count": 28,
        "value": "Step Step 2: In your test code, inherit from the Game class and change the behavior of the protected virtual method Roll to something you have control over."
    },
    {
        "word_count": 28,
        "value": "between objects so that when one object changes state, all its dependents are notified. Create an event-based communication initiated by the dependent object going opposite the dependency flow."
    },
    {
        "word_count": 28,
        "value": "Define an object that encapsulates how a set of objects interact, promoting loose Coupling by keeping objects from referring to each other explicitly, letting their interaction vary independently."
    },
    {
        "word_count": 28,
        "value": "\u2022 Can you refactor to some of the patterns without using the pattern name in your code? \u2022 Can you resist the urge to apply design patterns everywhere?"
    },
    {
        "word_count": 28,
        "value": "When a method supports multiple, weakly related functions. Elements belong in a component because they execute in a certain sequence. Functionality-wise, these elements probably belong in other component(s)."
    },
    {
        "word_count": 28,
        "value": "In the diagram that follows, we have a dependency arrow from Kitchen to MicrowaveOven and from MicrowaveOven to MicrowaveGenerator. Let\u2019s see what happens when we apply the principle."
    },
    {
        "word_count": 28,
        "value": "Let\u2019s suppose we are writing a simple web page for a survey about how people come to work. We might need a checkbox that looks similar to this:"
    },
    {
        "word_count": 28,
        "value": "\u2022 When you understand the concept of Connascence and can identify it. \u2022 When you understand the connection between Connascence, Cohesion, Coupling, code smells and the SOLID principles."
    },
    {
        "word_count": 28,
        "value": "The creativity involved in software development resides in the fact that any programming language exposesseveraltoolsthatcanbecombinedtogetherininfinitelydifferentways.\u00b9\u2077\u2079Inobject-oriented design, among those tools the most relevant one is the concept of \u201cobject.\u201d"
    },
    {
        "word_count": 28,
        "value": "Acceptance tests are organized similar to the arrange-act-assert sections of a unit test. However, in acceptancetests,thesesectionsareusuallyknownasgive-when-then.(Given)somecontext,(When) some action is carried out, (Then) a set of consequences should happen.\u00b9\u2079\u2074"
    },
    {
        "word_count": 28,
        "value": "In this context, it\u2019s interesting to remember our favorite definition of \u201cuser story\u201d is as a placeholder for a conversation, with the goal of achieving a shared understanding."
    },
    {
        "word_count": 28,
        "value": "\u00b2\u00b3\u2076Scott Millett and Nick Tune, Patterns, Principles, and Practices of Domain-Driven Design, https://www.goodreads.com/book/show/ 25531393-patterns-principles-and-practices-of-domain-driven-design \u00b2\u00b3\u2077Scott Millett and Nick Tune, Patterns, Principles, and Practices of Domain-Driven Design, https://www.goodreads.com/book/show/ 25531393-patterns-principles-and-practices-of-domain-driven-design"
    },
    {
        "word_count": 28,
        "value": "TheirworkisessentialtounderstandinghowtomaximizethevalueofDevOps,anditisparticularly valuable because it has a business-oriented point of view, applying a systemic vision to it which we share and tried to apply to this book as well."
    },
    {
        "word_count": 28,
        "value": "To To make the test pass, we don\u2019t need to apply the next transformation. We can make the test pass by adding a new element to the array."
    },
    {
        "word_count": 28,
        "value": "We add a few more failing tests, but since the last transformation was still allowing us to make tests pass, we waited until we had duplication to refactor."
    },
    {
        "word_count": 28,
        "value": "\u2022 What you liked \u2022 What inspired you \u2022 What you learned \u2022 What we missed \u2022 What we could have explained better \u2022 What you disagree with"
    },
    {
        "word_count": 27,
        "value": "I also want to dedicate this book to one special person in my life, my love, friend and sparring partner Giulia. 13 years and not feeling them."
    },
    {
        "word_count": 27,
        "value": "Finally,IwanttodedicatethisbooktoaspecialpersonthatsinceIwasachildrepresentedthesymbol of intelligence, competence, hard work and success. My cousin Antonio Magr\u00ec which saw all of this more than 30 years ago. I will never forget you."
    },
    {
        "word_count": 27,
        "value": "If you want to get feedback or help from the community about the single topics presented in this book, go to the book\u2019s community page at community.agiletechpraxis.com\u2075."
    },
    {
        "word_count": 27,
        "value": "Classic TDD is the original approach to TDD created by Kent Beck. It is also known as the Detroit/Chicago school of TDD. This practice allows you to:"
    },
    {
        "word_count": 27,
        "value": "Once we have a passing test, we do not write any more production code until we have a failing test. See rule above for the reasons why."
    },
    {
        "word_count": 27,
        "value": "Duplication is far easier to refactor than the wrong abstraction. Use the Rule of Three if you are not sure what the correct abstraction would look like."
    },
    {
        "word_count": 27,
        "value": "Run the tests and make sure they are all green. Write a new failing test. When I fizzbuzz number 4, I get back a string representing it"
    },
    {
        "word_count": 27,
        "value": "There should be no assumed initial state, nothing left behind and no dependency on external services that might be unavailable. Examples: databases or file system \u2022 Self-validating"
    },
    {
        "word_count": 27,
        "value": "In this chapter, we start with a kata before we introduce new material. With TPP we found out that it is better to do the kata twice."
    },
    {
        "word_count": 27,
        "value": "Implement the Game of Life using object calisthenics plus everything we covered before. For those not familiar with this game, here is a description adapted from Wikipedia:\u2075\u00b3"
    },
    {
        "word_count": 27,
        "value": "We have now covered most of the rules. In the next chapters we will be covering higher level concepts. Make sure you can apply TDD effectively, including:"
    },
    {
        "word_count": 27,
        "value": "Refactoring Golf is a game designed to stretch your refactoring muscles and get you to explore your IDE to see what\u2019s really possible using shortcuts and automation."
    },
    {
        "word_count": 27,
        "value": "1 if (i == 1) 2 { 3 tempScore = m_score1; 4 } 5 else 6 { 7 score += \"-\"; 8 tempScore = m_score2; 9 }"
    },
    {
        "word_count": 27,
        "value": "Remove Remove \u2022 Delete unnecessary comments. \u2022 Delete dead code. Don\u2019t make the reader waste time trying to figure out code that is not in use anymore."
    },
    {
        "word_count": 27,
        "value": "Design is about compromises. I don\u2019t believe in perfect design; there is always a compromise somewhere. Code smells for me are about making conscious compromises on design."
    },
    {
        "word_count": 27,
        "value": "Principle in particular contexts; however, having such an Object in your test is a clear indication that you can consider acting on your design and split responsibilities."
    },
    {
        "word_count": 27,
        "value": "If you have performed the previous exercises, there should now be a complete set of tests proving the behavior of the code for any degree of freedom."
    },
    {
        "word_count": 27,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise."
    },
    {
        "word_count": 27,
        "value": "One component is responsible for controlling the flow of another component. Refactoring to design patterns such as state or strategy can help fix this type of Coupling."
    },
    {
        "word_count": 27,
        "value": "Another common example of Connascence of Position (which is easier to recognize given the immediate dropin code expressivity)occurs whenpositional structuresareused in messagepassing. Let\u2019s look at this example:"
    },
    {
        "word_count": 27,
        "value": "Well, it\u2019s actually interesting to see that if we have the data of just two sides and their connecting angle, we can work out the third side!"
    },
    {
        "word_count": 27,
        "value": "Finally, from the Connascence perspective, it is an example of Connascence of Position (CoP). Let\u2019s see what happens if we refactor this code, trying to improve it:"
    },
    {
        "word_count": 27,
        "value": "Rules and principles help you before you write the code. Smells, Cohesion, Coupling and Con- nascence give you feedback on the design after the code is written."
    },
    {
        "word_count": 27,
        "value": "\u2022 Domain-Driven Design, Tackling Complexity in the Heart of Software, Eric Evans\u00b9\u2078\u2078 \u2022 Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design, Edward Yourdon\u00b9\u2078\u2079"
    },
    {
        "word_count": 27,
        "value": "The key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be.\u201d"
    },
    {
        "word_count": 27,
        "value": "Portfolio User Story As a customer of our stock exchange broker I would like to see my current portfolio So I can better plan my financial strategy"
    },
    {
        "word_count": 27,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase quicker. \u2022 Use Transformation Priority Premise."
    },
    {
        "word_count": 27,
        "value": "Category 2 is a miscommunication occurring upstream in the organization, well before the requirements reach the development team. It\u2019s quite rare to experience them in small organizations,"
    },
    {
        "word_count": 27,
        "value": "In order to correctly make the choice of using one or the other, the most important thing to understand is the implications of synchronous and asynchronous communication."
    },
    {
        "word_count": 27,
        "value": "\u2022 The event is the trigger, the notification that something relevant has happened at a systemic level.Itshouldcontaintheminimuminformationpossibletoidentifyitself(ideallyjustamatter of its type and the IDs of the entities involved)."
    },
    {
        "word_count": 27,
        "value": "System Thinking, as \u201cthe capability to identify and understand Systems, predicting their behavior and devising modifications to them in order to produce desired effects,\u201d\u00b2\u2075\u2079 gives an outstanding"
    },
    {
        "word_count": 27,
        "value": "We also decided to take some risks that resulted in accidentally discovering a new, super-fast way to work: Outside-In ATDD development with optional internal unit test cycles."
    },
    {
        "word_count": 27,
        "value": "\u00b2\u2079\u2076William Edwards Deming, \u201cThe fact is that the system that people work in and the interaction with people may account for 90 or 95 percent of performance.\u201d"
    },
    {
        "word_count": 27,
        "value": "Too low Cohesion Too low Cohesion \u2013 If switch statements are duplicated. Too low Cohesion \u2013 Field is not really part of the state of a class."
    },
    {
        "word_count": 26,
        "value": "I also dedicate this book to my mother, Odete Pinto, for her love and all she sacrificed to allow me to become what I am today."
    },
    {
        "word_count": 26,
        "value": "Which of the above fundamental technical practices can be trained and studied individually? In this book, we decided to focus our attention mainly on these four:"
    },
    {
        "word_count": 26,
        "value": "TDD, pair programming, refactoring and simple design are still reasonably big boxes we must open. So let\u2019s see what we might find inside of each one."
    },
    {
        "word_count": 26,
        "value": "Rules, principles and values To do your best is not enough. First you must know what to do, and then do your best.\u201d W. Edwards Deming"
    },
    {
        "word_count": 26,
        "value": "Run the tests and make sure they are all green. We now have duplication in our code, so it is time to refactor to remove it."
    },
    {
        "word_count": 26,
        "value": "Once we have the assertion, we will code backward, writing the code we need to perform the assertion. Only then will we define the test name."
    },
    {
        "word_count": 26,
        "value": "Ifwefinda designsmell,it\u2019sprobablytimetostop,reflectuponourpastdesigndecisionsanddecide if we need to revisit those decisions. The problem with design smells is that they tend to take time to manifest\u2026 sometimes too late."
    },
    {
        "word_count": 26,
        "value": "Chose one pattern and refactor to it using the refactoring suggestions of previous chapters. Once done, chose another pattern and refactor to it. Rinse and repeat."
    },
    {
        "word_count": 26,
        "value": "\u2022 When you understand the connection between Cohesion, Coupling and code smells. \u2022 When you can design code using Cohesion and Coupling in a balanced way."
    },
    {
        "word_count": 26,
        "value": "\u00b9\u00b2\u2079Salus, in his book A Quarter-Century of Unix (1994), was summarizing from the Unix philosophy documented by Doug McIllroy in the Bell System Technical Journal (1978)."
    },
    {
        "word_count": 26,
        "value": "\u2022 High-level modules should not depend on low-level modules. Both should depend on abstractions. \u2022 Abstractions should not depend on details. Details should depend on abstractions."
    },
    {
        "word_count": 26,
        "value": "IntheIsLeapYearmethodyear IntheIsLeapYearmethodyear % 4 == 0isnotatthesamelevelofabstractionasyear.IsMultipleOf(100). A better implementation, solving the issue while maintaining a balance level of abstractions and improving clarity, could be the following:"
    },
    {
        "word_count": 26,
        "value": "\u2022 Clean Code: A Handbook of Agile Software Craftsmanship, Robert C. Martin\u00b9\u2074\u2075 \u2022 Object-Oriented Software Construction, Bertrand Meyer\u00b9\u2074\u2076 \u2022 Structured Analysis and Systems Specification, Tom DeMarco\u00b9\u2074\u2077"
    },
    {
        "word_count": 26,
        "value": "Level 1 encapsulation refers to the encapsulation attained by combining lines of code into a method, and it is addressed by Method Cohesion and Interaction Coupling."
    },
    {
        "word_count": 26,
        "value": "Level 2 encapsulation refers to the encapsulation achieved by creating classes, combining both methods and fields, and it is addressed by Class Cohesion and Inheritance Coupling."
    },
    {
        "word_count": 26,
        "value": "As you may have already noticed, these definitions imply that there are different kinds of Connascence, so let\u2019s see them in more detail with clarifying examples."
    },
    {
        "word_count": 26,
        "value": "The Tuple structure here apparently allows for \u201cflexibility\u201d when the methods are defined. But what happens when another class has to call this method? Let\u2019s see:"
    },
    {
        "word_count": 26,
        "value": "\u2022 Passes all the tests \u2022 Expresses every idea that we need to express \u2022 Says everything once and only once \u2022 Has no superfluous parts"
    },
    {
        "word_count": 26,
        "value": "Non functional requirement: the total time spent in the process of Part II should be less than the time spent with the algorthm of Part I"
    },
    {
        "word_count": 26,
        "value": "Just as the forces are deeply connected, so are the concepts of Coupling, Cohesion and Connascence. Let\u2019s look at this example to better understand this point."
    },
    {
        "word_count": 26,
        "value": "From the code smell aspect, we have removed the Long Parameter List smell. Finally, we have also removed CoP for three classes: OrderFlow, Order and Invoice."
    },
    {
        "word_count": 26,
        "value": "He who would learn to fly one day, must first learn to stand and walk and run and climb and dance; one cannot fly into flying.\u201d"
    },
    {
        "word_count": 26,
        "value": "The The IDE will show it red again, because it is not implemented. Let\u2019s open its suggestions helper\u2026 we seenowoneoftheoptionssaying\u201ccreateMethod.\u201dLet\u2019sselectitandrenametheparameter minutes. We would have something like:"
    },
    {
        "word_count": 26,
        "value": "Inspired by Colossal Cave Adventure,\u00b9\u2079\u2076 this is a kata for building a text adventure game that can be expanded incrementally and indefinitely, limited only by imagination."
    },
    {
        "word_count": 26,
        "value": "Teamwork requires some sacrifice up front; people who work as a team have to put the collective needs of the group ahead of their individual interests.\u201d"
    },
    {
        "word_count": 26,
        "value": "Cohesion Functional Cohesion Coupling Coupling and Cohesion by change Coupling Coupling at inheritance tree level Cohesion Functional Cohesion Coupling Reduce Coupling by not having dependencies internally"
    },
    {
        "word_count": 25,
        "value": "Design is a much more controversial subject, but XP advocates \u201csimple design.\u201d So, let\u2019s stay with high-level, generally accepted design principles and practices, such as:"
    },
    {
        "word_count": 25,
        "value": "\u2022 Trying to achieve too much. Break your work into smaller steps. \u2022 The code base is in bad shape. You probably need to refactor."
    },
    {
        "word_count": 25,
        "value": "Great habits In this chapter, we introduced a few new TDD habits. Check them out on the list below. Considerations when writing a new test"
    },
    {
        "word_count": 25,
        "value": "\u2022 Use the Rule of Three to tackle duplication. \u2022 Refactor design constantly. (New habit). \u2022 Apply object calisthenics to improve your design (New habit)."
    },
    {
        "word_count": 25,
        "value": "The technique of Parallel Change was an original idea of Joshua Kerievsky. It was explained in 2010 in a talk called \u201cThe Limited Red Society.\u201d\u2076\u2074"
    },
    {
        "word_count": 25,
        "value": "\u2022 When you feel comfortable using your IDE to refactor efficiently. \u2022 When you can perform the atomic refactors confidently while staying on the green."
    },
    {
        "word_count": 25,
        "value": "Code smells are one of the most important concepts in object-oriented design. Once I was able to spot them, my internal feedback loop improved dramatically."
    },
    {
        "word_count": 25,
        "value": "Large Class / Long Method / Long Parameter List Large Class No getters/setters/properties NA All classes must have state, no static methods, no utility classes"
    },
    {
        "word_count": 25,
        "value": "For those interested in a deeper dive into the world of refactoring, see the web links and books in the Resources section of this chapter."
    },
    {
        "word_count": 25,
        "value": "We created a very smelly implementation of TicTacToe in our Code Smells\u2077\u2078 open source repository. There are quite a few code smells in the implementation:"
    },
    {
        "word_count": 25,
        "value": "So, what if the external library changes? How can we test it? That\u2019s possible using an integration test, but we will go through that later."
    },
    {
        "word_count": 25,
        "value": "The Execute method will throw an ArgumentNullException if the task passed in is null. When the instrument finishes executing then the Finished event is fired."
    },
    {
        "word_count": 25,
        "value": "\u2022 \u201cApproval Tests,\u201d Llewellyn Falco\u00b9\u2070\u2075 \u2022 Emily Bache\u2019s public github repositories\u00b9\u2070\u2076 \u2022 Peel & Slice technique, Llewellyn Falco\u00b9\u2070\u2077 \u2022 \u201cUsing ApprovalTests in .Net,\u201d Llewellyn Falco\u00b9\u2070\u2078"
    },
    {
        "word_count": 25,
        "value": "Do we have different objects that might do the job, but we don\u2019t want the client object knowing which is actually going to do it?"
    },
    {
        "word_count": 25,
        "value": "These patterns are about class and object composition. Their purpose is to simplify the design by identifying a clean way to realize relationships between entities."
    },
    {
        "word_count": 25,
        "value": "of behavior, we usually end up with lots of breaking changes and a high probability of introducing code smells like Shotgun Surgery or Divergent Change."
    },
    {
        "word_count": 25,
        "value": "Let\u2019s see how it relates to a little previous example. In the following snippet the Save method is not at the same level of abstraction."
    },
    {
        "word_count": 25,
        "value": "\u2022 Correct and provable behavior \u2022 Favors the reader \u2022 Balanced cohesion and coupling \u2022 Minimal elements \u00b9\u2076\u2076Definitions #2 - #6: Xp, \u201cSimplicity Rules,\u201d http://wiki.c2.com/?XpSimplicityRules"
    },
    {
        "word_count": 25,
        "value": "If we instead look from a point of view of Code Smells, we can call this a classic example of Long Parameter List code smell."
    },
    {
        "word_count": 25,
        "value": "1 //this is a \"Refund\" story 2 //we can use this to DRIVE THE CONVERSATION WITH THE BUSINESS 3 public partial class RefundSpecifications { 4"
    },
    {
        "word_count": 25,
        "value": "The focus on the improvement efforts should always be on the most limiting constraint, and once it\u2019s removed should be focused on the following one."
    },
    {
        "word_count": 25,
        "value": "Watching them working together like that after all their doubts was the chief picture of that experience that I want to keep in my heart."
    },
    {
        "word_count": 25,
        "value": "Over some pasta, the dialogue moved to sports \u2013 an Italian classic. \u201cI do like football,\u201d I said. \u201cWhat football team do you support?\u201d \u201cFiorentina.\u201d"
    },
    {
        "word_count": 25,
        "value": "\u00b2\u2079\u2077This story occurred before 2006 when Italy won the last World Cup. The previous one referred to in the story is the one of 1982."
    },
    {
        "word_count": 25,
        "value": "and the collective exploration of new ways give the enthusiasm and the motivation necessary to achieve what would be unachievable by the individual working alone."
    },
    {
        "word_count": 25,
        "value": "Resources Web \u2022 PopcornFlow: Continuous Evolution Through Ultra-Rapid Experimentation, Claudio Per- rone\u00b3\u00b9\u2070 Books \u2022 Antifragile: Things That Gain from Disorder, Nassim Nicholas Taleb\u00b3\u00b9\u00b9 \u00b3\u00b9\u2070https://popcornflow.com/ \u00b3\u00b9\u00b9https://www.goodreads.com/book/show/13530973-antifragile"
    },
    {
        "word_count": 25,
        "value": "Most of the exercises used in this book are from the CyberDojo Foundation. We used these exercises since many developers are already familiar with them."
    },
    {
        "word_count": 24,
        "value": "Now another question arises. Do we really need a core of technical practices in Agile? Let\u2019s try to answer this with two more questions:"
    },
    {
        "word_count": 24,
        "value": "Our brain is addicted to information. Resist the urge to read this book without performing the exercises. Information per se is not very useful."
    },
    {
        "word_count": 24,
        "value": "A few years later, I moved to a bigger organization. Everything was more structured, and we were not expected to work through the nights."
    },
    {
        "word_count": 24,
        "value": "\u2022 minimum value = -2 \u2022 maximum value = 92 \u2022 number of elements in the sequence = 6 \u2022 average value = 21.833333"
    },
    {
        "word_count": 24,
        "value": "There is a lot more information on great habits, but if you nail down just the ones above, you are prepared to move on."
    },
    {
        "word_count": 24,
        "value": "Arabic Roman Thousands Cents Tenths Units 846 DCCCXLVI - DCC XL VI 1999 MCMXCIX M CM XC IX 2008 MMVIII MM - - VIII"
    },
    {
        "word_count": 24,
        "value": "Great habits In this chapter, we introduced a new great habit. Check it out on the list below. Considerations when writing a new test"
    },
    {
        "word_count": 24,
        "value": "\u2022 It helps to ensure that a method focuses on doing only one thing. \u2022 Reduces the size of your units, enabling easier reuse."
    },
    {
        "word_count": 24,
        "value": "\u2022 Aligns with the idea of Object Oriented Programming as a network of entities that collaborate by passing messages (calling methods) on each other."
    },
    {
        "word_count": 24,
        "value": "If we apply the constraint of no getters/setters/properties, especially if used only for tests, we can approach it as shown in the sample below:"
    },
    {
        "word_count": 24,
        "value": "My grandmother started walking five miles a day when she was sixty. She\u2019s ninety-seven now, and we don\u2019t know where the heck she is.\u201d"
    },
    {
        "word_count": 24,
        "value": "\u2022 When we find duplication in our code. (Don\u2019t forget the Rule of Three.) DRY violation. \u2022 When we break any object calisthenics rule."
    },
    {
        "word_count": 24,
        "value": "Great habits In this chapter, we introduced a few new habits. Check them out on the list below. Considerations when writing a new test"
    },
    {
        "word_count": 24,
        "value": "We have now covered most of the rules. In the next chapters, we will cover higher-level concepts. Make sure you can apply TDD effectively."
    },
    {
        "word_count": 24,
        "value": "A query is a method call that returns data and shouldn\u2019t have any effect on the state of an object. (They should be idempotent)."
    },
    {
        "word_count": 24,
        "value": "A command is a method call that changes the state of the system; hence, it has a side effect, and it should return void."
    },
    {
        "word_count": 24,
        "value": "The character copier is a simple class that reads characters from a source and copies them to a destination one character at a time."
    },
    {
        "word_count": 24,
        "value": "In the Instrument Processor kata, we are going to implement a class that gets tasks from a TaskDispatcher and executes them on an Instrument.\u2079\u00b2"
    },
    {
        "word_count": 24,
        "value": "The basic laws of the universe are simple, but because our senses are limited, we can\u2019t grasp them. There is a pattern in creation.\u201d"
    },
    {
        "word_count": 24,
        "value": "Creational patterns are all about creating instances of objects, since the basic form of object creation could result in design problems or added complexity."
    },
    {
        "word_count": 24,
        "value": "In the refactoring chapter, we mentioned simple design refactors. We can now expand these with designpatterns.Onceweknowhowtousepatternscorrectly,wewillbeabletorefactorcodetoward them when it makes sense to do it."
    },
    {
        "word_count": 24,
        "value": "This exercise consists of refactoring your current Game of Life and solving it with different design patterns. Interesting implementations in this scenario could be:"
    },
    {
        "word_count": 24,
        "value": "A great heuristic for the Single Responsibility Principle is that we are able to describe what a class does without using \u201cand\u201d or \u201cor.\u201d"
    },
    {
        "word_count": 24,
        "value": "If you don\u2019t understand this, don\u2019t worry. Neither do we! Instead, let\u2019s look at it from a less accademic, mere mortal point of view."
    },
    {
        "word_count": 24,
        "value": "... 12 } 13 14 public class MicrowaveOven : IOvenCook{ 15 private IGenerateMicrowaves _heater; 16 17 public Microwave(IGenerateMicrowaves heater){ 18 _heater = heater; 19"
    },
    {
        "word_count": 24,
        "value": "\u201cThe Balanced Abstraction Principle defines that all code constructs grouped by a higher-level construct should be at the same level of abstraction. That means:"
    },
    {
        "word_count": 24,
        "value": "Let\u2019s see an example of the principle applied to methods that conform to the Single Responsibility Principle, but not to the Balanced Abstraction Principle:"
    },
    {
        "word_count": 24,
        "value": "The Principle of Least Astonishment states that \u201cPeople are part of the system. The design should match the user\u2019s experience, expectations, and mental models.\u201d\u00b9\u00b3\u2076"
    },
    {
        "word_count": 24,
        "value": "1 const string BIKE = \"1\"; 2 const string CAR = \"2\"; 3 const string TRAIN = \"3\"; 4 const string BUS = \"4\";"
    },
    {
        "word_count": 24,
        "value": "Two situations are possible: either there\u2019s wrong/missing acceptance criteria or there\u2019s a code executionproblem.Thus,it\u2019salwayspossibletoidentifythebugascategory1,2or3,whichprovides the necessary insight to make systemic improvements with surgical accuracy."
    },
    {
        "word_count": 24,
        "value": "Create a service with a DispatchDate method which, given the ID of a customer order collected via our website, returns its estimated dispatch date."
    },
    {
        "word_count": 24,
        "value": "The fact is that the system that people work in and the interaction with people may account for 90 or 95 percent of performance.\u201d"
    },
    {
        "word_count": 24,
        "value": "Furthermore, the way to achieving independence is not free in a SOA environment; the infrastruc- tural boundary must be created, deployed, maintained and monitored."
    },
    {
        "word_count": 24,
        "value": "You have your way. I have my way. As for the right way, the correct way, and the only way, it does not exist.\u201d"
    },
    {
        "word_count": 24,
        "value": "That didn\u2019t go down too well, since he was for Juventus \u2013 historically the worst rival of Fiorentina. But we were laughing about it."
    },
    {
        "word_count": 24,
        "value": "To To fix the duplication, we apply again the transformation, statement to tail recursion. We don\u2019t yet need to move to the next transformation."
    },
    {
        "word_count": 24,
        "value": "Although Alessandro considers himself a forever learner, he is also a coach and a mentor because he loves to share his experiences with others."
    },
    {
        "word_count": 23,
        "value": "rules follow from common principles and values (which together make up common sense) it\u2019s pretty easy to work out the most important ones."
    },
    {
        "word_count": 23,
        "value": "1. You are not allowed to write any more of a unit test that is sufficient to fail, and compilation failures are failures"
    },
    {
        "word_count": 23,
        "value": "There is a set of good habits you should aim to internalize. On the following chapters we will add more to this list."
    },
    {
        "word_count": 23,
        "value": "\u00b3\u00b3The diagram on the previous page is inspired by a tweet from our good friend, Rachel M. Carmena, @bberrycarmen, \u201cTest-driven programming workflow,\u201d https://twitter.com/bberrycarmen/status/1062670041416716289"
    },
    {
        "word_count": 23,
        "value": "\u2022 Write the simplest code to pass the test. \u2022 Write any code that makes you get to the refactor phase more quickly."
    },
    {
        "word_count": 23,
        "value": "Write a function to convert Arabic numbers to Roman numerals as best as you can, following the TDD practices we have been using.\u2074\u00b3"
    },
    {
        "word_count": 23,
        "value": "Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.\u201d"
    },
    {
        "word_count": 23,
        "value": "After spending a few chapters in test-driven development, we now turn our attention to simple design. Why do we need to consider design?"
    },
    {
        "word_count": 23,
        "value": "Format the code, a simple but very effective technique. Format consistently and don\u2019t force the reader to waste time due to inconsistent formatting."
    },
    {
        "word_count": 23,
        "value": "Primitive Obsession, Feature Envy and Message Chains lead to many other code smells and should thus be dealt with as soon as possible."
    },
    {
        "word_count": 23,
        "value": "Wehavefoundthistobeagreatinsightforunderstandingthetechnique.Itrestoresthepreeminence of design in the use of Mock/Stub Objects, which has often been overshadowed by its popularity for testing interactions with third-party libraries."
    },
    {
        "word_count": 23,
        "value": "Great habits In this chapter, we introduced a new habit. Check it out on the list below. Considerations when writing a new test"
    },
    {
        "word_count": 23,
        "value": "Do we have new tasks to be applied to Represent an operation to be our existing classes? performed on the elements of a"
    },
    {
        "word_count": 23,
        "value": "\u2022 The Kitchen class holds a dependency to the MicrowaveOven class. \u2022 The MicrowaveOven class has a dependency to the MicrowaveGenerator heater component."
    },
    {
        "word_count": 23,
        "value": "W e still have to validate the angle in order to be valid in our situation, but we removed the relation between data."
    },
    {
        "word_count": 23,
        "value": "The The next test uses the same strategy, but we are now testing the shopping cart and its collaboration with the discount calculator."
    },
    {
        "word_count": 23,
        "value": "OUTSIDE-IN DEVELOPMENT 222 The direction of dependencies Dependencies have a direction. So, what is the correct direction? Let\u2019s see it using a picture."
    },
    {
        "word_count": 23,
        "value": "LOOK allows the player to look in every direction to have an idea of the surroundings or a better description of an item."
    },
    {
        "word_count": 23,
        "value": "1 LOST IN SHOREDITCH. 2 YOU ARE STANDING AT THE END OF A BRICK LANE BEFORE A SMALL BRICK BUILDING CALLED THE\\ 3"
    },
    {
        "word_count": 23,
        "value": "Great habits In this chapter, we introduced a new habit. Check it out on the list below. Considerations when writing a new test"
    },
    {
        "word_count": 23,
        "value": "Category 3 problems instead are related to miscommunication between the business and the development team, so here we can actually take some actions."
    },
    {
        "word_count": 23,
        "value": "Thisprinciple isabout feedback loops,fundamental for the System toinspectand adapt. Thequicker the feedback, the quicker the action. This is achieved with monitoring and alerting."
    },
    {
        "word_count": 22,
        "value": "We borrow this concept from physics, chemistry and mechanics. In mechanics, degrees of freedom is referred as the six degrees of freedom."
    },
    {
        "word_count": 22,
        "value": "If your test names express business behaviors, when you change the technical implementation or refactor code, your test names should remain unchanged."
    },
    {
        "word_count": 22,
        "value": "WehaveseenmanydevelopersusingatestnamestrategysimilartoClassName_MethodName_Should- DoSomething. However, this can cause problems; if you rename your class or method, it confuses the meaning of your test name."
    },
    {
        "word_count": 22,
        "value": "This is the simplest transformation. If we have no implementation, the simplest transformation is returning nil, null or nothing. Example: return nil"
    },
    {
        "word_count": 22,
        "value": "In this transformation, we can use any input arguments on our method, and we can also transform a constant into a variable."
    },
    {
        "word_count": 22,
        "value": "After After In this example, the meaning of m_score1 is confusing, so we renamed it to a more obvious name of player1Score."
    },
    {
        "word_count": 22,
        "value": "After Player name fields are assigned in the constructor, but are not used anywhere, so we should remove them and the constructor."
    },
    {
        "word_count": 22,
        "value": "\u2022 Refactoring: Improving the Design of Existing Code, Martin Fowler, Kent Beck, Don Roberts, Erich Gamma\u2077\u2074 \u2022 Refactoring Workbook, William C. Wake\u2077\u2075"
    },
    {
        "word_count": 22,
        "value": "Code smells aremoregranular smells that areusually easier and less costly to fix than design smells. There are four categories of code smells:"
    },
    {
        "word_count": 22,
        "value": "\u2078\u2079See the section on PoLA in Section 3, DESIGN VI \u2013 SOLID PRINCIPLES++. \u2079\u2070We found these katas on Urs Enzler\u2019s website, PlanetGeek.ch."
    },
    {
        "word_count": 22,
        "value": "Trusting your tests and staying in the green, you can finally go ahead and refactor the Gilded Rose kata by Emily Bache."
    },
    {
        "word_count": 22,
        "value": "Behavioral patterns are those patterns that are concerned with communication between objects. They identify common communication patterns between objects, increasing behavior flexibility."
    },
    {
        "word_count": 22,
        "value": "Allow an object to alter its behavior when its internal state changes. The object will appear as if it changes its class."
    },
    {
        "word_count": 22,
        "value": "Components share an external data format or protocol. Abstracting the knowledge of external data allows us to remove this type of Coupling."
    },
    {
        "word_count": 22,
        "value": "Example: Creating an IO operations component bundling disk IO, network IO, etc. All perform IO, but functionality-wise may belong in other place(s)."
    },
    {
        "word_count": 22,
        "value": "1 public class Oven { 2 void Cook() 3 } 4 5 public class Microwave : Oven{ 6 void CookMicorwaving(){...} 7 8"
    },
    {
        "word_count": 22,
        "value": "To understand how the concept of Connascence influences so much of what we do in our code, let\u2019s look at an example:"
    },
    {
        "word_count": 22,
        "value": "1 public interface IBuildCars { 2 IBuildCars WithBrand(Brand brand); 3 IBuildCars WithEngine(Engine brand); 4 IBuildCars WithColor(Color brand); 5 Car Build(); 6 }"
    },
    {
        "word_count": 22,
        "value": "If entropy is the degree of disorder, it is evident that our goal is to minimize it.\u00b9\u2077\u2078 Software development as system building"
    },
    {
        "word_count": 22,
        "value": "The criteria that a component or system must satisfy in order to be accepted by a user, customer, or other authorized entity."
    },
    {
        "word_count": 22,
        "value": "Ifinsteadofstartingfromthe Mainmethodweuseatesttodrivethecodeandinjectthedependencies of the collaborators using Mocks/Stubs, this approach becomes even more powerful. That\u2019s the idea behind the \u201cLondon school of TDD.\u201d"
    },
    {
        "word_count": 22,
        "value": "OPEN tries to open the object of the command. Usually it\u2019s about doors or gates, but this should be a magic world\u2026."
    },
    {
        "word_count": 22,
        "value": "1 > USE KEYS 2 THE RED DOOR HAS BEEN UNLOCKED! 3 > OPEN DOOR 4 YOU ARE INSIDE THE RED CHAMBER."
    },
    {
        "word_count": 22,
        "value": "In the context of software development, we use the catchy word \u201cbugs\u201d to identify defects, and the test suites are our poka-yoke."
    },
    {
        "word_count": 22,
        "value": "So, having that conversation is key, but how can we make sure that it results in the correct features to be developed?"
    },
    {
        "word_count": 22,
        "value": "\u00b2\u2070\u2079Kent Beck, et al., \u201cPrinciples behind the Agile Manifesto,\u201d http://agilemanifesto.org/principles.html \u00b2\u00b9\u2070Brian Sjoberg, \u201cWriting User Stories, It\u2019s About the Conversation,\u201d http://anagilemind.net/2017/10/21/lets-take-a-journey-on-writing- user-stories/ \u00b2\u00b9\u00b9https://dannorth.net/whats-in-a-story/"
    },
    {
        "word_count": 22,
        "value": "\u201cYou have to choose where to pay the price of complexity. Because DDD is about reducing complexityinthesoftware,theoutcomeisthatyoupayapricewithrespecttomaintainingduplicate models and possibly duplicate data.\u201d\u00b2\u2075\u00b2"
    },
    {
        "word_count": 22,
        "value": "In practice, being dogmatically risk-adverse turns out to be a very risky strategy in a complex domain. And, we add, incredibly wasteful."
    },
    {
        "word_count": 22,
        "value": "His dream is to see these principles based on Systems Thinking understood and implemented at every level in businesses and public administrations."
    },
    {
        "word_count": 22,
        "value": "In the past 18 years Alessandro has helped a variety of companies (from small start-ups to large enterprises) embrace Agile technical practices."
    },
    {
        "word_count": 21,
        "value": "We are what we repeatedly do. Hence, excellence is not an act, but a habit.\u201d Will Durant, paraphrasing Aristotle\u2019s Nicomachean Ethics"
    },
    {
        "word_count": 21,
        "value": "\u2022 Object calisthenics \u2022 Code smells \u2022 The four elements of simple design \u2022 Coupling and Cohesion \u2022 Connascence \u2022 SOLID"
    },
    {
        "word_count": 21,
        "value": "Rule One of a set of explicit or understood regulations or principles governing conduct or procedure withinaparticularareaofactivity.Aprinciplethatoperateswithinaparticularsphereofknowledge, describingorprescribingwhatispossibleorallowable.Acodeofpracticeanddisciplineforareligious order or community."
    },
    {
        "word_count": 21,
        "value": "Follow these rules\u00b2\u2077 until you gain enough experience in TDD or until you feel confident enough to break them (like Picasso):"
    },
    {
        "word_count": 21,
        "value": "3. You are not allowed to write any more production code that is sufficient to pass the one failing unit test"
    },
    {
        "word_count": 21,
        "value": "W e read the test name as a full sentence starting with the test class name: \u201cMy class should do something.\u201d"
    },
    {
        "word_count": 21,
        "value": "1 if number == 1 then return \"1\" 2 else if number == 2 then return \"2\" 3 else return \"4\""
    },
    {
        "word_count": 21,
        "value": "Unit tests have to be fast in order to be executed often. Fast means tests should execute in milliseconds. \u2022 Isolated"
    },
    {
        "word_count": 21,
        "value": "There should be no dependency between tests. Ideally, we should be able to execute them in a random order. \u2022 Repeatable"
    },
    {
        "word_count": 21,
        "value": "TPP \u2013 Defining obvious implementation If we go back to how we evolve code in TDD, we follow these three methods:"
    },
    {
        "word_count": 21,
        "value": "In this transformation, we are now allowed to use any iteration our language provides. We can refactor code to use loops."
    },
    {
        "word_count": 21,
        "value": "We are also moving from using TDD for solving simple algorithmical problems to problems that require a bit more design decisions."
    },
    {
        "word_count": 21,
        "value": "59 Example If we want to model a classic invoice domain, we can approach it as shown in the sample below:"
    },
    {
        "word_count": 21,
        "value": "Primitives are super types that have only contextual meaning. They can express anything, so we tend to use them for everything."
    },
    {
        "word_count": 21,
        "value": "Make the code more explicit, expressing intent through types that become behavior attractors so that these objects will have inherent meaning."
    },
    {
        "word_count": 21,
        "value": "Remember to execute tests after each refactor to make sure we are still on the green. Commit as often as possible"
    },
    {
        "word_count": 21,
        "value": "Deprecate old code and allow clients to migrate to new expanded code, or change client code to point to new code."
    },
    {
        "word_count": 21,
        "value": "Don\u2019t use primitive types as substitutes for classes. If the data type is sufficiently complex, use a class to represent it."
    },
    {
        "word_count": 21,
        "value": "In this chapter, we introduced a new habit. Check it out on the list below. Considerations when writing a new test"
    },
    {
        "word_count": 21,
        "value": "\u2022 When you understand the connection between calisthenics and code smells. \u2022 When you can design code using smells as feedback."
    },
    {
        "word_count": 21,
        "value": "\u2022 Growing Object-Oriented Software, Guided by Tests, Steve Freeman and Nat Pryce\u00b9\u2070\u2070 \u2022 xUnit Test Patterns: Refactoring Test Code, Gerard Meszaros\u00b9\u2070\u00b9"
    },
    {
        "word_count": 21,
        "value": "You can find the repository for your language of choice on Emily\u2019s public repository here: Gilded Rose kata by Emily Bache\u00b9\u2070\u00b2"
    },
    {
        "word_count": 21,
        "value": "Create a Golden Master for the Gilded Rose kata. You can find the repository here: GildedRose refactoring kata by Emily Bache\u00b9\u2070\u00b3"
    },
    {
        "word_count": 21,
        "value": "Do we have an algorithm that needs Define the abstract steps of a Template Method to change certain behavior in subclasses?"
    },
    {
        "word_count": 21,
        "value": "Problem Solution Design Pattern Do several different entities need to Define a one-to-many dependency Observer know about events that have occurred?"
    },
    {
        "word_count": 21,
        "value": "Do we want to separate a collection from the client that uses it so we don\u2019t have to worry about the"
    },
    {
        "word_count": 21,
        "value": "Coupling is an indication of the independence among the components. Some indicators of possible high Coupling are the following code smells:"
    },
    {
        "word_count": 21,
        "value": "\u2022 Message Coupling \u2022 Data Coupling \u2022 Stamp Coupling \u2022 Control Coupling \u2022 External Coupling \u2022 Common Coupling \u2022 Content Coupling"
    },
    {
        "word_count": 21,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++ Everything should be made as simple as possible, but no simpler.\u201d Generally attributed to Albert Einstein"
    },
    {
        "word_count": 21,
        "value": "... 3 } 4 5 public interface IAmACar{ 6 void GoTo(Location location); 7 void RefillGasoline(int gallons); 8 int CurrentMileage(); 9 }"
    },
    {
        "word_count": 21,
        "value": "1 public interface IAmACar{ 2 void GoTo(Location location); 3 void RefillGasoline(int gallons); 4 void RefillElectricity(decimal kiloWatts); 5 int CurrentMileage(); 6 }"
    },
    {
        "word_count": 21,
        "value": "\u00b9\u2076\u00b3JB Rainsberger, \u201cThe Four Elements of Simple Design,\u201d http://www.jbrains.ca/permalink/the-four-elements-of-simple-design \u00b9\u2076\u2074Arlo Belshee, \u201cGood naming is a process, not a single step,\u201d http://arlobelshee.com/good-naming-is-a-process-not-a-single-step/"
    },
    {
        "word_count": 21,
        "value": "\u2022 Pass all tests \u2022 Clear, expressive and consistent \u2022 Duplicates no behavior or configuration \u2022 Minimal methods, classes and modules"
    },
    {
        "word_count": 21,
        "value": "We borrow this concept from other engineering fields such as mechanical, chemical or civil engineering. Wikipedia defines acceptance tests as follows:"
    },
    {
        "word_count": 21,
        "value": "Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\u201d"
    },
    {
        "word_count": 21,
        "value": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:"
    },
    {
        "word_count": 21,
        "value": "Redistributions of source code must retain the above copyright notice, this list of conditions and the followingdisclaimer.Redistributionsinbinaryformmustreproducetheabovecopyrightnotice,this listofconditionsandthefollowingdisclaimerinthedocumentationand/orothermaterialsprovided with the distribution."
    },
    {
        "word_count": 21,
        "value": "1 [TestFixture] 2 public class RomanConverterShould 3 { 4 [TestCase(1, \"I\")] 5 [TestCase(2, \"II\")] 6 [TestCase(3, \"III\")] 7 [TestCase(4, \"IV\")] 8"
    },
    {
        "word_count": 20,
        "value": "2. You are not allowed to write any production code unless it is to make a failing unit test pass"
    },
    {
        "word_count": 20,
        "value": "\u2022 Using technical names for tests (Example: myMethodNameReturnsSomething) \u2022 Leaking implementation details in test names (Example: myTestReturnsFalse or CommandPat- ternTest)"
    },
    {
        "word_count": 20,
        "value": "Write a program to generate all potential anagrams of an input string.\u2074\u2070 For example, the potential anagrams of \u201cbiro\u201d are:"
    },
    {
        "word_count": 20,
        "value": "Keeping with the classic invoice domain, we can approach calculating the total and apply discount as in the sample below:"
    },
    {
        "word_count": 20,
        "value": "\u2022 10 files per package \u2022 50 lines per class \u2022 5 lines per method \u2022 2 arguments per method"
    },
    {
        "word_count": 20,
        "value": "DESIGN II - REFACTORING Refactor: not because you know the abstraction, but because you want to find it.\u201d Martin Fowler"
    },
    {
        "word_count": 20,
        "value": "public int Y {get; set} 5 } 6 7 public class PositionUpdater 8 { 9 public Coordinate MoveUp(Coordinate coordinate) 10"
    },
    {
        "word_count": 20,
        "value": "Object calisthenics violation Only one level of indentation per method Don\u2019t use the ELSE keyword Wrap all primitives and strings"
    },
    {
        "word_count": 20,
        "value": "Mocks are used to provide a way of confirming that commands have been triggered correctly by the Subject Under Test."
    },
    {
        "word_count": 20,
        "value": "1 public interface IInstrument 2 { 3 void Execute(string task); 4 event EventHandler Finished; 5 event EventHandler Error; 6 }"
    },
    {
        "word_count": 20,
        "value": "When we talk about components in object-oriented design, we are referring to: libraries, programs, packages/namespaces/modules, classes, methods, and so forth."
    },
    {
        "word_count": 20,
        "value": "\u2022 Data Class \u2022 Lazy Class \u2022 Middle Man \u2022 Primitive Obsession \u2022 Shotgun Surgery \u00b9\u00b9\u2079Cambridge Dictionary, https://dictionary.cambridge.org/us/dictionary/english/cohesion#dataset-cald4 \u00b9\u00b2\u2070Wikipedia, https://en.wikipedia.org/wiki/Cohesion(computerscience)"
    },
    {
        "word_count": 20,
        "value": "public Time(int hour, int minute, int second){ 7 _hour = hour; 8 _minute = minute; 9 _second = second; 10"
    },
    {
        "word_count": 20,
        "value": "public string Message => _message; 5 6 private string _recipient; 7 private string _sender; 8 private string _message; 9 10"
    },
    {
        "word_count": 20,
        "value": "public Time(int hour, int minute, int second){ 7 _hour = hour; 8 _minute = minute; 9 _second = second; 10"
    },
    {
        "word_count": 20,
        "value": "public Time(Hour hour, int minute, int second){ 19 _hour = hour; 20 _minute = minute; 21 _second = second; 22"
    },
    {
        "word_count": 20,
        "value": "public Time(int hour, int minute, int second){ 7 _hour = hour; 8 _minute = minute; 9 _second = second; 10"
    },
    {
        "word_count": 20,
        "value": "public Triangle(int sideA, int sideB, int sideC){ 7 SideA = sideA; 8 SideB = sideB; 9 SideC = sideC; 10"
    },
    {
        "word_count": 20,
        "value": "A very elegant way, in our opinion, is leveraging Interface Segregation. Let\u2019s see how we could break down our interface:"
    },
    {
        "word_count": 20,
        "value": "-> Refactor stages. In this acceptance test, with the outside loop we are effectively creating an executable definition of \u201cdone.\u201d"
    },
    {
        "word_count": 20,
        "value": "1 > GO UP => use stairs to go up 2 > GO DOWN => use stairs to go down"
    },
    {
        "word_count": 20,
        "value": "To know: Be aware of through observation, inquiry, or information. To understand: Perceive the significance, explanation, or cause of something."
    },
    {
        "word_count": 20,
        "value": "Whatenableseffectivecollaborationiscommunication,againinagreementwiththeAgileprinciples as we have seen in the previous chapter. In agreement with this aspect of DDD, we strongly feel that"
    },
    {
        "word_count": 20,
        "value": "Fighting this natural tendency to inertia is also the goal of the 12th Agile Principle, if you think about it:"
    },
    {
        "word_count": 20,
        "value": "If you can\u2019t describe what you are doing as a process, you don\u2019t know what you\u2019re doing.\u201d William Edwards Deming"
    },
    {
        "word_count": 20,
        "value": "Desperation makes unthinkable things possible. What would you do? Would you accept the challenge? And how would you do it?"
    },
    {
        "word_count": 20,
        "value": "{ 6 {1, \"I\"}, 7 {4, \"IV\"}, 8 {5, \"V\"}, 9 {6, \"VI\"}, 10 {7, \"VII\"}, 11 {8, \"VIII\"}, 12"
    },
    {
        "word_count": 20,
        "value": "{ 7 {1, \"I\"}, 8 {4, \"IV\"}, 9 {5, \"V\"}, 10 {9, \"IX\"}, 11 {10, \"X\"}, 12 {40, \"XL\"}, 13"
    },
    {
        "word_count": 20,
        "value": "{ 7 {1, \"I\"}, 8 {4, \"IV\"}, 9 {5, \"V\"}, 10 {9, \"IX\"}, 11 {10, \"X\"}, 12 {40, \"XL\"}, 13"
    },
    {
        "word_count": 20,
        "value": "{ 8 {40, \"XL\"}, 9 {10, \"X\"}, 10 {9, \"IX\"}, 11 {5, \"V\"}, 12 {4, \"IV\"}, 13 {1, \"I\"}, 14"
    },
    {
        "word_count": 20,
        "value": "Sample solutions: TicTacToe in Swift (partial solution) For the exercise associated with this sample solution, see \u201cSmelly Tic Tac Toe.\u201d"
    },
    {
        "word_count": 19,
        "value": "So far the only statement we have used is return. Now we are free to use any unconditional statements."
    },
    {
        "word_count": 19,
        "value": "1 \"TRUE OR TRUE OR TRUE AND FALSE\" -> true 2 \"TRUE OR FALSE AND NOT FALSE\" -> true"
    },
    {
        "word_count": 19,
        "value": "Example If we want to test a person instance, we can approach it as shown in the sample below:"
    },
    {
        "word_count": 19,
        "value": "If we cannot fully understand what the code we are refactoring does, then what are the chances of succeeding?Smallimprovementsincodereadabilitycandrasticallyimprovecodeunderstandability."
    },
    {
        "word_count": 19,
        "value": "Once all client code is migrated to new code, remove old functionality by removing deprecated code and its tests."
    },
    {
        "word_count": 19,
        "value": "Messages should be sent only to an object (methods should only be invoked on objects) in the following conditions:"
    },
    {
        "word_count": 19,
        "value": "class object. This allows the request to be handled with traditional constructs such as lists, queues and call backs."
    },
    {
        "word_count": 19,
        "value": "Provide a way to access the elements of the collection sequentially without exposing its underlying collection\u2019s implementation details? representation."
    },
    {
        "word_count": 19,
        "value": "Components communicate by using messages. This is the best Coupling type, as different compo- nents only share a message."
    },
    {
        "word_count": 19,
        "value": "Cohesion (noun): \u201cWhen the members of a group or society are united.\u201d Cohesive (adjective): \u201cUnited and working together effectively.\u201d\u00b9\u00b9\u2079"
    },
    {
        "word_count": 19,
        "value": "\u2022 Static methods in a class \u2022 Helper classes \u2022 Criteriafor groupingthings (for example,in folders*with names likehelper, core,utilities, etc.)"
    },
    {
        "word_count": 19,
        "value": "DESIGN VII - CONNASCENCE Great things are done by a series of small things brought together.\u201d Vincent Van Gogh"
    },
    {
        "word_count": 19,
        "value": "1 public class InvoiceableOrder{ 2 Order Order; 3 bool IsInvoiceable; 4 } 5 6 public void ProcessOrders(InvoiceableOrder invoiceableOrder){ 7"
    },
    {
        "word_count": 19,
        "value": "11 } 12 13 public class Time { 14 Hour _hour; 15 int _minute; 16 int _second; 17 18"
    },
    {
        "word_count": 19,
        "value": "There There we go. As always, we replaced Connascence of Meaning with more expressive Connascence of Name and Type."
    },
    {
        "word_count": 19,
        "value": "Let\u2019s go with the first option for simplicity and see how the flow carries on using an interface IGenerateMicrowaves."
    },
    {
        "word_count": 19,
        "value": "1 public class MicrowaveGenerator : IGenerateMicrowaves 2 { 3 } 4 5 public interface IGenerateMicrowaves 6 { 7 }"
    },
    {
        "word_count": 19,
        "value": "1 > ? 2 GO [direction], LOOK [direction/item], OPEN [item], TAKE [item], DROP [item], BAG, U\\ 3 SE [item]"
    },
    {
        "word_count": 19,
        "value": "W e could use a collaborator to keep the implementation in another file and make it even more readable:"
    },
    {
        "word_count": 19,
        "value": "At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.\u201d"
    },
    {
        "word_count": 19,
        "value": "We agree with Nick Tune when he says that bounded contexts should show three core properties to be effective:"
    },
    {
        "word_count": 19,
        "value": "\u00b2\u2075\u2076Gene Kim, et al., The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations, https://www.goodreads.com/book/show/26083308-the-devops-handbook"
    },
    {
        "word_count": 19,
        "value": "\u00b2\u2075\u2077Gene Kim, et al., The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations, https://www.goodreads.com/book/show/26083308-the-devops-handbook"
    },
    {
        "word_count": 19,
        "value": "It is only with the heart that one can see rightly; what is essential is invisible to the eye.\u201d"
    },
    {
        "word_count": 19,
        "value": "This is what Alberto does with EventStorming: he gathers the people with the best available knowledgeforthejobandcollaborativelybuildsaholisticmodeloftheproblemspace,whichusually is very complex."
    },
    {
        "word_count": 19,
        "value": "SAMPLE SOLUTIONS 303 Again we add more failing tests, and again the last transformation is still making tests pass."
    },
    {
        "word_count": 18,
        "value": "Finally, I dedicate this book to my brother, Jo\u00e3o Moreira Santos, a brother, a friend and an example."
    },
    {
        "word_count": 18,
        "value": "For an idea to go from your head into the computer it MUST go through someone else\u2019s hands\u201d"
    },
    {
        "word_count": 18,
        "value": "No exercises yet. Enjoy life! When you are ready to return, we will be here waiting for you."
    },
    {
        "word_count": 18,
        "value": "Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\u201d"
    },
    {
        "word_count": 18,
        "value": "Use obvious implementation as an implementation strategy. 1 if number == 1 then return \"1\" else return \"2\""
    },
    {
        "word_count": 18,
        "value": "The test-driven programming workflow shown here was inspired by a tweet from our good friend, Rachel M. Carmena:\u00b3\u00b3"
    },
    {
        "word_count": 18,
        "value": "if(condition) loop(condition) a + recursion recursion today \u2013 birth CalculateBirthDate() day var Day = 10; Day = 11;"
    },
    {
        "word_count": 18,
        "value": "} If we wrap all primitives and strings, we could design the total and apply discount methods as:"
    },
    {
        "word_count": 18,
        "value": "Don\u2019t abbreviate If we need a long name, it\u2019s likely we are missing a concept. Make it explicit."
    },
    {
        "word_count": 18,
        "value": "Hints: You may find that customizing your IDE is useful (e.g., custom code templates or even custom refactorings)."
    },
    {
        "word_count": 18,
        "value": "1 if (i == 1) tempScore = m_score1; 2 else { score += \"-\"; tempScore = m_score2; }"
    },
    {
        "word_count": 18,
        "value": "Refine scope for improper variable scoping, and make sure variables are declared close to where they are used."
    },
    {
        "word_count": 18,
        "value": "BLO \u2013 Bloater, CHP \u2013 Change preventer, COU \u2013 Coupler, DIS \u2013 Dispensable, OOA \u2013 Object Orientation Abuser"
    },
    {
        "word_count": 18,
        "value": "implement the abstractions for the underlying infrastructure. Those wrappers are the components belonging to the team\u2019s codebase that:"
    },
    {
        "word_count": 18,
        "value": "\u2022 Are generated from a behavior-first position (public interface definition first). \u2022 Can be substituted with Test Doubles."
    },
    {
        "word_count": 18,
        "value": "}); Rather than this, write two independent, more focused tests. Only use Test Doubles for your immediate neighbors"
    },
    {
        "word_count": 18,
        "value": "1 public class TestableGame : Game 2 { 3 private int roll; 4 5 public TestableGame(int desiredRoll) 6"
    },
    {
        "word_count": 18,
        "value": "Do we have a system with lots of states where the logic for the different states is complicated?"
    },
    {
        "word_count": 18,
        "value": "Problem Solution Design Pattern Do we need to add some optional new functionality to something that already exists?"
    },
    {
        "word_count": 18,
        "value": "Life is growth. If we stop growing, technically and spiritually, we are as good as dead.\u201d Morihei Ueshiba"
    },
    {
        "word_count": 18,
        "value": "\u2022 Divergent Change \u2022 Feature Envy \u2022 Inappropriate Intimacy \u2022 Message Chains \u2022 Middle Man \u2022 Shotgun Surgery"
    },
    {
        "word_count": 18,
        "value": "129 Types of Coupling There are two main categories of Coupling that create interdepence for very different resons:"
    },
    {
        "word_count": 18,
        "value": "\u2022 Data Clumps \u2022 Divergent Change \u2022 Duplication \u2022 Large Class \u2022 Long Method \u2022 Long Parameter List"
    },
    {
        "word_count": 18,
        "value": "Cohesion / Coupling Cohesion / Coupling Cohesion / Coupling Cohesion / Coupling Cohesion / Coupling Cohesion / Coupling"
    },
    {
        "word_count": 18,
        "value": "public Address => _address; 13 private string _address; 14 15 public Recipient(string address){ 16 _address = address; 17"
    },
    {
        "word_count": 18,
        "value": "public Address => _address; 22 private string _address; 23 24 public Sender(string address){ 25 _address = address; 26"
    },
    {
        "word_count": 18,
        "value": "public Body => _body; 31 private string _body; 32 33 public Message(string body){ 34 _body = body; 35"
    },
    {
        "word_count": 18,
        "value": "What What happens if we instantiate it like this: 1 var myTime = new Time (27, 76, 82);"
    },
    {
        "word_count": 18,
        "value": "\u2022 Runs all the tests \u2022 Maximizes Cohesion \u2022 Minimizes Coupling \u2022 Says everything once and only once"
    },
    {
        "word_count": 18,
        "value": "We know the past but cannot control it. We control the future but cannot know it.\u201d Claude Shannon"
    },
    {
        "word_count": 18,
        "value": "In a very simplified but effective way, the concept of entropy in a system can be seen as:"
    },
    {
        "word_count": 18,
        "value": "Checking BAG BAG shows a list of items in the bag. The bag can contain only 10 items."
    },
    {
        "word_count": 18,
        "value": "Here is an example of how a User Story Map would look at the end of the conversation."
    },
    {
        "word_count": 18,
        "value": "been humbling and represents the real proof that we have been helping in something they feel is important."
    },
    {
        "word_count": 18,
        "value": "SAMPLE SOLUTIONS Sample solutions: FizzBuzz in Clojure For the kata associated with this solution, see \u201cFizzBuzz by cyber-dojo.\u201d"
    },
    {
        "word_count": 18,
        "value": "Sample solutions: Fibonacci sequence in C++ For the exercise associated with this solution, see \u201cNth Fibonacci by cyber-dojo.\u201d"
    },
    {
        "word_count": 18,
        "value": "1 [TestFixture] 2 public class RomanConverterShould 3 { 4 [TestCase(1, \"I\")] 5 [TestCase(2, \"II\")] 6 [TestCase(3, \"III\")] 7"
    },
    {
        "word_count": 18,
        "value": "Code smells Indication of Cohesion/Coupling problem Alternative Classes with Different Interfaces Comments Data Class Data Clumps Dead Code"
    },
    {
        "word_count": 18,
        "value": "We are based in London, UK, but we can travel or alternatively use remote technology for coaching sessions."
    },
    {
        "word_count": 17,
        "value": "How often do projects stagnate under their own weight? Why does this happen over and over again?"
    },
    {
        "word_count": 17,
        "value": "Pair programming When we are more granular on pair programming, we find the following concepts and practices:"
    },
    {
        "word_count": 17,
        "value": "Either way, congratulations. That means you have started to build your own set of software design values."
    },
    {
        "word_count": 17,
        "value": "To perform the katas, you will need access to a computer with your favorite development environment configured."
    },
    {
        "word_count": 17,
        "value": "Naming tests Tests should have names that describe a business feature or behavior. When naming tests, avoid:"
    },
    {
        "word_count": 17,
        "value": "When you answer yes to all of the above questions, you are ready to move on. Resources"
    },
    {
        "word_count": 17,
        "value": "Sometimesthearrayisnotthebestdatastructureornotthemostdescriptive.Inthistransformation, we can refactor the data structure from an array to a more complex one, if required."
    },
    {
        "word_count": 17,
        "value": "return fibs[index] if index < 2 return index else return fib(index - 1) + fib(index - 2)"
    },
    {
        "word_count": 17,
        "value": "number prime factors 2 [2] 3 [3] 4 [2,2] 6 [2,3] 9 [3,3] 12 [2,2,3] 15 [3,5]"
    },
    {
        "word_count": 17,
        "value": "Implement a Boolean calculator that gets a string in input and evaluates it to the Boolean result."
    },
    {
        "word_count": 17,
        "value": "Supports any number of AND and OR giving precedence to NOT then AND and eventually OR operation:"
    },
    {
        "word_count": 17,
        "value": "1 \"(TRUE OR TRUE OR TRUE) AND FALSE\" -> false 2 \"NOT (TRUE AND TRUE)\" -> false"
    },
    {
        "word_count": 17,
        "value": "Kata In this chapter, as with the previous, we start a kata before we introduce new material."
    },
    {
        "word_count": 17,
        "value": "Main refactors There are five atomic refactors that can be applied to methods, functions, classes, variables, etc."
    },
    {
        "word_count": 17,
        "value": "1 string score = \"\"; 2 if (player1Score == player2Score) 3 { 4 score = formatScoreWhenPlayersAreTied(); 5"
    },
    {
        "word_count": 17,
        "value": "Stubs are used to provide synthetic replacements for queries called on collaborators of the Subject Under Test."
    },
    {
        "word_count": 17,
        "value": "\u2022 Returning a result for a command (weak violation) \u2022 Changing state for a query (strong violation)"
    },
    {
        "word_count": 17,
        "value": "We added a few web resources and books that go much deeper into this subject. Great habits"
    },
    {
        "word_count": 17,
        "value": "Great habits In this chapter, we introduced a new habit. Check it out on the list below."
    },
    {
        "word_count": 17,
        "value": "Example: A JSON serializer used by a web controller and a JSON serializer used by a repository."
    },
    {
        "word_count": 17,
        "value": "For each row in the Cohesion / Coupling column, highlight the correct concept\u2026 either Cohesion or Coupling."
    },
    {
        "word_count": 17,
        "value": "1 public class CarEngineStatusReportController{ 2 IDisplayEngineStatusReport _carEngineView; 3 4 public CarEngineStatusReport(IDisplayEngineStatusReport carEngineView){ 5 _carEngineView = carEngineView; 6"
    },
    {
        "word_count": 17,
        "value": "\u2022 Preconditions cannot be more restrictive. \u2022 Postcondition cannot be less restrictive. \u2022 Invariants must be preserved."
    },
    {
        "word_count": 17,
        "value": "... 8 } 9 10 public class MicrowaveOven{ 11 private MicrowaveGenerator _heater; 12 13 public Microwave(){ 14"
    },
    {
        "word_count": 17,
        "value": "Connascence, as a generalization of both Cohesion and Coupling, addresses either Level 1 and Level 2 encapsulation."
    },
    {
        "word_count": 17,
        "value": "1 public Triangle(int sideA, int sideB, Angle x){ 2 SideA = sideA; 3 SideB = sideB; 4"
    },
    {
        "word_count": 17,
        "value": "1 public class CarBuilder : IBuildCarsWithBrand, IBuildCarsWithEngine, IBuildCarsWithC\\ 2 olor, IBuildCars { 3 private CarBuilder(){} 4 5"
    },
    {
        "word_count": 17,
        "value": "Let\u2019s see an example, assuming for simplicity our message handler queues the messages internally after receiving them."
    },
    {
        "word_count": 17,
        "value": "Our personal definitions of simple design Let\u2019s also look at our own personal definitions of simple design:"
    },
    {
        "word_count": 17,
        "value": "So, from a systemic point of view, what is an object? Well, an object is\u2026 a System."
    },
    {
        "word_count": 17,
        "value": "The ISTQB (International Software Testing Qualifications Board) defines acceptance tests in the context of software design as:"
    },
    {
        "word_count": 17,
        "value": "Acceptance criteria defines \u201cwhat needs to be done\u201d and acceptance tests define \u201chow it should be done.\u201d"
    },
    {
        "word_count": 17,
        "value": "private IGenerateMicrowaves _microwaveGenerator = new MicrowaveGenerator(); 4 5 public void Cook(int minutes){ 6 throw new System.NotImplementedException(); 7"
    },
    {
        "word_count": 17,
        "value": "1 > BAG 2 THE BAG CONTAINS: SOME KEYS, A SWISS KNIFE, A CANDLE AND A COMPASS."
    },
    {
        "word_count": 17,
        "value": "So, the \u201cDomain\u201d of the first \u201cD\u201d is not the Domain Model. It is the Business Domain."
    },
    {
        "word_count": 17,
        "value": "The other parts of the canvas are related to the value proposition in a form of flow:"
    },
    {
        "word_count": 17,
        "value": "\u2022 Problems and observations \u2022 Options \u2022 Possible experiments \u2022 Committed \u2022 Ongoing \u2022 Review \u2022 Next"
    },
    {
        "word_count": 17,
        "value": "1 #ifndef CPPKATAS_SRC_FIBONACCI_H 2 #define CPPKATAS_SRC_FIBONACCI_H 3 4 constexpr auto Fibonacci(const unsigned short index) 5 { 6"
    },
    {
        "word_count": 17,
        "value": "He has worked in Italy and Norway. For the past few years he has resided in London."
    },
    {
        "word_count": 16,
        "value": "Optimism is an occupational hazard of programming: feedback is the treatment.\u201d Kent Beck, Extreme Programming Explained"
    },
    {
        "word_count": 16,
        "value": "Programming is a skill best acquired by practice and example rather than from books.\u201d Alan Turing"
    },
    {
        "word_count": 16,
        "value": "The implementation now has a pivot point. The if statement pivots execution in two different directions."
    },
    {
        "word_count": 16,
        "value": "\u2022 minimum value \u2022 maximum value \u2022 number of elements in the sequence \u2022 average value"
    },
    {
        "word_count": 16,
        "value": "Factorize a positive integer number into its prime factors using TDD and the TPP table.\u2074\u2078 Examples:"
    },
    {
        "word_count": 16,
        "value": "Resist the temptation to read ahead until you have finished implementing the Tic Tac Toe kata."
    },
    {
        "word_count": 16,
        "value": "Great habits In this chapter, we introduced object calisthenics. Check them out on the list below."
    },
    {
        "word_count": 16,
        "value": "1 if (number % 3 == 0 && number % 5 == 0) 2 { 3"
    },
    {
        "word_count": 16,
        "value": "1 string score = \"\"; 2 if (player1Score == player1Score) 3 { 4 switch (player1Score) 5"
    },
    {
        "word_count": 16,
        "value": "{ 12 case 0: 13 return \"Love-All\"; 14 case 1: 15 return \"Fifteen-All\"; 16 case 2:"
    },
    {
        "word_count": 16,
        "value": "85 Object-orientation abusers Cases where the solution does not fully exploit the possibilities of object-oriented design."
    },
    {
        "word_count": 16,
        "value": "PositionUpdater uses data from Coordinate, causing the Feature Envy smell, and Coordinate is a Data Class."
    },
    {
        "word_count": 16,
        "value": "\u2078\u2077\u201cEverything should be made as simple as possible, but not simpler.\u201d Generally attributed to Albert Einstein."
    },
    {
        "word_count": 16,
        "value": "\u2022 Approval-based tests \u2022 Characterization tests \u2022 Golden Master tests \u2022 Model-based tests \u2022 Property-based tests"
    },
    {
        "word_count": 16,
        "value": "When you answer yes to all of the above questions, you are ready to move on."
    },
    {
        "word_count": 16,
        "value": "perform the same logic operation, but the functions they perform in the system are significantly different."
    },
    {
        "word_count": 16,
        "value": "We can clearly see that the CurrentMileage and the TravelTo methods are related and change together."
    },
    {
        "word_count": 16,
        "value": "} 5 } 6 7 public class CarEnginePrintView : IDisplayEngineStatusReport{ 8 void FillWith(CarEngineViewModel viewModel) { 9"
    },
    {
        "word_count": 16,
        "value": "} 11 } 12 13 public class EnhancedAccessCarEngineWebView : IDisplayEngineStatusReport{ 14 void FillWith(CarEngineViewModel viewModel) { 15"
    },
    {
        "word_count": 16,
        "value": "\u2022 The high-level module depends on the abstraction. \u2022 The low-level depends on the same abstraction."
    },
    {
        "word_count": 16,
        "value": "The choice of \u201cleast surprising\u201d behavior depends on the expected audience and hence, from the context."
    },
    {
        "word_count": 16,
        "value": "1 public class Time { 2 int _hour; 3 int _minute; 4 int _second; 5 6"
    },
    {
        "word_count": 16,
        "value": "1 public class Time { 2 int _hour; 3 int _minute; 4 int _second; 5 6"
    },
    {
        "word_count": 16,
        "value": "1 public class Time { 2 int _hour; 3 int _minute; 4 int _second; 5 6"
    },
    {
        "word_count": 16,
        "value": "Let\u2019s Let\u2019s see another example of CoV where the need of validation is not so intuitive."
    },
    {
        "word_count": 16,
        "value": "1 public class Triangle { 2 int SideA; 3 int SideB; 4 int SideC; 5 6"
    },
    {
        "word_count": 16,
        "value": "Given the angle is valid, we are always in a position to calculate the third side."
    },
    {
        "word_count": 16,
        "value": "Is Is this version better? It looks definitely more readable, but how about Coupling and Cohesion?"
    },
    {
        "word_count": 16,
        "value": "var oven = new MicrowaveOven(); 4 5 } 6 7 public class MicrowaveOven(){ 8 9 }"
    },
    {
        "word_count": 16,
        "value": "252 \u201cIt is a mind-map grown during a discussion facilitated by considering the following four aspects:"
    },
    {
        "word_count": 16,
        "value": "There is no real ending. It\u2019s just the place where you stop the story.\u201d Frank Herbert"
    },
    {
        "word_count": 16,
        "value": "For the kata associated with this solution, see \u201cConnecting object calisthenics with code smells and Cohesion/Coupling.\u201d"
    },
    {
        "word_count": 16,
        "value": "Whenwemakeprogressandgetbetteratsomething,itisinherentlymotivating.Inorderfor people to make progress, they have to get feedback and information on how they\u2019re doing.\u201d"
    },
    {
        "word_count": 16,
        "value": "Education never ends, Watson. It is a series of lessons with the greatest for the last.\u201d"
    },
    {
        "word_count": 15,
        "value": "Caution In Vicenza (Veneto, Italy) there are several instances per year of addiction to grappa."
    },
    {
        "word_count": 15,
        "value": "Shared understanding - Coding standard - Collective code ownership - Simple design - System metaphor"
    },
    {
        "word_count": 15,
        "value": "What is the difference between rules, principles and values? Here is what the dictionary says:"
    },
    {
        "word_count": 15,
        "value": "PAIR PROGRAMMING 19 When should I move to the next chapter? Whenever you feel ready."
    },
    {
        "word_count": 15,
        "value": "These rules define the red, green, refactor cycle of TDD shown on the image below."
    },
    {
        "word_count": 15,
        "value": "Tip Start by writing a failing test. Think about what behaviors your code should implement."
    },
    {
        "word_count": 15,
        "value": "I\u2019m not a great programmer; I\u2019m just a good programmer with great habits.\u201d Kent Beck"
    },
    {
        "word_count": 15,
        "value": "Resist the temptation to read ahead until you have finished implementing the Roman numerals kata."
    },
    {
        "word_count": 15,
        "value": "The idea of Transformation Priority Premise is to evolve code while keeping complexity under control."
    },
    {
        "word_count": 15,
        "value": "You can find several public repositories with different subjects for refactoring golf\u2076\u00b9 Refactor 80-20 rule"
    },
    {
        "word_count": 15,
        "value": "private int player2Score = 0; 5 private string player1Name; 6 private string player2Name; 7 8"
    },
    {
        "word_count": 15,
        "value": "Keeping in mind this principle, we can describe a usage pattern for Test Doubles. Queries"
    },
    {
        "word_count": 15,
        "value": "Whenthemethod Copyiscalledonthecopierthenitshouldreadcharactersfromthesource and copy them to the destination until the source returns a newline (\\n)."
    },
    {
        "word_count": 15,
        "value": "1 public interface ITaskDispatcher 2 { 3 string GetTask(); 4 void FinishedTask(string task); 5 }"
    },
    {
        "word_count": 15,
        "value": "In the following subsections, we provide guidelines to create a Golden Master for a system."
    },
    {
        "word_count": 15,
        "value": "In this chapter, we introduced a new habit. Check it out on the list below."
    },
    {
        "word_count": 15,
        "value": "\u2018I\u2019ll tell you what the problem is, mate,\u2019 said Majikthise, \u2018demarcation, that\u2019s the problem!\u2019 [\u2026]"
    },
    {
        "word_count": 15,
        "value": "1 int Multiply(int a, int b) 2 { 3 return a + b; 4 }"
    },
    {
        "word_count": 15,
        "value": "Every case of Connascence can be measured over three dimensions: degree, locality and strength. Degree"
    },
    {
        "word_count": 15,
        "value": "1 _orderProcessor.ProcessOrder(new Tuple(order, true)); 2 3 _orderProcessor.ProcessOrder(new Tuple(order, true, 12345, DateTime.UtcNow, \"Jack\", \\ 4 false));"
    },
    {
        "word_count": 15,
        "value": "} 17 } \u00b9\u2075\u2070A proverb that Marco\u2019s grandad used to repeat like a broken record."
    },
    {
        "word_count": 15,
        "value": "\u2022 Correct and provable behavior \u2022 Obvious code \u2022 Behavior attractors \u2022 Minimal moving parts"
    },
    {
        "word_count": 15,
        "value": "When you have connected the dots on calisthenics, code smells, refactoring, SOLID, Cohesion and Coupling."
    },
    {
        "word_count": 15,
        "value": "Finally, Finally, we test the shopping cart collaboration with a repository to persist its state."
    },
    {
        "word_count": 15,
        "value": "For example, in an ecommerce company selling physical items online, the value stream activities include:"
    },
    {
        "word_count": 15,
        "value": "We laughed again. Then he asked me, \u201cDo you play or have played any sport?\u201d"
    },
    {
        "word_count": 15,
        "value": "1 [TestFixture] 2 public class RomanConverterShould 3 { 4 [TestCase(1, \"I\")] 5 [TestCase(2, \"II\")] 6"
    },
    {
        "word_count": 15,
        "value": "Following up to this quote, we would love to hear your feedback about this book:"
    },
    {
        "word_count": 14,
        "value": "Feedback - Pair programming - Planning game - Test-driven development (TDD) - Whole team"
    },
    {
        "word_count": 14,
        "value": "Learn the rules like a pro, so you can break them like an artist.\u201d"
    },
    {
        "word_count": 14,
        "value": "Feedback about this book we would love to hear your feedback about this book:"
    },
    {
        "word_count": 14,
        "value": "Roles In pair programming, each person takes a turn assuming one of these roles:"
    },
    {
        "word_count": 14,
        "value": "There should be no manual test interpretation or intervention. Red or green! \u2022 Timely"
    },
    {
        "word_count": 14,
        "value": "Important If you cannot make progress in two minutes, it is usually due to:"
    },
    {
        "word_count": 14,
        "value": "After A simple change can make the code much more obvious for the reader."
    },
    {
        "word_count": 14,
        "value": "\u2022 Rename bad names, variables, arguments, instance variables, methods, classes. \u2022 Make abbreviations explicit."
    },
    {
        "word_count": 14,
        "value": "DESIGN III \u2013 CODE SMELLS Design is choosing how you will fail.\u201d Ron Fein"
    },
    {
        "word_count": 14,
        "value": "Introducing a public method on the neighbor, encapsulating the call to its own dependencies."
    },
    {
        "word_count": 14,
        "value": "\u2078\u2078The Law of Demeter is the same concept as the Message Chain code smell."
    },
    {
        "word_count": 14,
        "value": "Do we have a lot of Coupling in a many-to-many relationship of object interactions?"
    },
    {
        "word_count": 14,
        "value": "Do we have multiple additional functions to apply, but order and cardinality is variable?"
    },
    {
        "word_count": 14,
        "value": "Do we have several different objects that need be logically aggregated in a whole?"
    },
    {
        "word_count": 14,
        "value": "Provide an abstraction or placeholder for Proxy another object to control access to it."
    },
    {
        "word_count": 14,
        "value": "Example: A JSON deserializer and some service that uses the result of the deserializer."
    },
    {
        "word_count": 14,
        "value": "\u2018That\u2019s right\u2019 shouted Vroomfondel, \u2018we demand rigidly defined areas of doubt and uncer- tainty!\u2019\u201d"
    },
    {
        "word_count": 14,
        "value": "1 public class LeapYear{ 2 public bool IsLeapYear(int year){ 3 if(year.IsMultipleOf(4) && !year.IsMultipleOf(100)) 4"
    },
    {
        "word_count": 14,
        "value": "Now, Now, just a little modification to our concrete class will do the trick:"
    },
    {
        "word_count": 14,
        "value": "1 public class MicrowaveGenerator : IGenerateMicrowaves 2 { 3 public void SwitchOnFor(int minutes) 4"
    },
    {
        "word_count": 14,
        "value": "Exploring Exploring the world Moving GO followed by the letter of the cardinal point."
    },
    {
        "word_count": 14,
        "value": "Stairs GO followed by UP or DOWN depending on where the stairs are leading."
    },
    {
        "word_count": 14,
        "value": "\u00b2\u00b3\u2075Scott Millett and Nick Tune, Patterns, Principles, and Practices of Domain-Driven Design, https://www.goodreads.com/book/show/ 25531393-patterns-principles-and-practices-of-domain-driven-design"
    },
    {
        "word_count": 14,
        "value": "TheSystemshouldchangefirst,otherwiseoureffortswouldproducesuboptimalsolutions.Butmore often than not, human beings don\u2019t want to change. And neither do Systems."
    },
    {
        "word_count": 14,
        "value": "Here it is important to pinpoint the difference between the event and the command:"
    },
    {
        "word_count": 14,
        "value": "(cond 9 divisible-by-three-and-five? \"fizzbuzz\" 10 divisible-by-three? \"fizz\" 11 divisible-by-five? \"buzz\" 12 :else (str n))))"
    },
    {
        "word_count": 14,
        "value": "public static readonly string[] Results = { \"I\", \"II\", \"III\", \"IV\" }; 5 6"
    },
    {
        "word_count": 14,
        "value": "{ 7 {1, \"I\"}, 8 {2, \"II\"}, 9 {3, \"III\"}, 10 {4, \"IV\"}, 11"
    },
    {
        "word_count": 14,
        "value": "1 // 9 statement -> tail recursion 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 14,
        "value": "1 // 9 statement -> tail recursion 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 14,
        "value": "1 // Wait for patterns to emerge 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 14,
        "value": "For the kata associated with this solution, see \u201cConnecting Cohesion/Coupling and SOLID princi- ples.\u201d"
    },
    {
        "word_count": 14,
        "value": "Single Responsibility Principle Open/Closed Principle Liskov Substitution Principle Interface Segregation Principle Dependency inversion Principle"
    },
    {
        "word_count": 13,
        "value": "\u2022 Classic TDD \u2022 Outside-In TDD \u2022 Test doubles \u2022 Transformation Priority Premise"
    },
    {
        "word_count": 13,
        "value": "Design improvement/refactor Doing the same exercise for refactoring, we end up with this:"
    },
    {
        "word_count": 13,
        "value": "\u2022 IDE productivity \u2022 Refactoring smells \u2022 Refactoring legacy code \u2022 Design patterns"
    },
    {
        "word_count": 13,
        "value": "\u2022 \u201cExtreme Programming: A Gentle Introduction\u201d\u2077 \u2022 \u201cWhat is extreme programming,\u201d Ron Jeffries\u2078"
    },
    {
        "word_count": 13,
        "value": "A journey of a thousand miles begins with a single step.\u201d Lao Tzu"
    },
    {
        "word_count": 13,
        "value": "Important Remember to have breaks when you are working and especially when pairing."
    },
    {
        "word_count": 13,
        "value": "Input Expected output Strategy Implementation 1 \u201c1\u201d fake it 2 \u201c2\u201d obvious implementation"
    },
    {
        "word_count": 13,
        "value": "4 \u201c4\u201d refactor (because of duplicated if\u2019s) 3 \u201cfizz\u201d triangulation + obvious implementation"
    },
    {
        "word_count": 13,
        "value": "All classes must have state No static methods and no utility classes. Why?"
    },
    {
        "word_count": 13,
        "value": "... 6 } 7 8 string formatScoreWhenPlayersAreTied() 9 { 10 switch (player1Score) 11"
    },
    {
        "word_count": 13,
        "value": "The name \u201csmell\u201d is significant. Smells are not called \u201cmistakes\u201d for important reasons:"
    },
    {
        "word_count": 13,
        "value": "Bloaters Something that has grown so large that it cannot be effectively handled."
    },
    {
        "word_count": 13,
        "value": "the leaked abstraction is caused by the violation of the Law of Demeter.\u2078\u2078"
    },
    {
        "word_count": 13,
        "value": "The The GetTask method returns the next task to execute on the instrument."
    },
    {
        "word_count": 13,
        "value": "Provide a unified interface to a set of Facade interfaces in a system."
    },
    {
        "word_count": 13,
        "value": "Interaction Coupling\u2014When the dependency is based on a component calling methods of another."
    },
    {
        "word_count": 13,
        "value": "\u00b9\u00b3\u2074Robert C. Martin, \u201cThe Interface Segregation Principle,\u201d \u201cEngineering Notebook,\u201d C++ Report, Nov-Dec, 1996."
    },
    {
        "word_count": 13,
        "value": "1 public class Kitchen{ 2 private Microwave _oven; 3 4 public Kitchen(){ 5"
    },
    {
        "word_count": 13,
        "value": "return _hour + \u201c:\u201d + _minute + \u201c:\u201d + _second + \u201c:\u201d; 14"
    },
    {
        "word_count": 13,
        "value": "return _hour + \u201c:\u201d + _minute + \u201c:\u201d + _second + \u201c:\u201d; 14"
    },
    {
        "word_count": 13,
        "value": "return _hour + \u201c:\u201d + _minute + \u201c:\u201d + _second + \u201c:\u201d; 26"
    },
    {
        "word_count": 13,
        "value": "return inputData + difference; 5 } 6 7 public bool Check(string inputData){ 8"
    },
    {
        "word_count": 13,
        "value": "return inputData + Checksum(inputData); 3 } 4 5 public bool Check(string inputData){ 6"
    },
    {
        "word_count": 13,
        "value": "return Checksum(inputData) == 0; 7 } 8 9 private int Checksum(string inputData){ 10"
    },
    {
        "word_count": 13,
        "value": "\u2022 Passes the tests \u2022 Reveals intention \u2022 No duplication \u2022 Fewest elements"
    },
    {
        "word_count": 13,
        "value": "\u2022 Proves business correctness with tests \u2022 Expresses functional behavior \u2022 Minimizes entropy"
    },
    {
        "word_count": 13,
        "value": "private IGenerateMicrowaves _microwaveGenerator = new MicrowaveGenerator(); 4 5 public void Cook(int minutes){ 6"
    },
    {
        "word_count": 13,
        "value": "var shoppingCart = new ShoppingCart(discountCalculator, repository); 12 13 shoppingCart.Add(ACustomerId, ABookID, AQuantity); 14 15"
    },
    {
        "word_count": 13,
        "value": "var shoppingCart = new ShoppingCart(discountCalculator, repository); 12 13 shoppingCart.Add(ACustomerId, ABookID, AQuantity); 14 15"
    },
    {
        "word_count": 13,
        "value": "Books \u2022 Growing Object-Oriented Software, Guided by Tests, Steve Freeman and Nat Pryce\u00b2\u2070\u00b2"
    },
    {
        "word_count": 13,
        "value": "Essentially, what they say is that DevOps enables technology effectiveness in three ways."
    },
    {
        "word_count": 13,
        "value": "\u2022 \u201cInductive Reasoning and Bounded Rationality,\u201d Complexity and the Economy, W. Brian Arthur\u00b3\u2070\u00b3"
    },
    {
        "word_count": 13,
        "value": "return Fibonacci(index - 1) + Fibonacci(index - 2); 9 } 10 11 #endif"
    },
    {
        "word_count": 13,
        "value": "W e start the implementation using the first transformation: no code to nil."
    },
    {
        "word_count": 13,
        "value": "1 // 2 nil -> constant 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 13,
        "value": "1 // 6 unconditional -> conditional 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 13,
        "value": "1 // 7 variable -> array 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 13,
        "value": "public static readonly string[] Results = { \"I\", \"II\", \"III\" }; 5 6"
    },
    {
        "word_count": 13,
        "value": "1 // 8 array -> collection 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 13,
        "value": "public static readonly IDictionary<int, string> Results = new Dictionary<int, st\\ 5 ring> 6"
    },
    {
        "word_count": 13,
        "value": "1 // 10 if -> while 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 13,
        "value": "func append(position: Position) throws { 22 if playedPositions.contains(position) { 23 throw TicTacToeError.invalidPosition 24"
    },
    {
        "word_count": 13,
        "value": "For the kata associated with this solution, see \u201cConnecting code smells with Cohesion/Coupling.\u201d"
    },
    {
        "word_count": 12,
        "value": "This is why we have divided the journey in four main sections:"
    },
    {
        "word_count": 12,
        "value": "The pomodoro (tomato) shaped timer. There are five steps to this technique:"
    },
    {
        "word_count": 12,
        "value": "Important Extract duplication only when you see it for the third time."
    },
    {
        "word_count": 12,
        "value": "1 if number == 3 then return \"fizz\" 2 else return str(number)"
    },
    {
        "word_count": 12,
        "value": "32 Where are we in the big picture of OO software design?"
    },
    {
        "word_count": 12,
        "value": "//Assert block (aka Then) \u2013 assert the expected results have occurred 8"
    },
    {
        "word_count": 12,
        "value": "40 Where are we in the big picture of OO software design?"
    },
    {
        "word_count": 12,
        "value": "As tests get more specific code gets more generic.\u201d Robert C. Martin"
    },
    {
        "word_count": 12,
        "value": "1 \"TRUE AND FALSE\" -> false 2 \"TRUE AND TRUE\" -> true"
    },
    {
        "word_count": 12,
        "value": "1 \"TRUE OR FALSE\" -> true 2 \"FALSE OR FALSE\" -> false"
    },
    {
        "word_count": 12,
        "value": "53 Where are we in the big picture of OO software design?"
    },
    {
        "word_count": 12,
        "value": "} Using first class collections, we could design the model as follows:"
    },
    {
        "word_count": 12,
        "value": "// we get a person instance from somewhere 16 assert.equal(bart, person) 17"
    },
    {
        "word_count": 12,
        "value": "67 Where are we in the big picture of OO software design?"
    },
    {
        "word_count": 12,
        "value": "88 After removing the Feature Envy code smell, Coordinate looks like this:"
    },
    {
        "word_count": 12,
        "value": "public int Y {get; private set} 5 6 public void MoveUp() 7"
    },
    {
        "word_count": 12,
        "value": "Books Refactoring: Improving the Design of Existing Code, Martin Fowler, et al.\u2078\u2074"
    },
    {
        "word_count": 12,
        "value": "Use Stubs for Queries \u2078\u2076Vaughn Vernon, \u201cReally Simple CQRS,\u201d Kalele blog https://kalele.io/blog-posts/really-simple-cqrs/"
    },
    {
        "word_count": 12,
        "value": "Generally there are two kinds of possible violations of the CQS Principle:"
    },
    {
        "word_count": 12,
        "value": "Problem Solution Design Pattern Are we instantiating families (or sets) of objects?"
    },
    {
        "word_count": 12,
        "value": "Do we want to simplify, beautify and clean existing systems or sub-systems?"
    },
    {
        "word_count": 12,
        "value": "Inheritance Coupling\u2014When the dependency is based on a component inheriting from another."
    },
    {
        "word_count": 12,
        "value": "*Or namespaces, packages, modules that are the equivalent of a junk drawer."
    },
    {
        "word_count": 12,
        "value": "1 public class CarEngineWebView : IDisplayEngineStatusReport{ 2 void FillWith(CarEngineViewModel viewModel) { 3"
    },
    {
        "word_count": 12,
        "value": "// is throwing an exception, as a Microwave in this context 11"
    },
    {
        "word_count": 12,
        "value": "Sandro Mancuso, in his blog, defines the Balanced Abstraction Principle as follows:"
    },
    {
        "word_count": 12,
        "value": "\u2022 When you understand the meaning of SOLID principles. \u2022 WhenyouunderstandtheconnectionbetweenCohesion,Coupling,codesmellsandtheSOLID principles."
    },
    {
        "word_count": 12,
        "value": "public Notification From(string sender){ 16 _sender = sender; 17 return this; 18"
    },
    {
        "word_count": 12,
        "value": "public Notification WithMessage(string message){ 21 _message = message; 22 return this; 23"
    },
    {
        "word_count": 12,
        "value": "return _hour + \u201c:\u201d + _minute + \u201c:\u201d + _second + \u201c:\u201d;"
    },
    {
        "word_count": 12,
        "value": "1 AddChecksum(\"32143\") => \"321437\" 2 Check(\"321437\") => true 3 Check(\"321432\") => false"
    },
    {
        "word_count": 12,
        "value": "public IBuildCars WithBrand(Brand brand){ 3 _brand = brand; 4 return this; 5"
    },
    {
        "word_count": 12,
        "value": "public IBuildCars WithEngine(Engine engine){ 8 _engine = engine; 9 return this; 10"
    },
    {
        "word_count": 12,
        "value": "public IBuildCars OfColor(Color color){ 13 _color = color; 14 return this; 15"
    },
    {
        "word_count": 12,
        "value": "public IBuildCarsWithEngine WithBrand(Brand brand){ 10 _brand = brand; 11 return this; 12"
    },
    {
        "word_count": 12,
        "value": "public IBuildCarsWithColor WithEngine(Engine engine){ 15 _engine = engine; 16 return this; 17"
    },
    {
        "word_count": 12,
        "value": "Left: Metrics and analytics for feedback, Right: Rules and principles for guidance"
    },
    {
        "word_count": 12,
        "value": "Acceptance tests are formalization of an acceptance criteria, defined by ISTQB as:"
    },
    {
        "word_count": 12,
        "value": "oven.Cook(5); 5 6 } 7 8 public class MicrowaveOven(){ 9 10 }"
    },
    {
        "word_count": 12,
        "value": "1 public interface IGenerateMicrowaves 2 { 3 void SwitchOnFor(int minutes); 4 }"
    },
    {
        "word_count": 12,
        "value": "When I print my current portfolio Then the outcome displayed should be:"
    },
    {
        "word_count": 12,
        "value": "Game utilities Help ? lists all the available commands and their usage."
    },
    {
        "word_count": 12,
        "value": "\u00b2\u00b9\u00b2George Dinwiddie, \u201cThe Three Amigos Strategy of Developing User Stories,\u201d https://www.agileconnection.com/article/three-amigos- strategy-developing-user-stories"
    },
    {
        "word_count": 12,
        "value": "Business Model Canvas with questions, flow of Money and flow of Value"
    },
    {
        "word_count": 12,
        "value": "High level representation of a value stream as a sequence of activities"
    },
    {
        "word_count": 12,
        "value": "Activities of the value stream raising domain events Bounded contexts and communication"
    },
    {
        "word_count": 12,
        "value": "These three properties have the potential to minimize entropy and allow scalability."
    },
    {
        "word_count": 12,
        "value": "Thelastprincipleisaboutexperimentationandknowledgesharing,sothatbreakthroughdiscoveries can quickly spread into the organization and improve the whole System."
    },
    {
        "word_count": 12,
        "value": "The three essential virtues of the \u201cideal team player\u201d by Patrick Lencioni"
    },
    {
        "word_count": 12,
        "value": "Software development is a learning process, working code is a side effect.\u201d"
    },
    {
        "word_count": 12,
        "value": "Books \u2022 Introducing EventStorming, An Act of Deliberate Collective Learning, Alberto Brandolini\u00b3\u00b9\u2075"
    },
    {
        "word_count": 12,
        "value": "1 [TestFixture] 2 public class RomanConverterShould 3 { 4 [TestCase(1, \"I\")] 5"
    },
    {
        "word_count": 12,
        "value": "Adding Adding another conditional will make the test pass, but cause duplication."
    },
    {
        "word_count": 12,
        "value": "public static readonly IDictionary<int, string> Results = 5 new Dictionary<int, string> 6"
    },
    {
        "word_count": 12,
        "value": "public static readonly IDictionary<int, string> Results = 4 new Dictionary<int, string> 5"
    },
    {
        "word_count": 12,
        "value": "public static readonly IDictionary<int, string> Results = 5 new Dictionary<int, string> 6"
    },
    {
        "word_count": 12,
        "value": "public static readonly IDictionary<int, string> Results = 5 new Dictionary<int, string> 6"
    },
    {
        "word_count": 12,
        "value": "public static readonly IDictionary<int, string> Results = 5 new Dictionary<int, string> 6"
    },
    {
        "word_count": 12,
        "value": "public static readonly IDictionary<int, string> mappings = 6 new Dictionary<int, string> 7"
    },
    {
        "word_count": 11,
        "value": "Continuous process - Continuous integration - Design improvement/Refactor - Small releases"
    },
    {
        "word_count": 11,
        "value": "Each part is divided into several chapters with a common structure:"
    },
    {
        "word_count": 11,
        "value": "Caution Pair programming requires a high level of maturity from peers."
    },
    {
        "word_count": 11,
        "value": "Important Pair programming should be a choice, not an enforced practice."
    },
    {
        "word_count": 11,
        "value": "//Act block (aka When) \u2013 execute the subject under test 5"
    },
    {
        "word_count": 11,
        "value": "Supports NOT operator: 1 \"NOT TRUE\" -> false Supports AND operator:"
    },
    {
        "word_count": 11,
        "value": "\u2076\u00b2Arlo Belshee,\u201dGood naming is a process, not a single step\u201d http://arlobelshee.com/good-naming-is-a-process-not-a-single-step/"
    },
    {
        "word_count": 11,
        "value": "Change preventers Something that hinders changing or further developing the software."
    },
    {
        "word_count": 11,
        "value": "Dispensables Something unnecessary that should be removed from the source code."
    },
    {
        "word_count": 11,
        "value": "return new Coordinate{X = coordinate.X, Y = coordinate.Y + 1}; 12"
    },
    {
        "word_count": 11,
        "value": "A more informal checklist We can only play with toys that:"
    },
    {
        "word_count": 11,
        "value": "When to refactor (extended for code smells) Refactor in these circumstances:"
    },
    {
        "word_count": 11,
        "value": "Note: For a sample (partial) solution, see the Appendices. Great habits"
    },
    {
        "word_count": 11,
        "value": ".Callback((user) => // Called after the service returned the user 21"
    },
    {
        "word_count": 11,
        "value": "1 public interface IInstrumentProcessor 2 { 3 void Process(); 4 }"
    },
    {
        "word_count": 11,
        "value": "The exercise is to implement the InstrumentProcessor in a way that:"
    },
    {
        "word_count": 11,
        "value": "1 public class Game 2 { 3 public void Play() 4"
    },
    {
        "word_count": 11,
        "value": "1 public class Game 2 { 3 public void Play() 4"
    },
    {
        "word_count": 11,
        "value": "114 Kata Golden Master on Gilded Rose kata by Emily Bache"
    },
    {
        "word_count": 11,
        "value": "Do we need to follow several steps to instantiate our objects?"
    },
    {
        "word_count": 11,
        "value": "Do we have the right logic exposed with the wrong interface?"
    },
    {
        "word_count": 11,
        "value": "Convert the interface of a class into Adapter another, correct interface."
    },
    {
        "word_count": 11,
        "value": "143 Let\u2019s look at a simple example and consider this code:"
    },
    {
        "word_count": 11,
        "value": "1 public interface IDisplayEngineStatusReport { 2 void FillWith(CarEngineViewModel viewModel); 3 }"
    },
    {
        "word_count": 11,
        "value": "// If you replace Oven with Microwave and call Cook 9"
    },
    {
        "word_count": 11,
        "value": "23 public class Chef { 24 public void Cook(Oven oven){ 25"
    },
    {
        "word_count": 11,
        "value": "Note: For answers, see Appendices. Some ideas for the Reason column"
    },
    {
        "word_count": 11,
        "value": "When to refactor (extended for SOLID principles) Refactor in these circumstances:"
    },
    {
        "word_count": 11,
        "value": "public Notification To(string recipient){ 11 _recipient = recipient; 12 return this;"
    },
    {
        "word_count": 11,
        "value": "public IBuildCars WithColor(Color color){ 20 _color = color; 21 return this;"
    },
    {
        "word_count": 11,
        "value": "var messageHandler = new MessageHandler(); 5 messageHandler.OnNewMessage += ()=>awaiter.Set(); 6 7"
    },
    {
        "word_count": 11,
        "value": "} 11 } 12 13 public class Controller{ 14 GlobalCounter _counter;"
    },
    {
        "word_count": 11,
        "value": "Simplicity is the ultimate sophistication.\u201d Generally attributed to Leonardo Da Vinci"
    },
    {
        "word_count": 11,
        "value": "The 3 Cs of design: from Cohesion and Coupling to Connascence"
    },
    {
        "word_count": 11,
        "value": "Scenario 1: Title Given [context or pre-conditions] And [some more context]\u2026"
    },
    {
        "word_count": 11,
        "value": "1 // 1 nil 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 11,
        "value": "Applying Applying the next transformation variable to array removes the duplication."
    },
    {
        "word_count": 11,
        "value": "1 // no transformation 2 public class RomanConverter 3 { 4"
    },
    {
        "word_count": 11,
        "value": "{ 7 {1, \"I\"}, 8 {4, \"IV\"}, 9 {5, \"V\"}, 10"
    },
    {
        "word_count": 11,
        "value": "} 31 } 32 33 public class RomanConverter 34 { 35"
    },
    {
        "word_count": 11,
        "value": "let game: Game = Game() 46 47 func test_thatGameDoesNotAllowPlayerOToPlayFirst() { 48"
    },
    {
        "word_count": 11,
        "value": "Large Class Lazy Class Long Method Long Parameter List Message Chains"
    },
    {
        "word_count": 10,
        "value": "\u201cSe a vida fosse curta todos os homens seriam poetas.\u201d"
    },
    {
        "word_count": 10,
        "value": "\u2022 TDD \u2022 Pair programming \u2022 Refactoring \u2022 Simple design"
    },
    {
        "word_count": 10,
        "value": "Run the tests and make sure they are all green."
    },
    {
        "word_count": 10,
        "value": "Note: For a sample solution, see the Appendices. Great habits"
    },
    {
        "word_count": 10,
        "value": "//Arrange block (aka Given) \u2013 create all necessary preconditions 2"
    },
    {
        "word_count": 10,
        "value": "36 Benefits from organizing tests in arrange, act and assert"
    },
    {
        "word_count": 10,
        "value": "Allotamaximumoftwominutestocompleteeachofthefollowingtasks.Ifyougetstuckandexceed two minutes, reset your work and start from scratch:"
    },
    {
        "word_count": 10,
        "value": "Important Pay extra attention to not break the following rules."
    },
    {
        "word_count": 10,
        "value": "63 No classes with more than two instance variables Why?"
    },
    {
        "word_count": 10,
        "value": "71 When to refactor (for now) Refactor in these circumstances:"
    },
    {
        "word_count": 10,
        "value": "{ 10 this.player1Name = player1Name; 11 this.player2Name = player2Name; 12"
    },
    {
        "word_count": 10,
        "value": "Kata Parallel change kata by Pawel Duda and Carlos Bl\u00e9"
    },
    {
        "word_count": 10,
        "value": "\u2078\u2075Martin Fowler mentions Test Doubles in this blog post, too."
    },
    {
        "word_count": 10,
        "value": "Fake objects are handmade Stubs (sometimes called \u201cpoor man Stubs\u201d)."
    },
    {
        "word_count": 10,
        "value": "Spies Spies are handmade Mocks (sometimes called \u201cpoor man Mocks\u201d)."
    },
    {
        "word_count": 10,
        "value": ".Callback((userName) => //Called before the service gets the user 11"
    },
    {
        "word_count": 10,
        "value": "Step Step 3: Write a test using the TestableGame class."
    },
    {
        "word_count": 10,
        "value": "Kata Characterization tests on Gilded Rose kata by Emily Bache"
    },
    {
        "word_count": 10,
        "value": "Revisiting the refactoring guidelines Stay in the green while refactoring"
    },
    {
        "word_count": 10,
        "value": "Do derived classes need to create instances following some logic?"
    },
    {
        "word_count": 10,
        "value": "Without violating encapsulation, capture and externalize an object\u2019s internal state."
    },
    {
        "word_count": 10,
        "value": "Compose objects into tree structures to Composite represent part-whole hierarchies."
    },
    {
        "word_count": 10,
        "value": "When to refactor (extended for Cohesion/Coupling) Refactor in these circumstances:"
    },
    {
        "word_count": 10,
        "value": "Do Do you find anything strange in this Car class?"
    },
    {
        "word_count": 10,
        "value": "Let\u2019s see a simple example using our beloved Car domain:"
    },
    {
        "word_count": 10,
        "value": "// it will change the meaning because this method 10"
    },
    {
        "word_count": 10,
        "value": "This This is how a normal dependency hierarchy could look:"
    },
    {
        "word_count": 10,
        "value": "1 public class LeapYear{ 2 public bool IsLeapYear(int year){ 3"
    },
    {
        "word_count": 10,
        "value": "//returning void???? for a factory???? 3 public void DoSomething() 4"
    },
    {
        "word_count": 10,
        "value": "public void SendEmail(string recipient, string sender, string message) { 3"
    },
    {
        "word_count": 10,
        "value": "public void SendEmail(Recipient recipient, Sender sender, Message message) { 3"
    },
    {
        "word_count": 10,
        "value": "} 9 } 10 11 public class Recipient { 12"
    },
    {
        "word_count": 10,
        "value": "} 18 } 19 20 public class Sender { 21"
    },
    {
        "word_count": 10,
        "value": "} 27 } 28 29 public class Message { 30"
    },
    {
        "word_count": 10,
        "value": "} 24 } 25 26 _notificationSystem.SendEmail( 27 new Notification() 28"
    },
    {
        "word_count": 10,
        "value": "public void ProcessOrder(Tuple<Order, bool, int, datetime, string, bool> orderInfo) 11"
    },
    {
        "word_count": 10,
        "value": "var receiptId = NextUnsentReceiptId(); 4 5 while(receiptId != null){ 6"
    },
    {
        "word_count": 10,
        "value": "int count = 0; 3 4 public void Increment(){ 5"
    },
    {
        "word_count": 10,
        "value": "} 7 8 public int CurrentCount(){ 9 return count; 10"
    },
    {
        "word_count": 10,
        "value": "15 16 public Controller(GlobalCounter counter){ 17 _counter = counter; 18"
    },
    {
        "word_count": 10,
        "value": "Books Understanding the Four Rules of Simple Design, Corey Haines\u00b9\u2077\u00b3"
    },
    {
        "word_count": 10,
        "value": "oven.Cook(5); 5 6 } 7 8 public class MicrowaveOven(){ 9"
    },
    {
        "word_count": 10,
        "value": "10 public void Cook(int minutes){ 11 throw new System.NotImplementedException(); 12"
    },
    {
        "word_count": 10,
        "value": "Narrative: As a [role] I want [feature] So that [benefit]"
    },
    {
        "word_count": 10,
        "value": "Without hesitation, I began, \u201cZoff, Gentile, Cabrini, Scirea, Collovati, Oriali\u2026\u201d\u00b2\u2079\u2077"
    },
    {
        "word_count": 10,
        "value": "Everybody is a master in his own silo.\u201d Alberto Brandolini"
    },
    {
        "word_count": 10,
        "value": "} 42 } 43 44 class TicTacToeTests: XCTestCase { 45"
    },
    {
        "word_count": 10,
        "value": "Too low Coupling \u2013 The class hierarchy is probably wrong."
    },
    {
        "word_count": 10,
        "value": "Sample solutions: Connecting object calisthenics with code smells and Cohesion/Coupling"
    },
    {
        "word_count": 9,
        "value": "XP does have a set of technical practices, namely:"
    },
    {
        "word_count": 9,
        "value": "\u2022 First steps \u2022 Walking \u2022 Running \u2022 Flying"
    },
    {
        "word_count": 9,
        "value": "How to get the most out of this book"
    },
    {
        "word_count": 9,
        "value": "Refactoring and the Rule of Three \u2013 baby steps"
    },
    {
        "word_count": 9,
        "value": "Wikipedia\u00b2\u2078 Six degrees of freedom in a three-dimensional space:\u00b2\u2079"
    },
    {
        "word_count": 9,
        "value": "Organizing your test in arrange, act and assert blocks"
    },
    {
        "word_count": 9,
        "value": "37 For example: [6, 9, 15, -2, 92, 11]"
    },
    {
        "word_count": 9,
        "value": "Bonus! Practicing TDD at an extreme \u2013 baby steps"
    },
    {
        "word_count": 9,
        "value": "\u2022 Use the Rule of Three to tackle duplication."
    },
    {
        "word_count": 9,
        "value": "BONUS: Prints the Abstract Syntax Tree representing the calculation:"
    },
    {
        "word_count": 9,
        "value": "\u2022 Use the Rule of Three to tackle duplication."
    },
    {
        "word_count": 9,
        "value": "54 When should I move to the next chapter?"
    },
    {
        "word_count": 9,
        "value": "Object calisthenics \u2013 10 steps for better software design"
    },
    {
        "word_count": 9,
        "value": "{ 3 void ApplyDiscount(decimal discount) 4 decimal CalculateTotal() 5"
    },
    {
        "word_count": 9,
        "value": "{ 11 void ApplyDiscount(Discount discount) 12 Money CalculateTotal() 13"
    },
    {
        "word_count": 9,
        "value": "68 When should I move to the next chapter?"
    },
    {
        "word_count": 9,
        "value": "Your pairing partner should carefully score you as follows:"
    },
    {
        "word_count": 9,
        "value": "\u2022 Constants from magic numbers and strings. \u2022 Conditionals."
    },
    {
        "word_count": 9,
        "value": "Couplers Something that causes excessive coupling of different modules."
    },
    {
        "word_count": 9,
        "value": "Only use Test Doubles for classes that you own"
    },
    {
        "word_count": 9,
        "value": "Only use Test Doubles for classes that you own"
    },
    {
        "word_count": 9,
        "value": "//Change input parameters behavior 13 if(userName = string.Empty) 14"
    },
    {
        "word_count": 9,
        "value": "//Change returned value behavior 23 if(user == null) 24"
    },
    {
        "word_count": 9,
        "value": "The The task dispatcher must have the following interface:"
    },
    {
        "word_count": 9,
        "value": "TEST DOUBLES 106 The InstrumentProcessor has the following interface:"
    },
    {
        "word_count": 9,
        "value": "1 [TestFixture] 2 public class GameShould 3 { 4"
    },
    {
        "word_count": 9,
        "value": "in this kata as input is hard-coded in program)"
    },
    {
        "word_count": 9,
        "value": "Books Working Effectively with Legacy Code, Michael C. Feathers\u00b9\u2070\u2079"
    },
    {
        "word_count": 9,
        "value": "124 Kata Refactor Game of Life kata to patterns"
    },
    {
        "word_count": 9,
        "value": "\u2022 Command pattern \u2022 State pattern \u2022 Strategy pattern"
    },
    {
        "word_count": 9,
        "value": "133 Other indicators of possible low Cohesion in design"
    },
    {
        "word_count": 9,
        "value": "Also for Cohesion, there are two main, distinct categories:"
    },
    {
        "word_count": 9,
        "value": "Examples: util, core, helper (modules, packages, namespaces or folders)"
    },
    {
        "word_count": 9,
        "value": "Books Practical Guide to Structured Systems Design, Meilir Page-Jones\u00b9\u00b2\u2078"
    },
    {
        "word_count": 9,
        "value": "1 public class CarEngineStatusReportController{ 2 public View DisplayEngineStatusReport(){ 3"
    },
    {
        "word_count": 9,
        "value": "\u2026and \u2026and we would now need three concrete implementations\u2026"
    },
    {
        "word_count": 9,
        "value": "1 int SaveFile(string filename, string text) 2 { 3"
    },
    {
        "word_count": 9,
        "value": "| Solid Principle | Cohesion / Coupling | Reason"
    },
    {
        "word_count": 9,
        "value": "public static IBuildCarsWithBrand New(){ 6 return new CarBuilder(); 7"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "Marco What are the four elements of simple design?"
    },
    {
        "word_count": 9,
        "value": "\u00b9\u2076\u00b2JB Rainsberger, \u201cThe Four Elements of Simple Design,\u201d http://www.jbrains.ca/permalink/the-four-elements-of-simple-design"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "DESIGN VIII \u2013 THE FOUR ELEMENTS OF SIMPLE DESIGN"
    },
    {
        "word_count": 9,
        "value": "Eric Evans, in his epic Domain-Driven Design book, writes:"
    },
    {
        "word_count": 9,
        "value": "Good design and bad design, refactoring impact over time"
    },
    {
        "word_count": 9,
        "value": "public void Execute(int customerId, int categoryId, int[] itemIds) 4"
    },
    {
        "word_count": 9,
        "value": "Unit test style Constructed using a unit test framework."
    },
    {
        "word_count": 9,
        "value": "OUTSIDE-IN DEVELOPMENT 224 Katacombs of Shoreditch by Marco Consolaro"
    },
    {
        "word_count": 9,
        "value": "The right thing and the thing right: bugs\u2019 impact"
    },
    {
        "word_count": 9,
        "value": "private readonly RefundContext _ = new RefundContext(); 3 4"
    },
    {
        "word_count": 9,
        "value": "The five focusing steps of the Theory of Constraints"
    },
    {
        "word_count": 9,
        "value": "Activities of the value stream mapped into bounded contexts"
    },
    {
        "word_count": 9,
        "value": "1 (ns clojure-katas.fizzbuzz) 2 3 (defn fizzBuzz [n] 4"
    },
    {
        "word_count": 9,
        "value": "1 (ns clojure-katas.fizzbuzz-test 2 (:require [clojure.test :refer :all] 3"
    },
    {
        "word_count": 9,
        "value": "SAMPLE SOLUTIONS 297 We add a new failing test."
    },
    {
        "word_count": 9,
        "value": "SAMPLE SOLUTIONS 298 We add a new failing test."
    },
    {
        "word_count": 9,
        "value": "} 28 } 29 30 class Game { 31"
    },
    {
        "word_count": 9,
        "value": "if lastPlayer == player { 36 throw TicTacToeError.invalidPlayer 37"
    },
    {
        "word_count": 9,
        "value": "39 lastPlayer = player 40 try board.append(position: position) 41"
    },
    {
        "word_count": 9,
        "value": "Middle Man Parallel Inheritance Hierarchies Primitive Obsession Refused Bequest"
    },
    {
        "word_count": 9,
        "value": "Sample solutions: Connecting Cohesion / Coupling and SOLID principles"
    },
    {
        "word_count": 9,
        "value": "| Solid Principle | Cohesion / Coupling | Reason"
    },
    {
        "word_count": 9,
        "value": "Arthur Conan Doyle, The Adventure of the Red Circle"
    },
    {
        "word_count": 8,
        "value": "We end up with the technical practices below:"
    },
    {
        "word_count": 8,
        "value": "Use rules as a shortcut to internalize principles"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Pedro Writing the assertion first and working backward"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Web \u201cNaming Test Classes and Methods,\u201d Sandro Mancuso\u2074\u00b9"
    },
    {
        "word_count": 8,
        "value": "Books Test Driven Development: By Example, Kent Beck\u2074\u00b2"
    },
    {
        "word_count": 8,
        "value": "Example using Transformation Priority Premise on Fibonacci sequence"
    },
    {
        "word_count": 8,
        "value": "Note: For a sample solution, see the Appendices."
    },
    {
        "word_count": 8,
        "value": "1 \"TRUE\" -> true 2 \"FALSE\" -> false"
    },
    {
        "word_count": 8,
        "value": "Which because of precedence is equivalent to :"
    },
    {
        "word_count": 8,
        "value": "Only one level of indentation per method Why?"
    },
    {
        "word_count": 8,
        "value": "// First class collection 6 class InvoiceDetails 7"
    },
    {
        "word_count": 8,
        "value": "{ 3 string getFirstName() 4 string getLastName() 5"
    },
    {
        "word_count": 8,
        "value": "You should feel ready to walk now. :)"
    },
    {
        "word_count": 8,
        "value": "We will extend this concept in upcoming chapters."
    },
    {
        "word_count": 8,
        "value": "Refactoring guidelines Stay in the green while refactoring"
    },
    {
        "word_count": 8,
        "value": "1 class TennisGame1 : ITennisGame 2 { 3"
    },
    {
        "word_count": 8,
        "value": "1 class TennisGame1 : ITennisGame 2 { 3"
    },
    {
        "word_count": 8,
        "value": "1 class TennisGame : ITennisGame 2 { 3"
    },
    {
        "word_count": 8,
        "value": "1 class TennisGame : ITennisGame 2 { 3"
    },
    {
        "word_count": 8,
        "value": "80 Considerations when making a failing test pass"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Lazy Class / Middle Man / Feature Envy"
    },
    {
        "word_count": 8,
        "value": "92 Considerations when making a failing test pass"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Verify as little as possible in a test"
    },
    {
        "word_count": 8,
        "value": "Only use Test Doubles for your immediate neighbors"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Michael C. Feathers, Working Effectively with Legacy Code"
    },
    {
        "word_count": 8,
        "value": "110 Use inheritance to decouple production code Example:"
    },
    {
        "word_count": 8,
        "value": "} 8 9 protected virtual int Roll() 10"
    },
    {
        "word_count": 8,
        "value": "} 9 10 protected override int Roll() 11"
    },
    {
        "word_count": 8,
        "value": "Kata Gilded Rose refactoring kata by Emily Bache"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Add dynamic additional responsibilities to Decorator an object."
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Too high / Too low Cohesion / Coupling"
    },
    {
        "word_count": 8,
        "value": "Connecting object calisthenics with code smells and Cohesion/Coupling"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Douglas Adams, The Hitchhiker\u2019s Guide to the Galaxy"
    },
    {
        "word_count": 8,
        "value": "Depending on interfaces inverts the direction of dependencies"
    },
    {
        "word_count": 8,
        "value": "if((year % 4 == 0) && !year.IsMultipleOf(100)) 4"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Connascence of Name and Type (CoN and CoT)"
    },
    {
        "word_count": 8,
        "value": "if(_hour < 0 || _hour > 23) 19"
    },
    {
        "word_count": 8,
        "value": "if(_minute < 0 || _minute > 59) 21"
    },
    {
        "word_count": 8,
        "value": "if(_second < 0 || _second > 59) 23"
    },
    {
        "word_count": 8,
        "value": "AddCar(); 6 case CAR: 7 case TRAIN: 8"
    },
    {
        "word_count": 8,
        "value": "return sum % 10 == 0; 10 }"
    },
    {
        "word_count": 8,
        "value": "1 public class CarBuilder : IBuildCars { 2"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "What does each element mean? Passes its tests"
    },
    {
        "word_count": 8,
        "value": "When should I move to the next chapter?"
    },
    {
        "word_count": 8,
        "value": "Coupling, Cohesion and Connascence as gauges for Entropy"
    },
    {
        "word_count": 8,
        "value": "var oven = new MicrowaveOven(); 4 5 }"
    },
    {
        "word_count": 8,
        "value": "Outside-In naturally follows the same direction of dependencies."
    },
    {
        "word_count": 8,
        "value": "Should I use classic TDD or Outside-In TDD?"
    },
    {
        "word_count": 8,
        "value": "Mistakes versus defects: feedback is the cure (again)"
    },
    {
        "word_count": 8,
        "value": "237 Acceptance criteria: it\u2019s all about the examples"
    },
    {
        "word_count": 8,
        "value": "Copyright \u00a9 2018, CyberDojo Foundation All rights reserved."
    },
    {
        "word_count": 8,
        "value": "(let [divisible-by? #(= 0 (rem %2 %1)) 5"
    },
    {
        "word_count": 8,
        "value": "[clojure-katas.fizzbuzz :refer :all])) 4 5 (deftest should-fizzbuzz-number 6"
    },
    {
        "word_count": 8,
        "value": "{ 7 {1, \"I\"}, 8 {4, \"IV\"}, 9"
    },
    {
        "word_count": 8,
        "value": "func play(player: Player, position: Position) throws { 35"
    },
    {
        "word_count": 7,
        "value": "How rules can lead to intellectual laziness"
    },
    {
        "word_count": 7,
        "value": "Three methods of moving forward in TDD"
    },
    {
        "word_count": 7,
        "value": "Example 1 class CarShould 2 { 3"
    },
    {
        "word_count": 7,
        "value": "Use obvious implementation as an implementation strategy."
    },
    {
        "word_count": 7,
        "value": "Use obvious implementation as an implementation strategy."
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "Example using fizzbuzz: In order of writing:"
    },
    {
        "word_count": 7,
        "value": "var fizzBuzzer = new FizzBuzzer() + 2"
    },
    {
        "word_count": 7,
        "value": "var fizzBuzzer = new FizzBuzzer() 3 4"
    },
    {
        "word_count": 7,
        "value": "var fizzBuzzer = new FizzBuzzer() 2 3"
    },
    {
        "word_count": 7,
        "value": "Tests are written at the right time."
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "Transformation 9 \u2013 Statement -> tail recursion"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "46 Transformation 10 \u2013 If -> loop"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "\u2014 Boolean calculator by Alessandro Di Gioia"
    },
    {
        "word_count": 7,
        "value": "These are the specifications: Supports single values:"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "CLASSIC TDD III \u2013 TRANSFORMATION PRIORITY PREMISE"
    },
    {
        "word_count": 7,
        "value": "TrytoimplementthegameofTicTacToeasbestasyoucanbyfollowingtheTDDpractices we have been using so far."
    },
    {
        "word_count": 7,
        "value": "} 4 5 public class Invoice 6"
    },
    {
        "word_count": 7,
        "value": "} 6 7 public void A_Test_That_Verifies_We_Get_The_Expected_Person() 8"
    },
    {
        "word_count": 7,
        "value": "lastName 5 6 // Override equality 7"
    },
    {
        "word_count": 7,
        "value": "} 11 12 public void A_Test_That_Verifies_We_Get_The_Expected_Person() 13"
    },
    {
        "word_count": 7,
        "value": "var bart = new Person(\"Bart\", \"Simpson\") 15"
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "private int m_score2 = 0; 5 }"
    },
    {
        "word_count": 7,
        "value": "private int player2Score = 0; 5 }"
    },
    {
        "word_count": 7,
        "value": "private int player2Score = 0; 5 }"
    },
    {
        "word_count": 7,
        "value": "Kata Kata Tennis refactoring by Emily Bache"
    },
    {
        "word_count": 7,
        "value": "Parallel change (or expand, migrate and contract)"
    },
    {
        "word_count": 7,
        "value": "Below is a list of design smells:"
    },
    {
        "word_count": 7,
        "value": "1 public class Coordinate 2 { 3"
    },
    {
        "word_count": 7,
        "value": "1 public class Coordinate 2 { 3"
    },
    {
        "word_count": 7,
        "value": "public int X {get; private set} 4"
    },
    {
        "word_count": 7,
        "value": "First class collections One dot per line"
    },
    {
        "word_count": 7,
        "value": "Don\u2019t use Test Doubles for isolated objects"
    },
    {
        "word_count": 7,
        "value": "Don\u2019t use Test Doubles for isolated objects"
    },
    {
        "word_count": 7,
        "value": "1 public class Copier 2 { 3"
    },
    {
        "word_count": 7,
        "value": "The InstrumentProcessor must implement the following interface:"
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "var diceResult = new Random().Next(1, 6); 6"
    },
    {
        "word_count": 7,
        "value": "var game = new TestableGame(6); 8 9"
    },
    {
        "word_count": 7,
        "value": "(notneeded \u2022 Read input from a file."
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "*\u201cDesign Patterns,\u201d Refactoring Guru\u00b9\u00b9\u00b3 *\u201cDesign Patterns,\u201d SourceMaking.com\u00b9\u00b9\u2074"
    },
    {
        "word_count": 7,
        "value": "} 7 8 public View PrintEngineStatusReport(){ 9"
    },
    {
        "word_count": 7,
        "value": "} 7 8 public View EngineStatusReport(){ 9"
    },
    {
        "word_count": 7,
        "value": "\u2026 where the IDsiplayEngineStatusReport is something like\u2026"
    },
    {
        "word_count": 7,
        "value": "1 public class Car : IAmACar{ 2"
    },
    {
        "word_count": 7,
        "value": "Kata Kata Connecting Cohesion/Coupling and SOLID principles"
    },
    {
        "word_count": 7,
        "value": "} 11 12 public string Display(){ 13"
    },
    {
        "word_count": 7,
        "value": "} 11 12 public string Display(){ 13"
    },
    {
        "word_count": 7,
        "value": "} 23 24 public string Display(){ 25"
    },
    {
        "word_count": 7,
        "value": "} 12 13 public string Display(){ 14"
    },
    {
        "word_count": 7,
        "value": "} 16 17 private void Validate(){ 18"
    },
    {
        "word_count": 7,
        "value": "Triangle defined by a, b and x"
    },
    {
        "word_count": 7,
        "value": "SideC = CalculateSide(sideA, sideB, x); 5 }"
    },
    {
        "word_count": 7,
        "value": "var difference = sum % 10; 4"
    },
    {
        "word_count": 7,
        "value": "receiptSender.Archive(receiptId); 8 9 receiptId = NextUnsentReceiptID(); 10"
    },
    {
        "word_count": 7,
        "value": "} 16 17 public Car Build(){ 18"
    },
    {
        "word_count": 7,
        "value": "} 23 24 public Car Build(){ 25"
    },
    {
        "word_count": 7,
        "value": "1 [TestFixture] 2 public class ServiceBusMessageHandler_Should{ 3"
    },
    {
        "word_count": 7,
        "value": "var messageHandler = new MessageHandler(); 4 5"
    },
    {
        "word_count": 7,
        "value": "1 [TestFixture] 2 public class ServiceBusMessageHandler_Should{ 3"
    },
    {
        "word_count": 7,
        "value": "} 19 20 public ActionResult Home(){ 21"
    },
    {
        "word_count": 7,
        "value": "1 public class OrderFlow 2 { 3"
    },
    {
        "word_count": 7,
        "value": "1 public class OrderFlow 2 { 3"
    },
    {
        "word_count": 7,
        "value": "There are some problems with classic TDD:"
    },
    {
        "word_count": 7,
        "value": "Considerations when making a failing test pass"
    },
    {
        "word_count": 7,
        "value": "Then [outcome or assertion] And [another outcome]\u2026"
    },
    {
        "word_count": 7,
        "value": "1 public partial class RefundSpecifications { 2"
    },
    {
        "word_count": 7,
        "value": "1 public partial class RefundSpecifications { 2"
    },
    {
        "word_count": 7,
        "value": "Here are the different flavors of EventStorming:"
    },
    {
        "word_count": 7,
        "value": "if(index == 0) { return 0;} 7"
    },
    {
        "word_count": 7,
        "value": "if(index == 1) { return 1;} 8"
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 6"
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 7"
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 8"
    },
    {
        "word_count": 7,
        "value": "1 public class RomanConverter 2 { 3"
    },
    {
        "word_count": 7,
        "value": "W e add a new failing test."
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 9"
    },
    {
        "word_count": 7,
        "value": "return Results[1] + Convert(number - 1); 19"
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 13"
    },
    {
        "word_count": 7,
        "value": "1 public class RomanConverter 2 { 3"
    },
    {
        "word_count": 7,
        "value": "return Results[1] + Convert(number - 1); 22"
    },
    {
        "word_count": 7,
        "value": "return result + Convert(number - 5); 23"
    },
    {
        "word_count": 7,
        "value": "return Results[1] + Convert(number - 1); 26"
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 17"
    },
    {
        "word_count": 7,
        "value": "return result + Convert(number - 40); 26"
    },
    {
        "word_count": 7,
        "value": "return result + Convert(number - 10); 32"
    },
    {
        "word_count": 7,
        "value": "return result + Convert(number - 5); 38"
    },
    {
        "word_count": 7,
        "value": "return Results[1] + Convert(number - 1); 41"
    },
    {
        "word_count": 7,
        "value": "public void ConvertNumberToRoman(int number, string expected) 27"
    },
    {
        "word_count": 7,
        "value": "public static readonly IDictionary<int, string> arabicsToRomans ="
    },
    {
        "word_count": 7,
        "value": "{ 59 60 61 62 63 64"
    },
    {
        "word_count": 7,
        "value": "var playedPositions: [Position] = [] 20 21"
    },
    {
        "word_count": 7,
        "value": "let board: Board = Board() 33 34"
    },
    {
        "word_count": 7,
        "value": "} 53 54 func test_thatGameDoesNotAllowPlayerXToPlayTwice() { 55"
    },
    {
        "word_count": 7,
        "value": "} 61 62 func test_thatGameDoesNotAllowPlayersToPlayInPreviousPlayedPosition() { 63"
    },
    {
        "word_count": 7,
        "value": "} 69 70 func test_thatGameDoesNotAllowPlayersToPlayInAnyPreviousPlayedPosition() { 71"
    },
    {
        "word_count": 7,
        "value": "Sample solutions: Connecting code smells with Cohesion/Coupling"
    },
    {
        "word_count": 6,
        "value": "PAIR PROGRAMMING 16 Driver/Navigator switch techniques"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "1 class MyClassShould 2 { 3"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "Katas Katas Fizz Buzz by cyber-dojo\u00b3\u2070"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "Considerations when writing a new test"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "CLASSIC TDD I \u2013 TEST-DRIVEN DEVELOPMENT"
    },
    {
        "word_count": 6,
        "value": "Test-Driven Development: By Example, Kent Beck\u00b3\u2078"
    },
    {
        "word_count": 6,
        "value": "var fizzBuzzed = fizzBuzzer.FizzBuzz(1) + 3"
    },
    {
        "word_count": 6,
        "value": "var fizzBuzzed = fizzBuzzer.FizzBuzz(1) 6 7"
    },
    {
        "word_count": 6,
        "value": "var fizzBuzzed = fizzBuzzer.FizzBuzz(1) 4 5"
    },
    {
        "word_count": 6,
        "value": "Transformation 1 \u2013 {} -> nil"
    },
    {
        "word_count": 6,
        "value": "Transformation 5 \u2013 Statement -> statements"
    },
    {
        "word_count": 6,
        "value": "Transformation 6 \u2013 Unconditional -> conditional"
    },
    {
        "word_count": 6,
        "value": "8 21 Statement -> tail recursion"
    },
    {
        "word_count": 6,
        "value": "Don\u2019t use the ELSE keyword Why?"
    },
    {
        "word_count": 6,
        "value": "{ 7 private List<InvoiceLine> lines; 8"
    },
    {
        "word_count": 6,
        "value": "{ 8 private List<InvoiceLine> lines; 9"
    },
    {
        "word_count": 6,
        "value": "} 10 11 class Invoice 12"
    },
    {
        "word_count": 6,
        "value": "// implement equality for person 9"
    },
    {
        "word_count": 6,
        "value": "} 4 5 class Money 6"
    },
    {
        "word_count": 6,
        "value": "} 8 9 class Invoice 10"
    },
    {
        "word_count": 6,
        "value": "Considerations when writing a new test"
    },
    {
        "word_count": 6,
        "value": "Extended TDD cycle: the Refactor cycle"
    },
    {
        "word_count": 6,
        "value": "private int m_score1 = 0; 4"
    },
    {
        "word_count": 6,
        "value": "private int player1Score = 0; 4"
    },
    {
        "word_count": 6,
        "value": "private int player1Score = 0; 4"
    },
    {
        "word_count": 6,
        "value": "public TennisGame1(string player1Name, string player2Name) 9"
    },
    {
        "word_count": 6,
        "value": "private int player1Score = 0; 4"
    },
    {
        "word_count": 6,
        "value": "1 if (isDivisibleByThreeAndFive(number)) 2 { 3"
    },
    {
        "word_count": 6,
        "value": "\u2077\u2076You Aren\u2019t Going to Need It"
    },
    {
        "word_count": 6,
        "value": "public int X {get; set} 4"
    },
    {
        "word_count": 6,
        "value": "{ 8 coordinate.Y += 1; 9"
    },
    {
        "word_count": 6,
        "value": "89 Object calisthenics preventing code smells"
    },
    {
        "word_count": 6,
        "value": "91 Kata Smelly Tic Tac Toe"
    },
    {
        "word_count": 6,
        "value": "Don\u2019t add behavior in Test Doubles"
    },
    {
        "word_count": 6,
        "value": "Katas Character Copier by Urs Enzler\u2079\u2070"
    },
    {
        "word_count": 6,
        "value": "Instrument Instrument Processor by Urs Enzler\u2079\u00b9"
    },
    {
        "word_count": 6,
        "value": "{ 7 roll = desiredRoll; 8"
    },
    {
        "word_count": 6,
        "value": "[Test] 5 public void Do_Something_When_A_Six_Is_Rolled() 6"
    },
    {
        "word_count": 6,
        "value": "Considerations when writing a new test"
    },
    {
        "word_count": 6,
        "value": "Quick reference catalogue Creational design patterns"
    },
    {
        "word_count": 6,
        "value": "Considerations when writing a new test"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "Relative ranking of Interaction Coupling types"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "Method Coupling Premises with relative impact"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "Relative ranking of Class Cohesion types"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "Katas Connecting code smells with Cohesion/Coupling"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "Note: For answers, see the Appendices."
    },
    {
        "word_count": 6,
        "value": "Some ideas for the Reason column"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "Note: For answers, see the Appendices."
    },
    {
        "word_count": 6,
        "value": "Cohesion / Coupling Cohesion / Coupling"
    },
    {
        "word_count": 6,
        "value": "Cohesion / Coupling Cohesion / Coupling"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "DESIGN V \u2013 COHESION AND COUPLING"
    },
    {
        "word_count": 6,
        "value": "\u00b9\u00b3\u00b9You Aren\u2019t Going to Need It"
    },
    {
        "word_count": 6,
        "value": "var webView = new CarEngineWebView(); 4"
    },
    {
        "word_count": 6,
        "value": "var printView = new CarEnginePrintView(); 10"
    },
    {
        "word_count": 6,
        "value": "var webView = new EnhancedAccessCarEngineWebView(); 3"
    },
    {
        "word_count": 6,
        "value": "Barbara Liskov, \u201cData Abstraction and Hierarchy\u201d"
    },
    {
        "word_count": 6,
        "value": "switch(oven) 26 case Microwave m: 27"
    },
    {
        "word_count": 6,
        "value": "m.CookMicorwaving(); 28 case GrilOven g: 29"
    },
    {
        "word_count": 6,
        "value": "g.CookGrilling(); 30 case FanOven f: 31"
    },
    {
        "word_count": 6,
        "value": "\u2026and \u2026and this looks perfectly fine."
    },
    {
        "word_count": 6,
        "value": "1 public class SomethingFactory { 2"
    },
    {
        "word_count": 6,
        "value": "{ 5 //write on Database 6"
    },
    {
        "word_count": 6,
        "value": "\u2022 Change \u2022 Inheritance tree level"
    },
    {
        "word_count": 6,
        "value": "1 public class NotificationSystem { 2"
    },
    {
        "word_count": 6,
        "value": "Email email = new Email(); 4"
    },
    {
        "word_count": 6,
        "value": "1 public class NotificationSystem { 2"
    },
    {
        "word_count": 6,
        "value": "Email email = new Email(); 4"
    },
    {
        "word_count": 6,
        "value": "1 public class NotificationSystem { 2"
    },
    {
        "word_count": 6,
        "value": "public void SendEmail(Notification notification) { 3"
    },
    {
        "word_count": 6,
        "value": "Email email = new Email(); 4"
    },
    {
        "word_count": 6,
        "value": "1 public class Notification { 2"
    },
    {
        "word_count": 6,
        "value": "public string Recipient => _recipient; 3"
    },
    {
        "word_count": 6,
        "value": "public string Sender => _sender; 4"
    },
    {
        "word_count": 6,
        "value": "1 public class OrderProcessor { 2"
    },
    {
        "word_count": 6,
        "value": "public void ProcessOrder(Tuple<Order, bool> orderInfo) 3"
    },
    {
        "word_count": 6,
        "value": "Sides relation for being a Triangle"
    },
    {
        "word_count": 6,
        "value": "So an alternative class could be:"
    },
    {
        "word_count": 6,
        "value": "Connascence of Meaning (or Convention) (CoM)"
    },
    {
        "word_count": 6,
        "value": "And in our controller, something like:"
    },
    {
        "word_count": 6,
        "value": "Let\u2019s see this snippet implementing it:"
    },
    {
        "word_count": 6,
        "value": "1 public string AddChecksum(string inputData){ 2"
    },
    {
        "word_count": 6,
        "value": "1 public string AddChecksum(string inputData){ 2"
    },
    {
        "word_count": 6,
        "value": "return sum % 10; 12 }"
    },
    {
        "word_count": 6,
        "value": "var receiptSender = new ReceiptSender(); 3"
    },
    {
        "word_count": 6,
        "value": "return new Car(_brand, _engine, _color) 19"
    },
    {
        "word_count": 6,
        "value": "return new Car(_brand, _engine, _color) 26"
    },
    {
        "word_count": 6,
        "value": "[Test] 6 public void ReceiveMessages(){ 7"
    },
    {
        "word_count": 6,
        "value": "var expectedMessage = new TestMessage(); 8"
    },
    {
        "word_count": 6,
        "value": "var awaiter = new AutoResetEvent(false); 4"
    },
    {
        "word_count": 6,
        "value": "[Test] 8 public void ReceiveMessages(){ 9"
    },
    {
        "word_count": 6,
        "value": "var expectedMessage = new TestMessage(); 10"
    },
    {
        "word_count": 6,
        "value": "Kata Elevator Kata by Marco Consolaro"
    },
    {
        "word_count": 6,
        "value": "Good design as a low-entropy system"
    },
    {
        "word_count": 6,
        "value": "\u00b9\u2079\u2070You Aren\u2019t Going to Need It"
    },
    {
        "word_count": 6,
        "value": "1 class CarShould 2 { 3"
    },
    {
        "word_count": 6,
        "value": "var car = new Car(); 7"
    },
    {
        "word_count": 6,
        "value": "var beforeBreakingVelocity = car.Speed(); 9 10"
    },
    {
        "word_count": 6,
        "value": "Tabular style Excel-like notation, example: FitNesse\u00b9\u2079\u2075"
    },
    {
        "word_count": 6,
        "value": "1 public void Main(){ 2 3"
    },
    {
        "word_count": 6,
        "value": "1 public void Main(){ 2 3"
    },
    {
        "word_count": 6,
        "value": "1 public void Main(){ 2 3"
    },
    {
        "word_count": 6,
        "value": "var oven = new MicrowaveOven(); 4"
    },
    {
        "word_count": 6,
        "value": "1 public void Main(){ 2 3"
    },
    {
        "word_count": 6,
        "value": "var oven = new MicrowaveOven(); 4"
    },
    {
        "word_count": 6,
        "value": "1 public class MicrowaveOven(){ 2 3"
    },
    {
        "word_count": 6,
        "value": "1 public class MicrowaveOven(){ 2 3"
    },
    {
        "word_count": 6,
        "value": "{ 5 throw new System.NotImplementedException(); 6"
    },
    {
        "word_count": 6,
        "value": "1 class ShoppingCartControllerShould 2 { 3"
    },
    {
        "word_count": 6,
        "value": "var AQuantity = 1; 9 10"
    },
    {
        "word_count": 6,
        "value": "var shoppingCart = new Mock<ShoppingCart>(); 11"
    },
    {
        "word_count": 6,
        "value": "1 class ShoppingCartShould 2 { 3"
    },
    {
        "word_count": 6,
        "value": "var discountCalculator = new Mock<DiscountCalculator>(); 10"
    },
    {
        "word_count": 6,
        "value": "var repository = new Mock<ShoppingCartRepository>(); 11"
    },
    {
        "word_count": 6,
        "value": "1 class ShoppingCartShould 2 { 3"
    },
    {
        "word_count": 6,
        "value": "var discountCalculator = new Mock<DiscountCalculator>(); 10"
    },
    {
        "word_count": 6,
        "value": "var repository = new Mock<ShoppingCartRepository>(); 11"
    },
    {
        "word_count": 6,
        "value": "Sorted by first operation date ascending."
    },
    {
        "word_count": 6,
        "value": "PART II Interact with the environment"
    },
    {
        "word_count": 6,
        "value": "OUTSIDE-IN DEVELOPMENT 228 The big picture"
    },
    {
        "word_count": 6,
        "value": "Title (one line describing the story)"
    },
    {
        "word_count": 6,
        "value": "When [event or Behavior under test]"
    },
    {
        "word_count": 6,
        "value": "[Test] 6 public void Refunded_items_should_be_returned_to_stock() 7"
    },
    {
        "word_count": 6,
        "value": "[Test] 5 public void Refunded_items_should_be_returned_to_stock() 6"
    },
    {
        "word_count": 6,
        "value": "[Test] 3 public void Refunded_items_should_be_returned_to_stock() 4"
    },
    {
        "word_count": 6,
        "value": "Kata The messy Delivery Office requirements"
    },
    {
        "word_count": 6,
        "value": "257 Value stream and domain events"
    },
    {
        "word_count": 6,
        "value": "The backlog: crunching knowledge for breakfast"
    },
    {
        "word_count": 6,
        "value": "Outside-In ATDD with optional unit tests"
    },
    {
        "word_count": 6,
        "value": "It\u2019s the fifth principle, after all:"
    },
    {
        "word_count": 6,
        "value": "Antoine de Saint-Exupery, The Little Prince"
    },
    {
        "word_count": 6,
        "value": "Inertia is your enemy.\u201d Claudio Perrone"
    },
    {
        "word_count": 6,
        "value": "The room setup before the workshop"
    },
    {
        "word_count": 6,
        "value": "Building the narrative of the business"
    },
    {
        "word_count": 6,
        "value": "License: CyberDojo About CyberDojo Foundation exercises"
    },
    {
        "word_count": 6,
        "value": "var result = \"I\"; 7 8"
    },
    {
        "word_count": 6,
        "value": "} 12 13 return result; 14"
    },
    {
        "word_count": 6,
        "value": "} 15 16 return result; 17"
    },
    {
        "word_count": 6,
        "value": "const string result = \"V\"; 22"
    },
    {
        "word_count": 6,
        "value": "const string result = \"XL\"; 25"
    },
    {
        "word_count": 6,
        "value": "const string result = \"X\"; 31"
    },
    {
        "word_count": 6,
        "value": "const string result = \"V\"; 37"
    },
    {
        "word_count": 6,
        "value": "string result = string.Empty; 23 24"
    },
    {
        "word_count": 6,
        "value": "} 53 54 return result; 55"
    },
    {
        "word_count": 6,
        "value": "string result = string.Empty; 19 20"
    },
    {
        "word_count": 6,
        "value": "var result = string.Empty; 56 57"
    },
    {
        "word_count": 6,
        "value": "var lastPlayer: Player = .o 32"
    },
    {
        "word_count": 6,
        "value": "Lazy class / Middle Man Cohesion"
    },
    {
        "word_count": 5,
        "value": "Is this book for me?"
    },
    {
        "word_count": 5,
        "value": "Why we wrote this book"
    },
    {
        "word_count": 5,
        "value": "What are Agile Technical Practices?"
    },
    {
        "word_count": 5,
        "value": "Programmer welfare - Sustainable pace"
    },
    {
        "word_count": 5,
        "value": "How this book is organized"
    },
    {
        "word_count": 5,
        "value": "Ask for help or feedback"
    },
    {
        "word_count": 5,
        "value": "The three laws of TDD"
    },
    {
        "word_count": 5,
        "value": "[Test] 4 void DoSomething() 5"
    },
    {
        "word_count": 5,
        "value": "[Test] 4 void decrease_speed_when_brakes_are_applied() 5"
    },
    {
        "word_count": 5,
        "value": "[Test] 8 void increase_speed_when_accelerator_is_applied() 9"
    },
    {
        "word_count": 5,
        "value": "29 Nth Fibonacci by cyber-dojo"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "var fizzBuzzer = new FizzBuzzer()"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "6 8 Scalar -> array"
    },
    {
        "word_count": 5,
        "value": "Katas Roman Numerals by cyber-dojo"
    },
    {
        "word_count": 5,
        "value": "48 Prime factors by cyber-dojo"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "Wrap all primitives and strings"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "1 public class InvoiceLine 2"
    },
    {
        "word_count": 5,
        "value": "{ 13 InvoiceDetails details; 14"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "1 public class Person 2"
    },
    {
        "word_count": 5,
        "value": "1 public class Person 2"
    },
    {
        "word_count": 5,
        "value": "boolean equals(Object o) { 8"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "Wrap all primitives and strings"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "DESIGN I \u2013 OBJECT CALISTHENICS"
    },
    {
        "word_count": 5,
        "value": "74 Refactor readability before design"
    },
    {
        "word_count": 5,
        "value": "{ 6 case 0: 7"
    },
    {
        "word_count": 5,
        "value": "break; 9 case 1: 10"
    },
    {
        "word_count": 5,
        "value": "break; 12 case 2: 13"
    },
    {
        "word_count": 5,
        "value": "default: 19 return \"Deuce\"; 20"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "DESIGN III \u2013 CODE SMELLS"
    },
    {
        "word_count": 5,
        "value": "Bertrand Meyer, Object-Oriented Software Construction"
    },
    {
        "word_count": 5,
        "value": "Different types of Test Doubles"
    },
    {
        "word_count": 5,
        "value": "Venn diagram of Test Doubles"
    },
    {
        "word_count": 5,
        "value": "TEST DOUBLES 102 For example:"
    },
    {
        "word_count": 5,
        "value": "Console.WriteLine($\"args before returns {userName}\"); 18"
    },
    {
        "word_count": 5,
        "value": "user = new User(\"Default\"); 26"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "Breaking dependencies using a seam"
    },
    {
        "word_count": 5,
        "value": "var diceResult = roll(); 6"
    },
    {
        "word_count": 5,
        "value": "return new Random().Next(1, 6); 12"
    },
    {
        "word_count": 5,
        "value": "{ 12 return roll; 13"
    },
    {
        "word_count": 5,
        "value": "Approval Tests by Llewellyn Falco"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "DESIGN IV \u2013 DESIGN PATTERNS"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "Bertrand Meyer, Object-Oriented Software Construction"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "webView.FillWith(carEngineViewModel); 5 return webView; 6"
    },
    {
        "word_count": 5,
        "value": "printView.FillWith(carEngineViewModel); 11 return printView; 12"
    },
    {
        "word_count": 5,
        "value": "1 public View AlternativeDisplayEngineStatusReport(){ 2"
    },
    {
        "word_count": 5,
        "value": "webView.FillWith(carEngineViewModel); 4 return printView; 5"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "f.CookHeating(); 32 default o: 33"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "Let\u2019s see a simple example:"
    },
    {
        "word_count": 5,
        "value": "_oven = new MicrowaveOven(); 6"
    },
    {
        "word_count": 5,
        "value": "_heater = new MicrowaveGenerator(); 15"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "DESIGN VI \u2013 SOLID PRINCIPLES++"
    },
    {
        "word_count": 5,
        "value": "The three dimensions of Connascence"
    },
    {
        "word_count": 5,
        "value": "1 private SetTransport(string transport){ 2"
    },
    {
        "word_count": 5,
        "value": "switch(transport){ 3 case \"1\": 4"
    },
    {
        "word_count": 5,
        "value": "AddBike(); 5 case \"2\": 6"
    },
    {
        "word_count": 5,
        "value": "AddCar(); 7 case \"3\": 8"
    },
    {
        "word_count": 5,
        "value": "AddTrain(); 9 case \"4\": 10"
    },
    {
        "word_count": 5,
        "value": "1 private SetTransport(string transport){ 2"
    },
    {
        "word_count": 5,
        "value": "switch(transport){ 3 case BIKE: 4"
    },
    {
        "word_count": 5,
        "value": "AddTrain(); 9 case BUS: 10"
    },
    {
        "word_count": 5,
        "value": "175 Connascence of Algorithm (CoA)"
    },
    {
        "word_count": 5,
        "value": "var sum = SumCharsOf(inputData); 3"
    },
    {
        "word_count": 5,
        "value": "var sum = SumCharsOf(inputData); 9"
    },
    {
        "word_count": 5,
        "value": "var sum = SumCharsOf(inputData); 11"
    },
    {
        "word_count": 5,
        "value": "Connascence of Execution Order (CoEO)"
    },
    {
        "word_count": 5,
        "value": "1 public void SendReceipts(){ 2"
    },
    {
        "word_count": 5,
        "value": "\u2026where \u2026where the interface is:"
    },
    {
        "word_count": 5,
        "value": "1 public class GlobalCounter{ 2"
    },
    {
        "word_count": 5,
        "value": "Connascence of Manual Task (CoMT)"
    },
    {
        "word_count": 5,
        "value": "Alternative definitions of simple design"
    },
    {
        "word_count": 5,
        "value": "Cohesion and Coupling as forces"
    },
    {
        "word_count": 5,
        "value": "Newton\u2019s law of universal gravitation"
    },
    {
        "word_count": 5,
        "value": "var orderId = GenerateOrderId(); 6"
    },
    {
        "word_count": 5,
        "value": "orderProcessor.ProcessOrder(orderId, customerId, categoryId, itemIds); 7"
    },
    {
        "word_count": 5,
        "value": "invoiceProcessor.ProcessInvoice(orderId, customerId, categoryId, itemIds); 8"
    },
    {
        "word_count": 5,
        "value": "public void Execute(Order order) 4"
    },
    {
        "word_count": 5,
        "value": "The relevance of Systems Entropy"
    },
    {
        "word_count": 5,
        "value": "International Software Testing Qualifications Board\u00b9\u2079\u00b2"
    },
    {
        "word_count": 5,
        "value": "International Software Testing Qualifications Board\u00b9\u2079\u00b3"
    },
    {
        "word_count": 5,
        "value": "[Test] 4 void decrease_speed_when_brakes_are_applied() 5"
    },
    {
        "word_count": 5,
        "value": "[Test] 4 void add_product_to_shopping_cart() 5"
    },
    {
        "word_count": 5,
        "value": "var ABookId = 12345; 7"
    },
    {
        "word_count": 5,
        "value": "var ACustomerId = 54321; 8"
    },
    {
        "word_count": 5,
        "value": "[Test] 4 void add_product_to_shopping_cart_with_discount_for_gold_customers() 5"
    },
    {
        "word_count": 5,
        "value": "var ABookId = 12345; 7"
    },
    {
        "word_count": 5,
        "value": "var ACustomerId = 54321; 8"
    },
    {
        "word_count": 5,
        "value": "var AQuantity = 1; 9"
    },
    {
        "word_count": 5,
        "value": "[Test] 4 void save_shopping_cart() 5"
    },
    {
        "word_count": 5,
        "value": "var ABookId = 12345; 7"
    },
    {
        "word_count": 5,
        "value": "var ACustomerId = 54321; 8"
    },
    {
        "word_count": 5,
        "value": "var AQuantity = 1; 9"
    },
    {
        "word_count": 5,
        "value": "PART I Starting the game"
    },
    {
        "word_count": 5,
        "value": "Quit Quit terminates the game"
    },
    {
        "word_count": 5,
        "value": "Considerations after the test passes"
    },
    {
        "word_count": 5,
        "value": "The structure of a story"
    },
    {
        "word_count": 5,
        "value": "Acceptance Criteria: (presented as Scenarios)"
    },
    {
        "word_count": 5,
        "value": "From criteria to Acceptance Tests"
    },
    {
        "word_count": 5,
        "value": "//this is a scenario 5"
    },
    {
        "word_count": 5,
        "value": "John Gall, The Systems Bible\u00b2\u2074\u2074"
    },
    {
        "word_count": 5,
        "value": "Example of User Story Map"
    },
    {
        "word_count": 5,
        "value": "System Thinking and Sociotechnical organizations"
    },
    {
        "word_count": 5,
        "value": "THE STORY OF TEAM C"
    },
    {
        "word_count": 5,
        "value": "THE STORY OF TEAM C"
    },
    {
        "word_count": 5,
        "value": "THE STORY OF TEAM C"
    },
    {
        "word_count": 5,
        "value": "THE STORY OF TEAM C"
    },
    {
        "word_count": 5,
        "value": "THE STORY OF TEAM C"
    },
    {
        "word_count": 5,
        "value": "THE STORY OF TEAM C"
    },
    {
        "word_count": 5,
        "value": "The moral of the story"
    },
    {
        "word_count": 5,
        "value": "Hecouldn\u2019tbelievehisearsandjoked,\u201cAreyousureyou\u2019readeveloper?TheCTOmusthavemissed something!DoyouknowthatIneveryethavefoundadeveloperclaiminghelovesfootballandeven knows about it?\u201d"
    },
    {
        "word_count": 5,
        "value": "Bounded rationality and knowledge sharing"
    },
    {
        "word_count": 5,
        "value": "Who can benefit from PopcornFlow"
    },
    {
        "word_count": 5,
        "value": "The workshop: a quick overview"
    },
    {
        "word_count": 5,
        "value": "The result enabling shared understanding"
    },
    {
        "word_count": 5,
        "value": "Complex Systems and proven solutions"
    },
    {
        "word_count": 5,
        "value": "Web \u2022 Alberto Brandolini\u2019s blog\u00b3\u00b9\u2074"
    },
    {
        "word_count": 5,
        "value": "Web resources \u2022 CyberDojo exercises\u00b3\u00b9\u2076"
    },
    {
        "word_count": 5,
        "value": "divisible-by-three? (divisible-by? 3 n) 6"
    },
    {
        "word_count": 5,
        "value": "divisible-by-five? (divisible-by? 5 n) 7"
    },
    {
        "word_count": 5,
        "value": "divisible-by-three-and-five? (divisible-by? 15 n)] 8"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 5"
    },
    {
        "word_count": 5,
        "value": "{ 6 return null; 7"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 5"
    },
    {
        "word_count": 5,
        "value": "{ 6 return \"I\"; 7"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 5"
    },
    {
        "word_count": 5,
        "value": "if (number >= 1) 9"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 4"
    },
    {
        "word_count": 5,
        "value": "var result = \"I\"; 6"
    },
    {
        "word_count": 5,
        "value": "if (number > 1) 7"
    },
    {
        "word_count": 5,
        "value": "if (number > 2) 12"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 7"
    },
    {
        "word_count": 5,
        "value": "return Results[number - 1]; 9"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 7"
    },
    {
        "word_count": 5,
        "value": "return Results[number - 1]; 9"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 14"
    },
    {
        "word_count": 5,
        "value": "{ 15 return Results[number]; 16"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 12"
    },
    {
        "word_count": 5,
        "value": "{ 13 if (Results.ContainsKey(number)) 14"
    },
    {
        "word_count": 5,
        "value": "{ 15 return Results[number]; 16"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 15"
    },
    {
        "word_count": 5,
        "value": "{ 16 if (Results.ContainsKey(number)) 17"
    },
    {
        "word_count": 5,
        "value": "{ 18 return Results[number]; 19"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 13"
    },
    {
        "word_count": 5,
        "value": "{ 14 if (Results.ContainsKey(number)) 15"
    },
    {
        "word_count": 5,
        "value": "{ 16 return Results[number]; 17"
    },
    {
        "word_count": 5,
        "value": "if (number > 5) 20"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 16"
    },
    {
        "word_count": 5,
        "value": "{ 17 if (Results.ContainsKey(number)) 18"
    },
    {
        "word_count": 5,
        "value": "if (number > 40) 23"
    },
    {
        "word_count": 5,
        "value": "if (number > 10) 29"
    },
    {
        "word_count": 5,
        "value": "if (number > 5) 35"
    },
    {
        "word_count": 5,
        "value": "{ 17 if (Results.ContainsKey(number)) 18"
    },
    {
        "word_count": 5,
        "value": "{ 19 return Results[number]; 20"
    },
    {
        "word_count": 5,
        "value": "while (number >= 40) 25"
    },
    {
        "word_count": 5,
        "value": "while (number >= 10) 31"
    },
    {
        "word_count": 5,
        "value": "while (number >= 5) 37"
    },
    {
        "word_count": 5,
        "value": "while (number >= 4) 43"
    },
    {
        "word_count": 5,
        "value": "while (number >= 1) 49"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 17"
    },
    {
        "word_count": 5,
        "value": "foreach(var mapping in mappings) 21"
    },
    {
        "word_count": 5,
        "value": "while (number >= mapping.Key) 23"
    },
    {
        "word_count": 5,
        "value": "public string Convert(int number) 54"
    },
    {
        "word_count": 5,
        "value": "foreach(var arabicToRoman in arabicsToRomans) 58"
    },
    {
        "word_count": 5,
        "value": "XCTAssertEqual(error as? TicTacToeError, .invalidPlayer) 51"
    },
    {
        "word_count": 5,
        "value": "XCTAssertEqual(error as? TicTacToeError, .invalidPlayer) 59"
    },
    {
        "word_count": 5,
        "value": "XCTAssertEqual(error as? TicTacToeError, .invalidPosition) 67"
    },
    {
        "word_count": 5,
        "value": "XCTAssertEqual(error as? TicTacToeError, .invalidPosition) 76"
    },
    {
        "word_count": 5,
        "value": "Follow Pedro on Twitter: @pedromsantos"
    },
    {
        "word_count": 5,
        "value": "Follow Marco on Twitter: @consolondon"
    },
    {
        "word_count": 5,
        "value": "Follow Alessandro on Twitter: @Parajao"
    },
    {
        "word_count": 4,
        "value": "6 Test-driven development TDD"
    },
    {
        "word_count": 4,
        "value": "What is pair programming?"
    },
    {
        "word_count": 4,
        "value": "From red to green"
    },
    {
        "word_count": 4,
        "value": "Six degrees of freedom"
    },
    {
        "word_count": 4,
        "value": "A test name pattern"
    },
    {
        "word_count": 4,
        "value": "Fizz Buzz kata summary"
    },
    {
        "word_count": 4,
        "value": "4 \u201c4\u201d obvious implementation"
    },
    {
        "word_count": 4,
        "value": "assert fizzBuzzed == \"1\""
    },
    {
        "word_count": 4,
        "value": "assert fizzBuzzed == \"1\"`"
    },
    {
        "word_count": 4,
        "value": "assert fizzBuzzed == \"1\""
    },
    {
        "word_count": 4,
        "value": "assert fizzBuzzed == \"1\""
    },
    {
        "word_count": 4,
        "value": "Stats calculator by cyber-dojo"
    },
    {
        "word_count": 4,
        "value": "Roman numerals by cyber-dojo"
    },
    {
        "word_count": 4,
        "value": "Pedro It\u2019s the design\u2026"
    },
    {
        "word_count": 4,
        "value": "Tic Tac Toe rules"
    },
    {
        "word_count": 4,
        "value": "1 class InvoiceLine 2"
    },
    {
        "word_count": 4,
        "value": "1 class Invoice 2"
    },
    {
        "word_count": 4,
        "value": "1 class Discount 2"
    },
    {
        "word_count": 4,
        "value": "One dot per line"
    },
    {
        "word_count": 4,
        "value": "Keep all entities small"
    },
    {
        "word_count": 4,
        "value": "Katas Tic Tac Toe"
    },
    {
        "word_count": 4,
        "value": "64 Game of Life"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "Change design (simple changes)"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "score = \"Love-All\"; 8"
    },
    {
        "word_count": 4,
        "value": "score = \"Fifteen-All\"; 11"
    },
    {
        "word_count": 4,
        "value": "score = \"Thirty-All\"; 14"
    },
    {
        "word_count": 4,
        "value": "score = \"Deuce\"; 17"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "17 return \"Thirty-All\"; 18"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "DESIGN II - REFACTORING"
    },
    {
        "word_count": 4,
        "value": "A more formal checklist"
    },
    {
        "word_count": 4,
        "value": "Refactor code smells table"
    },
    {
        "word_count": 4,
        "value": "94 The big picture"
    },
    {
        "word_count": 4,
        "value": "Use Mocks for Commands"
    },
    {
        "word_count": 4,
        "value": "userName = \"Default\"; 16"
    },
    {
        "word_count": 4,
        "value": "Too many Test Doubles"
    },
    {
        "word_count": 4,
        "value": "Generate input/output (Golden Master)"
    },
    {
        "word_count": 4,
        "value": "State Chain of Responsibility"
    },
    {
        "word_count": 4,
        "value": "Revisiting the refactoring guidelines"
    },
    {
        "word_count": 4,
        "value": "131 Law of Demeter"
    },
    {
        "word_count": 4,
        "value": "Method Cohesion relative rank"
    },
    {
        "word_count": 4,
        "value": "140 The big picture"
    },
    {
        "word_count": 4,
        "value": "147 Liskov Substitution Principle"
    },
    {
        "word_count": 4,
        "value": "Interface Interface Segregation Principle"
    },
    {
        "word_count": 4,
        "value": "\u2022 Consistency / Usage"
    },
    {
        "word_count": 4,
        "value": "158 The big picture"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "Direction of Connascence refactoring"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "Connascence of Position (CoP)"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "} 36 } 37"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "Connascence of Value (CoV)"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "throw new InvalidHourException(); 20"
    },
    {
        "word_count": 4,
        "value": "throw new InvalidMinuteException(); 22"
    },
    {
        "word_count": 4,
        "value": "throw new InvalidSecondException(); 24"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "Connascence of Timing (CoTm)"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "Connascence of Identity (CoI)"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "185 The big picture"
    },
    {
        "word_count": 4,
        "value": "DESIGN VII - CONNASCENCE"
    },
    {
        "word_count": 4,
        "value": "194 The big picture"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "204 The big picture"
    },
    {
        "word_count": 4,
        "value": "DESIGN IX - CONCLUSION"
    },
    {
        "word_count": 4,
        "value": "Describing the Outside-In mindset:"
    },
    {
        "word_count": 4,
        "value": "} 13 14 }"
    },
    {
        "word_count": 4,
        "value": "Outside-In TDD: London school"
    },
    {
        "word_count": 4,
        "value": "OUTSIDE-IN DEVELOPMENT 220 Example"
    },
    {
        "word_count": 4,
        "value": "The direction of dependencies"
    },
    {
        "word_count": 4,
        "value": "Taking and dropping items"
    },
    {
        "word_count": 4,
        "value": "Ludwig Wittgenstein, Philosophical Investigations"
    },
    {
        "word_count": 4,
        "value": "Acceptance Tests done right"
    },
    {
        "word_count": 4,
        "value": "Readable by business folks"
    },
    {
        "word_count": 4,
        "value": "Estimated dispatch date service"
    },
    {
        "word_count": 4,
        "value": "Domain-Driven Design: What domain?"
    },
    {
        "word_count": 4,
        "value": "Beyond requirements: knowledge crunching"
    },
    {
        "word_count": 4,
        "value": "Let\u2019s see an example:"
    },
    {
        "word_count": 4,
        "value": "DevOps, the First Way"
    },
    {
        "word_count": 4,
        "value": "DevOps, the Second Way"
    },
    {
        "word_count": 4,
        "value": "265 The Third Way"
    },
    {
        "word_count": 4,
        "value": "DevOps, the Third Way"
    },
    {
        "word_count": 4,
        "value": "From forming to performing"
    },
    {
        "word_count": 4,
        "value": "THE 12 AGILE PRINCIPLES"
    },
    {
        "word_count": 4,
        "value": "PopcornFlow by Claudio Perrone"
    },
    {
        "word_count": 4,
        "value": "PopcornFlow by Claudio Perrone"
    },
    {
        "word_count": 4,
        "value": "The 7-steps decision cycle"
    },
    {
        "word_count": 4,
        "value": "PopcornFlow by Claudio Perrone"
    },
    {
        "word_count": 4,
        "value": "PopcornFlow by Claudio Perrone"
    },
    {
        "word_count": 4,
        "value": "EventStorming by Alberto Brandolini"
    },
    {
        "word_count": 4,
        "value": "Silos and value stream"
    },
    {
        "word_count": 4,
        "value": "EventStorming by Alberto Brandolini"
    },
    {
        "word_count": 4,
        "value": "The importance of learning"
    },
    {
        "word_count": 4,
        "value": "EventStorming by Alberto Brandolini"
    },
    {
        "word_count": 4,
        "value": "EventStorming by Alberto Brandolini"
    },
    {
        "word_count": 4,
        "value": "EventStorming by Alberto Brandolini"
    },
    {
        "word_count": 4,
        "value": "Different flavors of EventStorming"
    },
    {
        "word_count": 4,
        "value": "EventStorming by Alberto Brandolini"
    },
    {
        "word_count": 4,
        "value": "result += \"I\"; 11"
    },
    {
        "word_count": 4,
        "value": "result += \"I\"; 9"
    },
    {
        "word_count": 4,
        "value": "result += \"I\"; 14"
    },
    {
        "word_count": 4,
        "value": "19 return Results[number]; 20"
    },
    {
        "word_count": 4,
        "value": "public string Convert(int number)"
    },
    {
        "word_count": 4,
        "value": "result += \"XL\"; 27"
    },
    {
        "word_count": 4,
        "value": "number -= 40; 28"
    },
    {
        "word_count": 4,
        "value": "result += \"X\"; 33"
    },
    {
        "word_count": 4,
        "value": "number -= 10; 34"
    },
    {
        "word_count": 4,
        "value": "result += \"V\"; 39"
    },
    {
        "word_count": 4,
        "value": "number -= 5; 40"
    },
    {
        "word_count": 4,
        "value": "result += \"IV\"; 45"
    },
    {
        "word_count": 4,
        "value": "number -= 4; 46"
    },
    {
        "word_count": 4,
        "value": "result += \"I\"; 51"
    },
    {
        "word_count": 4,
        "value": "number -= 1; 52"
    },
    {
        "word_count": 4,
        "value": "{ 24 25 26"
    },
    {
        "word_count": 4,
        "value": "29 return result; 30"
    },
    {
        "word_count": 4,
        "value": "new Dictionary<int, string> 37"
    },
    {
        "word_count": 4,
        "value": "66 return result; 67"
    },
    {
        "word_count": 4,
        "value": "Cohesion / Coupling Cohesion"
    },
    {
        "word_count": 4,
        "value": "ABOUT THE AUTHORS Pedro"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "7 Beyond design"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "AGILE TECHNICAL PRACTICES"
    },
    {
        "word_count": 3,
        "value": "PAIR PROGRAMMING 15"
    },
    {
        "word_count": 3,
        "value": "PAIR PROGRAMMING 17"
    },
    {
        "word_count": 3,
        "value": "PAIR PROGRAMMING 18"
    },
    {
        "word_count": 3,
        "value": "Anonymous XP practitioner"
    },
    {
        "word_count": 3,
        "value": "Red, Green, Refactor"
    },
    {
        "word_count": 3,
        "value": "Degrees of freedom"
    },
    {
        "word_count": 3,
        "value": "{} 6 }"
    },
    {
        "word_count": 3,
        "value": "{} 6 7"
    },
    {
        "word_count": 3,
        "value": "{} 10 }"
    },
    {
        "word_count": 3,
        "value": "1 return str(number)"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "Test-driven programming workflow"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "35 Final code:"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "Unit test principles"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "Anagrams by cyber-dojo"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "CLASSIC TDD II"
    },
    {
        "word_count": 3,
        "value": "44 TPP table"
    },
    {
        "word_count": 3,
        "value": "Supports OR operator:"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "Antoine de Saint-Exupery"
    },
    {
        "word_count": 3,
        "value": "Tic Tac Toe"
    },
    {
        "word_count": 3,
        "value": "First class collections"
    },
    {
        "word_count": 3,
        "value": "} 4 5"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "72 Refactoring golf\u2076\u2070"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "} 21 }"
    },
    {
        "word_count": 3,
        "value": "Highlighted code smells"
    },
    {
        "word_count": 3,
        "value": "Code smells hierarchy"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "} 10 }"
    },
    {
        "word_count": 3,
        "value": "Message Message Chains"
    },
    {
        "word_count": 3,
        "value": "Refactor code smells"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 97"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 98"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 99"
    },
    {
        "word_count": 3,
        "value": "Test Doubles guidelines"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 100"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 101"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 103"
    },
    {
        "word_count": 3,
        "value": "CQS Principle trade-offs"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 104"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 105"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 107"
    },
    {
        "word_count": 3,
        "value": "TEST DOUBLES 108"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "} 8 }"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "} 14 }"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "112 Characterization tests"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "TESTING LEGACY CODE"
    },
    {
        "word_count": 3,
        "value": "Design patterns advantages"
    },
    {
        "word_count": 3,
        "value": "Design patterns pitfalls"
    },
    {
        "word_count": 3,
        "value": "Behavioral design patterns"
    },
    {
        "word_count": 3,
        "value": "Visitor Iterator Mediator"
    },
    {
        "word_count": 3,
        "value": "Structural design patterns"
    },
    {
        "word_count": 3,
        "value": "130 Control Coupling"
    },
    {
        "word_count": 3,
        "value": "Method Coupling Premises"
    },
    {
        "word_count": 3,
        "value": "Types of Cohesion"
    },
    {
        "word_count": 3,
        "value": "Example: Initialization, finalization"
    },
    {
        "word_count": 3,
        "value": "Cohesion / Coupling"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "Single Responsibility Principle"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "} 12 }"
    },
    {
        "word_count": 3,
        "value": "} 17 }"
    },
    {
        "word_count": 3,
        "value": "} 35 }"
    },
    {
        "word_count": 3,
        "value": "Dependency Inversion Principle"
    },
    {
        "word_count": 3,
        "value": "Balanced Abstraction Principle"
    },
    {
        "word_count": 3,
        "value": "} 9 }"
    },
    {
        "word_count": 3,
        "value": "} 9 }"
    },
    {
        "word_count": 3,
        "value": "155 For example:"
    },
    {
        "word_count": 3,
        "value": "} 7 }"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "} 15 }"
    },
    {
        "word_count": 3,
        "value": "Types of Connascence"
    },
    {
        "word_count": 3,
        "value": "} 9 }"
    },
    {
        "word_count": 3,
        "value": "} 14 15"
    },
    {
        "word_count": 3,
        "value": "} 19 20"
    },
    {
        "word_count": 3,
        "value": "} 9 10"
    },
    {
        "word_count": 3,
        "value": "} 19 }"
    },
    {
        "word_count": 3,
        "value": "} 15 }"
    },
    {
        "word_count": 3,
        "value": "} 27 }"
    },
    {
        "word_count": 3,
        "value": "} 25 }"
    },
    {
        "word_count": 3,
        "value": "} 11 }"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "} 11 }"
    },
    {
        "word_count": 3,
        "value": "} 6 7"
    },
    {
        "word_count": 3,
        "value": "} 11 12"
    },
    {
        "word_count": 3,
        "value": "} 20 }"
    },
    {
        "word_count": 3,
        "value": "} 8 9"
    },
    {
        "word_count": 3,
        "value": "} 13 14"
    },
    {
        "word_count": 3,
        "value": "} 18 19"
    },
    {
        "word_count": 3,
        "value": "} 27 }"
    },
    {
        "word_count": 3,
        "value": "} 15 }"
    },
    {
        "word_count": 3,
        "value": "} 23 }"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "Has fewer elements"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "} 10 }"
    },
    {
        "word_count": 3,
        "value": "} 9 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 208"
    },
    {
        "word_count": 3,
        "value": "Classic TDD approach"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 209"
    },
    {
        "word_count": 3,
        "value": "Classic TDD flow"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 210"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 211"
    },
    {
        "word_count": 3,
        "value": "Acceptance test styles"
    },
    {
        "word_count": 3,
        "value": "} 14 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 212"
    },
    {
        "word_count": 3,
        "value": "Double loop TDD"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 213"
    },
    {
        "word_count": 3,
        "value": "Double loop TDD"
    },
    {
        "word_count": 3,
        "value": "The Outside-In approach"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 214"
    },
    {
        "word_count": 3,
        "value": "An Outside-In mindset"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 215"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 216"
    },
    {
        "word_count": 3,
        "value": "} 8 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 217"
    },
    {
        "word_count": 3,
        "value": "} 8 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 218"
    },
    {
        "word_count": 3,
        "value": "} 7 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 219"
    },
    {
        "word_count": 3,
        "value": "Outside-In TDD flow"
    },
    {
        "word_count": 3,
        "value": "} 17 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 221"
    },
    {
        "word_count": 3,
        "value": "} 17 }"
    },
    {
        "word_count": 3,
        "value": "} 17 }"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 223"
    },
    {
        "word_count": 3,
        "value": "Kata Stock portfolio"
    },
    {
        "word_count": 3,
        "value": "Other important aspects:"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 225"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 226"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 227"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 229"
    },
    {
        "word_count": 3,
        "value": "OUTSIDE-IN DEVELOPMENT 230"
    },
    {
        "word_count": 3,
        "value": "Agile feedback loops"
    },
    {
        "word_count": 3,
        "value": "Bugs and communication"
    },
    {
        "word_count": 3,
        "value": "235 User stories"
    },
    {
        "word_count": 3,
        "value": "Scenario 2: \u2026"
    },
    {
        "word_count": 3,
        "value": "} 13 14"
    },
    {
        "word_count": 3,
        "value": "The walking skeleton"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "William Edwards Deming"
    },
    {
        "word_count": 3,
        "value": "Knowledge versus understanding"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "Theory of Constraints"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "12th Agile Principle"
    },
    {
        "word_count": 3,
        "value": "User story mapping"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "Business Model Canvas"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "Synchronous Versus Asynchronous"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "Bounded context communication"
    },
    {
        "word_count": 3,
        "value": "Command Query Separation"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "Business and DevOps"
    },
    {
        "word_count": 3,
        "value": "The First Way"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "The Second Way"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "UNDERSTAND THE BUSINESS"
    },
    {
        "word_count": 3,
        "value": "The green flag"
    },
    {
        "word_count": 3,
        "value": "Russell Lincoln Ackoff"
    },
    {
        "word_count": 3,
        "value": "The human factor"
    },
    {
        "word_count": 3,
        "value": "Fifth Agile Principle"
    },
    {
        "word_count": 3,
        "value": "The EventStorming approach"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 295"
    },
    {
        "word_count": 3,
        "value": "} 10 }"
    },
    {
        "word_count": 3,
        "value": "} 8 }"
    },
    {
        "word_count": 3,
        "value": "} 8 }"
    },
    {
        "word_count": 3,
        "value": "} 11 }"
    },
    {
        "word_count": 3,
        "value": "} 15 }"
    },
    {
        "word_count": 3,
        "value": "} 12 }"
    },
    {
        "word_count": 3,
        "value": "} 10 11"
    },
    {
        "word_count": 3,
        "value": "} 18 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 299"
    },
    {
        "word_count": 3,
        "value": "} 10 }"
    },
    {
        "word_count": 3,
        "value": "} 13 }"
    },
    {
        "word_count": 3,
        "value": "} 10 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 300"
    },
    {
        "word_count": 3,
        "value": "}; 12 13"
    },
    {
        "word_count": 3,
        "value": "} 17 }"
    },
    {
        "word_count": 3,
        "value": "}; 10 11"
    },
    {
        "word_count": 3,
        "value": "} 17 18"
    },
    {
        "word_count": 3,
        "value": "} 20 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 301"
    },
    {
        "word_count": 3,
        "value": "} 17 }"
    },
    {
        "word_count": 3,
        "value": "}; 13 14"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 302"
    },
    {
        "word_count": 3,
        "value": "} 23 }"
    },
    {
        "word_count": 3,
        "value": "}; 11 12"
    },
    {
        "word_count": 3,
        "value": "} 18 19"
    },
    {
        "word_count": 3,
        "value": "} 24 25"
    },
    {
        "word_count": 3,
        "value": "} 27 }"
    },
    {
        "word_count": 3,
        "value": "} 21 }"
    },
    {
        "word_count": 3,
        "value": "}; 14 15"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 304"
    },
    {
        "word_count": 3,
        "value": "} 21 22"
    },
    {
        "word_count": 3,
        "value": "} 27 28"
    },
    {
        "word_count": 3,
        "value": "} 33 34"
    },
    {
        "word_count": 3,
        "value": "} 39 40"
    },
    {
        "word_count": 3,
        "value": "} 42 }"
    },
    {
        "word_count": 3,
        "value": "}; 14 15"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 305"
    },
    {
        "word_count": 3,
        "value": "} 21 22"
    },
    {
        "word_count": 3,
        "value": "} 29 30"
    },
    {
        "word_count": 3,
        "value": "} 35 36"
    },
    {
        "word_count": 3,
        "value": "} 41 42"
    },
    {
        "word_count": 3,
        "value": "} 47 48"
    },
    {
        "word_count": 3,
        "value": "} 56 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 306"
    },
    {
        "word_count": 3,
        "value": "}; 15 16"
    },
    {
        "word_count": 3,
        "value": "} 31 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 307"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 308"
    },
    {
        "word_count": 3,
        "value": "}; 52 53"
    },
    {
        "word_count": 3,
        "value": "} 69 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 309"
    },
    {
        "word_count": 3,
        "value": "} 25 26"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 310"
    },
    {
        "word_count": 3,
        "value": "} 78 }"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 311"
    },
    {
        "word_count": 3,
        "value": "SAMPLE SOLUTIONS 312"
    },
    {
        "word_count": 3,
        "value": "ABOUT THE AUTHORS"
    },
    {
        "word_count": 3,
        "value": "ABOUT THE AUTHORS"
    },
    {
        "word_count": 3,
        "value": "315 FEEDBACK PLEASE"
    },
    {
        "word_count": 3,
        "value": "ABOUT THE AUTHORS"
    },
    {
        "word_count": 2,
        "value": "ACKNOWLEDGEMENTS Pedro"
    },
    {
        "word_count": 2,
        "value": "Calvin Coolidge"
    },
    {
        "word_count": 2,
        "value": "Israelmore Ayivor"
    },
    {
        "word_count": 2,
        "value": "Why distilled?"
    },
    {
        "word_count": 2,
        "value": "Simple design"
    },
    {
        "word_count": 2,
        "value": "Pablo Picasso"
    },
    {
        "word_count": 2,
        "value": "Help others"
    },
    {
        "word_count": 2,
        "value": "First steps"
    },
    {
        "word_count": 2,
        "value": "PAIR PROGRAMMING"
    },
    {
        "word_count": 2,
        "value": "Kent Beck"
    },
    {
        "word_count": 2,
        "value": "Chess clock"
    },
    {
        "word_count": 2,
        "value": "Ping Pong/Popcorn"
    },
    {
        "word_count": 2,
        "value": "Strong-style pairing"
    },
    {
        "word_count": 2,
        "value": "Llewellyn Falco\u00b9\u2077"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "Martin Fowler"
    },
    {
        "word_count": 2,
        "value": "Classic TDD"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "\u2022 Fast"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "The transformations"
    },
    {
        "word_count": 2,
        "value": "Supports parenthesis:"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "{ 3"
    },
    {
        "word_count": 2,
        "value": "{ 3"
    },
    {
        "word_count": 2,
        "value": "No getters/setters/properties"
    },
    {
        "word_count": 2,
        "value": "{ 9"
    },
    {
        "word_count": 2,
        "value": "{ 3"
    },
    {
        "word_count": 2,
        "value": "firstName 4"
    },
    {
        "word_count": 2,
        "value": "} 10"
    },
    {
        "word_count": 2,
        "value": "{ 14"
    },
    {
        "word_count": 2,
        "value": "{ 3"
    },
    {
        "word_count": 2,
        "value": "{ 7"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "Ellen DeGeneres"
    },
    {
        "word_count": 2,
        "value": "Example Before"
    },
    {
        "word_count": 2,
        "value": "Rename Rename"
    },
    {
        "word_count": 2,
        "value": "Example Before"
    },
    {
        "word_count": 2,
        "value": "Example Before"
    },
    {
        "word_count": 2,
        "value": "Extract Extract"
    },
    {
        "word_count": 2,
        "value": "Example Before"
    },
    {
        "word_count": 2,
        "value": "After After"
    },
    {
        "word_count": 2,
        "value": "Reorder Reorder"
    },
    {
        "word_count": 2,
        "value": "Example Before"
    },
    {
        "word_count": 2,
        "value": "break; 15"
    },
    {
        "word_count": 2,
        "value": "default: 16"
    },
    {
        "word_count": 2,
        "value": "break; 18"
    },
    {
        "word_count": 2,
        "value": "} 19"
    },
    {
        "word_count": 2,
        "value": "After After"
    },
    {
        "word_count": 2,
        "value": "79 Migrate"
    },
    {
        "word_count": 2,
        "value": "81 Books"
    },
    {
        "word_count": 2,
        "value": "Design smells"
    },
    {
        "word_count": 2,
        "value": "Code smells"
    },
    {
        "word_count": 2,
        "value": "Primitive Obsession"
    },
    {
        "word_count": 2,
        "value": "Feature Envy"
    },
    {
        "word_count": 2,
        "value": "{ 11"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "TEST DOUBLES"
    },
    {
        "word_count": 2,
        "value": "Command-Query Separation"
    },
    {
        "word_count": 2,
        "value": "Dummy objects"
    },
    {
        "word_count": 2,
        "value": "Fake objects"
    },
    {
        "word_count": 2,
        "value": "{ 12"
    },
    {
        "word_count": 2,
        "value": "{ 15"
    },
    {
        "word_count": 2,
        "value": "} 17"
    },
    {
        "word_count": 2,
        "value": "}) 19"
    },
    {
        "word_count": 2,
        "value": "{ 22"
    },
    {
        "word_count": 2,
        "value": "{ 25"
    },
    {
        "word_count": 2,
        "value": "} 27"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "{ 11"
    },
    {
        "word_count": 2,
        "value": "{ 7"
    },
    {
        "word_count": 2,
        "value": "//ASSERT 12"
    },
    {
        "word_count": 2,
        "value": "Golden Master"
    },
    {
        "word_count": 2,
        "value": "113 Feasibility"
    },
    {
        "word_count": 2,
        "value": "Combination Tests"
    },
    {
        "word_count": 2,
        "value": "Guideline questions"
    },
    {
        "word_count": 2,
        "value": "Albert Einstein"
    },
    {
        "word_count": 2,
        "value": "Refactor design"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "126 Books"
    },
    {
        "word_count": 2,
        "value": "Kent Beck"
    },
    {
        "word_count": 2,
        "value": "Interaction Coupling"
    },
    {
        "word_count": 2,
        "value": "Message Coupling"
    },
    {
        "word_count": 2,
        "value": "Data Coupling"
    },
    {
        "word_count": 2,
        "value": "Stamp Coupling"
    },
    {
        "word_count": 2,
        "value": "External Coupling"
    },
    {
        "word_count": 2,
        "value": "Common Coupling"
    },
    {
        "word_count": 2,
        "value": "Content Coupling"
    },
    {
        "word_count": 2,
        "value": "Inheritance Coupling"
    },
    {
        "word_count": 2,
        "value": "Method Cohesion"
    },
    {
        "word_count": 2,
        "value": "Functional Cohesion"
    },
    {
        "word_count": 2,
        "value": "Sequential Cohesion"
    },
    {
        "word_count": 2,
        "value": "Communicational/Informational Cohesion"
    },
    {
        "word_count": 2,
        "value": "Procedural Cohesion"
    },
    {
        "word_count": 2,
        "value": "Temporal Cohesion"
    },
    {
        "word_count": 2,
        "value": "Logical Cohesion"
    },
    {
        "word_count": 2,
        "value": "Coincidental Cohesion"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "Open/Closed Principle"
    },
    {
        "word_count": 2,
        "value": "} 7"
    },
    {
        "word_count": 2,
        "value": "} 16"
    },
    {
        "word_count": 2,
        "value": "} 11"
    },
    {
        "word_count": 2,
        "value": "} 20"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "} 7"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "} 7"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "{ 4"
    },
    {
        "word_count": 2,
        "value": "{ 12"
    },
    {
        "word_count": 2,
        "value": "Validate() 11"
    },
    {
        "word_count": 2,
        "value": "AddBus(); 11"
    },
    {
        "word_count": 2,
        "value": "break; 12"
    },
    {
        "word_count": 2,
        "value": "AddBike(); 5"
    },
    {
        "word_count": 2,
        "value": "AddBus(); 11"
    },
    {
        "word_count": 2,
        "value": "break; 12"
    },
    {
        "word_count": 2,
        "value": "SendMessageToIntegrationTestBus(expectedMessage); 9"
    },
    {
        "word_count": 2,
        "value": "SendMessageToIntegrationTestBus(expectedMessage); 11"
    },
    {
        "word_count": 2,
        "value": "count++; 6"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "Minimizes duplication"
    },
    {
        "word_count": 2,
        "value": "Maximizes clarity"
    },
    {
        "word_count": 2,
        "value": "Arlo Belshee\u00b9\u2076\u2074"
    },
    {
        "word_count": 2,
        "value": "Definition #1\u00b9\u2076\u2075"
    },
    {
        "word_count": 2,
        "value": "Definition #2"
    },
    {
        "word_count": 2,
        "value": "Definition #3"
    },
    {
        "word_count": 2,
        "value": "Definition #4"
    },
    {
        "word_count": 2,
        "value": "Definition #5"
    },
    {
        "word_count": 2,
        "value": "Definition #6\u00b9\u2076\u2076"
    },
    {
        "word_count": 2,
        "value": "Part II"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "Systems Entropy"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "Friedrich Nietzsche"
    },
    {
        "word_count": 2,
        "value": "OUTSIDE-IN DEVELOPMENT"
    },
    {
        "word_count": 2,
        "value": "Alan Kay"
    },
    {
        "word_count": 2,
        "value": "Acceptance tests"
    },
    {
        "word_count": 2,
        "value": "{ 6"
    },
    {
        "word_count": 2,
        "value": "Test boundaries"
    },
    {
        "word_count": 2,
        "value": "Test boundaries"
    },
    {
        "word_count": 2,
        "value": "{ 6"
    },
    {
        "word_count": 2,
        "value": "{ 6"
    },
    {
        "word_count": 2,
        "value": "{ 6"
    },
    {
        "word_count": 2,
        "value": "Portfolio criteria"
    },
    {
        "word_count": 2,
        "value": "World correctness"
    },
    {
        "word_count": 2,
        "value": "Using items"
    },
    {
        "word_count": 2,
        "value": "Collecting gold"
    },
    {
        "word_count": 2,
        "value": "OO Design"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "Shiego Shingo"
    },
    {
        "word_count": 2,
        "value": "232 Poka-yoke"
    },
    {
        "word_count": 2,
        "value": "Behavior-Driven Development"
    },
    {
        "word_count": 2,
        "value": "{ 8"
    },
    {
        "word_count": 2,
        "value": "Given_customer_previously_bought_an_item(); 9"
    },
    {
        "word_count": 2,
        "value": "And_I_currently_have_four_items_in_stock(); 10"
    },
    {
        "word_count": 2,
        "value": "Then_I_should_have_five_items_in_stock(); 12"
    },
    {
        "word_count": 2,
        "value": "{ 7"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "Given(Customer_previously_bought_an_item); 6"
    },
    {
        "word_count": 2,
        "value": "And(I_currently_have_four_items_in_stock); 7"
    },
    {
        "word_count": 2,
        "value": "When(He_returns_the_item_for_a_return); 8"
    },
    {
        "word_count": 2,
        "value": "Then(I_should_have_five_items_in_stock); 9"
    },
    {
        "word_count": 2,
        "value": "Feature complete"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "244 Books"
    },
    {
        "word_count": 2,
        "value": "5 Whys"
    },
    {
        "word_count": 2,
        "value": "Impact mapping"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "267 Books"
    },
    {
        "word_count": 2,
        "value": "Friedrich Nietzsche"
    },
    {
        "word_count": 2,
        "value": "Team building"
    },
    {
        "word_count": 2,
        "value": "Cracking on"
    },
    {
        "word_count": 2,
        "value": "Team play"
    },
    {
        "word_count": 2,
        "value": "Patrick Lencioni"
    },
    {
        "word_count": 2,
        "value": "Patrick Lencioni"
    },
    {
        "word_count": 2,
        "value": "Resources Web"
    },
    {
        "word_count": 2,
        "value": "The principles"
    },
    {
        "word_count": 2,
        "value": "Alberto Brandolini"
    },
    {
        "word_count": 2,
        "value": "{ 7"
    },
    {
        "word_count": 2,
        "value": "{ 8"
    },
    {
        "word_count": 2,
        "value": "{ 6"
    },
    {
        "word_count": 2,
        "value": "{ 10"
    },
    {
        "word_count": 2,
        "value": "{ 9"
    },
    {
        "word_count": 2,
        "value": "{ 5"
    },
    {
        "word_count": 2,
        "value": "{ 8"
    },
    {
        "word_count": 2,
        "value": "{ 13"
    },
    {
        "word_count": 2,
        "value": "{ 8"
    },
    {
        "word_count": 2,
        "value": "{ 10"
    },
    {
        "word_count": 2,
        "value": "{ 8"
    },
    {
        "word_count": 2,
        "value": "{ 14"
    },
    {
        "word_count": 2,
        "value": "20 21"
    },
    {
        "word_count": 2,
        "value": "{ 21"
    },
    {
        "word_count": 2,
        "value": "{ 18"
    },
    {
        "word_count": 2,
        "value": "{ 24"
    },
    {
        "word_count": 2,
        "value": "{ 30"
    },
    {
        "word_count": 2,
        "value": "{ 36"
    },
    {
        "word_count": 2,
        "value": "{ 26"
    },
    {
        "word_count": 2,
        "value": "{ 32"
    },
    {
        "word_count": 2,
        "value": "{ 38"
    },
    {
        "word_count": 2,
        "value": "{ 44"
    },
    {
        "word_count": 2,
        "value": "{ 50"
    },
    {
        "word_count": 2,
        "value": "{ 18"
    },
    {
        "word_count": 2,
        "value": "{ 22"
    },
    {
        "word_count": 2,
        "value": "} 27"
    },
    {
        "word_count": 2,
        "value": "} 28"
    },
    {
        "word_count": 2,
        "value": "{ 28"
    },
    {
        "word_count": 2,
        "value": "{ 55"
    },
    {
        "word_count": 2,
        "value": "} 65"
    },
    {
        "word_count": 2,
        "value": "} 68"
    },
    {
        "word_count": 2,
        "value": "} 38"
    },
    {
        "word_count": 2,
        "value": "} 52"
    },
    {
        "word_count": 2,
        "value": "} 60"
    },
    {
        "word_count": 2,
        "value": "} 68"
    },
    {
        "word_count": 2,
        "value": "} 77"
    },
    {
        "word_count": 2,
        "value": "Inappropriate Intimacy"
    },
    {
        "word_count": 2,
        "value": "314 Alessandro"
    },
    {
        "word_count": 2,
        "value": "Personalized coaching"
    },
    {
        "word_count": 2,
        "value": "Ed Batista"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "Alessandro"
    },
    {
        "word_count": 1,
        "value": "Contents"
    },
    {
        "word_count": 1,
        "value": "CONTENTS"
    },
    {
        "word_count": 1,
        "value": "CONTENTS"
    },
    {
        "word_count": 1,
        "value": "CONTENTS"
    },
    {
        "word_count": 1,
        "value": "CONTENTS"
    },
    {
        "word_count": 1,
        "value": "CONTENTS"
    },
    {
        "word_count": 1,
        "value": "CONTENTS"
    },
    {
        "word_count": 1,
        "value": "Introduction"
    },
    {
        "word_count": 1,
        "value": "3"
    },
    {
        "word_count": 1,
        "value": "4"
    },
    {
        "word_count": 1,
        "value": "5"
    },
    {
        "word_count": 1,
        "value": "8"
    },
    {
        "word_count": 1,
        "value": "9"
    },
    {
        "word_count": 1,
        "value": "10"
    },
    {
        "word_count": 1,
        "value": "11"
    },
    {
        "word_count": 1,
        "value": "Caution"
    },
    {
        "word_count": 1,
        "value": "12"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "Pedro"
    },
    {
        "word_count": 1,
        "value": "Caution"
    },
    {
        "word_count": 1,
        "value": "Caution"
    },
    {
        "word_count": 1,
        "value": "Breaks"
    },
    {
        "word_count": 1,
        "value": "Pomodoro"
    },
    {
        "word_count": 1,
        "value": "Caution"
    },
    {
        "word_count": 1,
        "value": "Katas"
    },
    {
        "word_count": 1,
        "value": "Pedro"
    },
    {
        "word_count": 1,
        "value": "21"
    },
    {
        "word_count": 1,
        "value": "22"
    },
    {
        "word_count": 1,
        "value": "23"
    },
    {
        "word_count": 1,
        "value": "Important"
    },
    {
        "word_count": 1,
        "value": "24"
    },
    {
        "word_count": 1,
        "value": "25"
    },
    {
        "word_count": 1,
        "value": "26"
    },
    {
        "word_count": 1,
        "value": "27"
    },
    {
        "word_count": 1,
        "value": "28"
    },
    {
        "word_count": 1,
        "value": "30"
    },
    {
        "word_count": 1,
        "value": "31"
    },
    {
        "word_count": 1,
        "value": "33"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "1"
    },
    {
        "word_count": 1,
        "value": "2"
    },
    {
        "word_count": 1,
        "value": "3"
    },
    {
        "word_count": 1,
        "value": "1"
    },
    {
        "word_count": 1,
        "value": "1"
    },
    {
        "word_count": 1,
        "value": "1"
    },
    {
        "word_count": 1,
        "value": "Katas"
    },
    {
        "word_count": 1,
        "value": "Yourtaskistoprocessasequenceofintegernumberstodeterminethefollowingstatistics:\u00b3\u2079"
    },
    {
        "word_count": 1,
        "value": "38"
    },
    {
        "word_count": 1,
        "value": "39"
    },
    {
        "word_count": 1,
        "value": "41"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Pedro"
    },
    {
        "word_count": 1,
        "value": "Kata"
    },
    {
        "word_count": 1,
        "value": "43"
    },
    {
        "word_count": 1,
        "value": "Examples:"
    },
    {
        "word_count": 1,
        "value": "Important"
    },
    {
        "word_count": 1,
        "value": "Important"
    },
    {
        "word_count": 1,
        "value": "47"
    },
    {
        "word_count": 1,
        "value": "49"
    },
    {
        "word_count": 1,
        "value": "50"
    },
    {
        "word_count": 1,
        "value": "51"
    },
    {
        "word_count": 1,
        "value": "52"
    },
    {
        "word_count": 1,
        "value": "56"
    },
    {
        "word_count": 1,
        "value": "Important"
    },
    {
        "word_count": 1,
        "value": "57"
    },
    {
        "word_count": 1,
        "value": "58"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "}"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "60"
    },
    {
        "word_count": 1,
        "value": "}"
    },
    {
        "word_count": 1,
        "value": "}"
    },
    {
        "word_count": 1,
        "value": "61"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "Example"
    },
    {
        "word_count": 1,
        "value": "}"
    },
    {
        "word_count": 1,
        "value": "62"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "Why?"
    },
    {
        "word_count": 1,
        "value": "Heuristics"
    },
    {
        "word_count": 1,
        "value": "Tip"
    },
    {
        "word_count": 1,
        "value": "65"
    },
    {
        "word_count": 1,
        "value": "66"
    },
    {
        "word_count": 1,
        "value": "Walking"
    },
    {
        "word_count": 1,
        "value": "Pedro"
    },
    {
        "word_count": 1,
        "value": "Kata"
    },
    {
        "word_count": 1,
        "value": "73"
    },
    {
        "word_count": 1,
        "value": "Format"
    },
    {
        "word_count": 1,
        "value": "75"
    },
    {
        "word_count": 1,
        "value": "76"
    },
    {
        "word_count": 1,
        "value": "77"
    },
    {
        "word_count": 1,
        "value": "78"
    },
    {
        "word_count": 1,
        "value": "Expand"
    },
    {
        "word_count": 1,
        "value": "Contract"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Pedro"
    },
    {
        "word_count": 1,
        "value": "83"
    },
    {
        "word_count": 1,
        "value": "84"
    },
    {
        "word_count": 1,
        "value": "86"
    },
    {
        "word_count": 1,
        "value": "87"
    },
    {
        "word_count": 1,
        "value": "Example"
    },
    {
        "word_count": 1,
        "value": "90"
    },
    {
        "word_count": 1,
        "value": "93"
    },
    {
        "word_count": 1,
        "value": "95"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "Principles"
    },
    {
        "word_count": 1,
        "value": "Commands"
    },
    {
        "word_count": 1,
        "value": "Stubs"
    },
    {
        "word_count": 1,
        "value": "Mocks"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "111"
    },
    {
        "word_count": 1,
        "value": "Assert"
    },
    {
        "word_count": 1,
        "value": "Hints:"
    },
    {
        "word_count": 1,
        "value": "C#"
    },
    {
        "word_count": 1,
        "value": "Java"
    },
    {
        "word_count": 1,
        "value": "Python"
    },
    {
        "word_count": 1,
        "value": "115"
    },
    {
        "word_count": 1,
        "value": "Ruby"
    },
    {
        "word_count": 1,
        "value": "116"
    },
    {
        "word_count": 1,
        "value": "Conclusions"
    },
    {
        "word_count": 1,
        "value": "117"
    },
    {
        "word_count": 1,
        "value": "118"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "120"
    },
    {
        "word_count": 1,
        "value": "Caution"
    },
    {
        "word_count": 1,
        "value": "121"
    },
    {
        "word_count": 1,
        "value": "122"
    },
    {
        "word_count": 1,
        "value": "Memento"
    },
    {
        "word_count": 1,
        "value": "123"
    },
    {
        "word_count": 1,
        "value": "Caution"
    },
    {
        "word_count": 1,
        "value": "125"
    },
    {
        "word_count": 1,
        "value": "Running"
    },
    {
        "word_count": 1,
        "value": "Coupling"
    },
    {
        "word_count": 1,
        "value": "132"
    },
    {
        "word_count": 1,
        "value": "Cohesion"
    },
    {
        "word_count": 1,
        "value": "134"
    },
    {
        "word_count": 1,
        "value": "135"
    },
    {
        "word_count": 1,
        "value": "136"
    },
    {
        "word_count": 1,
        "value": "137"
    },
    {
        "word_count": 1,
        "value": "138"
    },
    {
        "word_count": 1,
        "value": "139"
    },
    {
        "word_count": 1,
        "value": "141"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "144"
    },
    {
        "word_count": 1,
        "value": "145"
    },
    {
        "word_count": 1,
        "value": "}"
    },
    {
        "word_count": 1,
        "value": "146"
    },
    {
        "word_count": 1,
        "value": "11"
    },
    {
        "word_count": 1,
        "value": "148"
    },
    {
        "word_count": 1,
        "value": "149"
    },
    {
        "word_count": 1,
        "value": "150"
    },
    {
        "word_count": 1,
        "value": "151"
    },
    {
        "word_count": 1,
        "value": "152"
    },
    {
        "word_count": 1,
        "value": "153"
    },
    {
        "word_count": 1,
        "value": "154"
    },
    {
        "word_count": 1,
        "value": "156"
    },
    {
        "word_count": 1,
        "value": "157"
    },
    {
        "word_count": 1,
        "value": "159"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "161"
    },
    {
        "word_count": 1,
        "value": "Dimensions"
    },
    {
        "word_count": 1,
        "value": "Locality"
    },
    {
        "word_count": 1,
        "value": "162"
    },
    {
        "word_count": 1,
        "value": "Strength"
    },
    {
        "word_count": 1,
        "value": "163"
    },
    {
        "word_count": 1,
        "value": "164"
    },
    {
        "word_count": 1,
        "value": "165"
    },
    {
        "word_count": 1,
        "value": "166"
    },
    {
        "word_count": 1,
        "value": "167"
    },
    {
        "word_count": 1,
        "value": "13"
    },
    {
        "word_count": 1,
        "value": "168"
    },
    {
        "word_count": 1,
        "value": "169"
    },
    {
        "word_count": 1,
        "value": "170"
    },
    {
        "word_count": 1,
        "value": "171"
    },
    {
        "word_count": 1,
        "value": "15"
    },
    {
        "word_count": 1,
        "value": "172"
    },
    {
        "word_count": 1,
        "value": "173"
    },
    {
        "word_count": 1,
        "value": "174"
    },
    {
        "word_count": 1,
        "value": "176"
    },
    {
        "word_count": 1,
        "value": "177"
    },
    {
        "word_count": 1,
        "value": "178"
    },
    {
        "word_count": 1,
        "value": "179"
    },
    {
        "word_count": 1,
        "value": "22"
    },
    {
        "word_count": 1,
        "value": "180"
    },
    {
        "word_count": 1,
        "value": "181"
    },
    {
        "word_count": 1,
        "value": "182"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "183"
    },
    {
        "word_count": 1,
        "value": "184"
    },
    {
        "word_count": 1,
        "value": "186"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "188"
    },
    {
        "word_count": 1,
        "value": "189"
    },
    {
        "word_count": 1,
        "value": "190"
    },
    {
        "word_count": 1,
        "value": "Pedro"
    },
    {
        "word_count": 1,
        "value": "191"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "Alessandro"
    },
    {
        "word_count": 1,
        "value": "192"
    },
    {
        "word_count": 1,
        "value": "193"
    },
    {
        "word_count": 1,
        "value": "195"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "Web"
    },
    {
        "word_count": 1,
        "value": "197"
    },
    {
        "word_count": 1,
        "value": "198"
    },
    {
        "word_count": 1,
        "value": "199"
    },
    {
        "word_count": 1,
        "value": "200"
    },
    {
        "word_count": 1,
        "value": "201"
    },
    {
        "word_count": 1,
        "value": "202"
    },
    {
        "word_count": 1,
        "value": "203"
    },
    {
        "word_count": 1,
        "value": "205"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "Flying"
    },
    {
        "word_count": 1,
        "value": "Wikipedia\u00b9\u2079\u00b9"
    },
    {
        "word_count": 1,
        "value": "Looking"
    },
    {
        "word_count": 1,
        "value": "Opening"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "233"
    },
    {
        "word_count": 1,
        "value": "234"
    },
    {
        "word_count": 1,
        "value": "236"
    },
    {
        "word_count": 1,
        "value": "238"
    },
    {
        "word_count": 1,
        "value": "When_he_returns_the_item_for_a_return();"
    },
    {
        "word_count": 1,
        "value": "239"
    },
    {
        "word_count": 1,
        "value": "11"
    },
    {
        "word_count": 1,
        "value": "240"
    },
    {
        "word_count": 1,
        "value": "241"
    },
    {
        "word_count": 1,
        "value": "Fast"
    },
    {
        "word_count": 1,
        "value": "Boundaries"
    },
    {
        "word_count": 1,
        "value": "242"
    },
    {
        "word_count": 1,
        "value": "243"
    },
    {
        "word_count": 1,
        "value": "246"
    },
    {
        "word_count": 1,
        "value": "247"
    },
    {
        "word_count": 1,
        "value": "248"
    },
    {
        "word_count": 1,
        "value": "249"
    },
    {
        "word_count": 1,
        "value": "250"
    },
    {
        "word_count": 1,
        "value": "251"
    },
    {
        "word_count": 1,
        "value": "PopcornFlow"
    },
    {
        "word_count": 1,
        "value": "253"
    },
    {
        "word_count": 1,
        "value": "254"
    },
    {
        "word_count": 1,
        "value": "EventStorming"
    },
    {
        "word_count": 1,
        "value": "255"
    },
    {
        "word_count": 1,
        "value": "256"
    },
    {
        "word_count": 1,
        "value": "258"
    },
    {
        "word_count": 1,
        "value": "259"
    },
    {
        "word_count": 1,
        "value": "260"
    },
    {
        "word_count": 1,
        "value": "261"
    },
    {
        "word_count": 1,
        "value": "262"
    },
    {
        "word_count": 1,
        "value": "263"
    },
    {
        "word_count": 1,
        "value": "264"
    },
    {
        "word_count": 1,
        "value": "266"
    },
    {
        "word_count": 1,
        "value": "Terraforming"
    },
    {
        "word_count": 1,
        "value": "269"
    },
    {
        "word_count": 1,
        "value": "270"
    },
    {
        "word_count": 1,
        "value": "271"
    },
    {
        "word_count": 1,
        "value": "272"
    },
    {
        "word_count": 1,
        "value": "273"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "275"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "276"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "277"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "278"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "279"
    },
    {
        "word_count": 1,
        "value": "CONCLUSION"
    },
    {
        "word_count": 1,
        "value": "280"
    },
    {
        "word_count": 1,
        "value": "Books"
    },
    {
        "word_count": 1,
        "value": "Appendices"
    },
    {
        "word_count": 1,
        "value": "284"
    },
    {
        "word_count": 1,
        "value": "285"
    },
    {
        "word_count": 1,
        "value": "286"
    },
    {
        "word_count": 1,
        "value": "288"
    },
    {
        "word_count": 1,
        "value": "289"
    },
    {
        "word_count": 1,
        "value": "290"
    },
    {
        "word_count": 1,
        "value": "292"
    },
    {
        "word_count": 1,
        "value": "Resources"
    },
    {
        "word_count": 1,
        "value": "}"
    },
    {
        "word_count": 1,
        "value": "{"
    },
    {
        "word_count": 1,
        "value": "16"
    },
    {
        "word_count": 1,
        "value": "36"
    },
    {
        "word_count": 1,
        "value": "Marco"
    },
    {
        "word_count": 1,
        "value": "Individuals"
    },
    {
        "word_count": 1,
        "value": "Organizations"
    },
    {
        "word_count": 1,
        "value": "316"
    }
]